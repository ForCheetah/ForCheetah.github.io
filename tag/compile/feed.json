{
    "version": "https://jsonfeed.org/version/1",
    "title": "Пусть этот камень будет более крепким, чем человек • All posts by \"compile\" tag",
    "description": "有自己的博客很帅，但是我很懒，要命！！！",
    "home_page_url": "https://forcheetah.github.io",
    "items": [
        {
            "id": "https://forcheetah.github.io/2024/10/13/tvm02/",
            "url": "https://forcheetah.github.io/2024/10/13/tvm02/",
            "title": "【TVM】通过代码学习编译流程【2】模型转换",
            "date_published": "2024-10-13T12:29:30.047Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本系列文章将从代码和流程图入手，详细介绍 TVM AI 编译器的编译流程。本文章为第二篇，对应的 TVM 版本为当前最新版本 1.7。</p>\n<p>网络上有不少 TVM 工程的教程资源，如果本博客也是其他教程的简单重复的话，则网络的角落里又多了一份纯粹的空间占用者。所以我在想，本文章有什么特点才值得一看呢？我觉得有两个优点: 1、本文从代码出发，不会泛泛而谈，能够从细节了解 TVM；2、自认为结构流程图画的不错，能够从整体上把握 TVM 的脉络。所以，也许值得一看呢。</p>\n<p>本篇文章以 onnx 为例，介绍主流模型转换为 TVM 高级中间表示 Relay IR 的过程。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"onnx结构\"><a class=\"anchor\" href=\"#onnx结构\">#</a> Onnx 结构</h1>\n<p>先来了解一下 onnx 模型的结构信息：下图是一个简单的 onnx 模型的结构（只选取了代表性的一部分）</p>\n<p>全局信息：  版本信息： <code>ir_version: 7</code>  ； 来源： <code>producer_name: &quot;pytorch&quot;</code>    来源版本 ： <code>producer_version: &quot;2.1.0&quot;</code> <br>\n 图信息：包含在 graph 字段中。</p>\n<ul>\n<li>节点信息 node：指明输入 input 输出 output 张量，本身的名字 name，节点类型 type，参数信息 attribute</li>\n<li>张量信息 initializer：维度 dims，类型信息 data_type，名字 name，具体数值 raw_data。</li>\n<li>输入张量 input</li>\n<li>输出张量 output</li>\n</ul>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ir_version<span class=\"token operator\">:</span> <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>producer_name<span class=\"token operator\">:</span> <span class=\"token string\">\"pytorch\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>producer_version<span class=\"token operator\">:</span> <span class=\"token string\">\"2.1.0\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>graph <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  node <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    input<span class=\"token operator\">:</span> <span class=\"token string\">\"start\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    input<span class=\"token operator\">:</span> <span class=\"token string\">\"onnx::Conv_28\"</span>    # kernal</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    input<span class=\"token operator\">:</span> <span class=\"token string\">\"onnx::Conv_29\"</span>    # bias</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    output<span class=\"token operator\">:</span> <span class=\"token string\">\"/conv1/Conv_output_0\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"/conv1/Conv\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    op_type<span class=\"token operator\">:</span> <span class=\"token string\">\"Conv\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    attribute <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"dilations\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      type<span class=\"token operator\">:</span> INTS</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    attribute <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"group\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      i<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      type<span class=\"token operator\">:</span> INT</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    attribute <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"kernel_shape\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      type<span class=\"token operator\">:</span> INTS</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    attribute <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"pads\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      type<span class=\"token operator\">:</span> INTS</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  node <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    input<span class=\"token operator\">:</span> <span class=\"token string\">\"/conv1/Conv_output_0\"</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    output<span class=\"token operator\">:</span> <span class=\"token string\">\"/relu1/Relu_output_0\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"/relu1/Relu\"</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    op_type<span class=\"token operator\">:</span> <span class=\"token string\">\"Relu\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  initializer <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    dims<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    dims<span class=\"token operator\">:</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    data_type<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"fc.weight\"</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    raw_data<span class=\"token operator\">:</span> <span class=\"token string\">\"]&amp;\\212>`\\201\\213\\274@\\227\\224\\275\\274\\331p\\276b@N>\\017\\305\\223>&amp;&amp;\\263\\276(UD=\\300\\257q\\275\\320\\231\\246\\275\\320\\341\\276=\\372\\273&#125;>C\\226\\236> e)\\275\\357\\222\\236>\\212\\\\8>\"</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  initializer <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    dims<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    data_type<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"fc.bias\"</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    raw_data<span class=\"token operator\">:</span> <span class=\"token string\">\"\\3451\\232\\276\\200\\247(=\"</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  input <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"start\"</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    type <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      tensor_type <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        elem_type<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        shape <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  output <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"end\"</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    type <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      tensor_type <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        elem_type<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        shape <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>opset_import <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  version<span class=\"token operator\">:</span> <span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"python脚本\"><a class=\"anchor\" href=\"#python脚本\">#</a> Python 脚本</h1>\n<p>这里提供一个简单的 Python 脚本，调用 TVM Python 前端，实现 onnx 模型的编译过程。tvm 通过代码学习编程流程系列文章将基本采用这个脚本帮助追踪代码。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> onnx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> tvm<span class=\"token punctuation\">.</span>relay <span class=\"token keyword\">as</span> relay</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> tvm</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> tvm<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> graph_executor</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">######################################    路径信息    ##########################################</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>model_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/resnet18.onnx\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>save_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/pythonSave/\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>onnx_model <span class=\"token operator\">=</span> onnx<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>model_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">##################################    图片信息    ##############################################</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>img_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/.tvm_test_data/data/imagenet_cat.png\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Resize it to 224x224</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>resized_image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>img_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>asarray<span class=\"token punctuation\">(</span>resized_image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># Our input image is in HWC layout while ONNX expects CHW input, so convert the array</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>img_data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Normalize according to the ImageNet input specification</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>imagenet_mean <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.485</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.406</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>imagenet_stddev <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.229</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.225</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>norm_img_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>img_data <span class=\"token operator\">/</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> imagenet_mean<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> imagenet_stddev</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># Add the batch dimension, as we are expecting 4-dimensional input: NCHW.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>norm_img_data<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">####################################     模型编译     ###########################################</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>input_name <span class=\"token operator\">=</span> <span class=\"token string\">\"data\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>target <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>Target<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>shape_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>input_name<span class=\"token punctuation\">:</span> img_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>mod<span class=\"token punctuation\">,</span> params <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>frontend<span class=\"token punctuation\">.</span>from_onnx<span class=\"token punctuation\">(</span>onnx_model<span class=\"token punctuation\">,</span> shape_dict<span class=\"token punctuation\">,</span> export_node_renamed_model_path<span class=\"token operator\">=</span>save_path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建 IRModule  高级 Relay IR</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">with</span> tvm<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>PassContext<span class=\"token punctuation\">(</span>opt_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    lib <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> target<span class=\"token operator\">=</span>target<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 创建 GraphExecutorFactoryModule  </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#######################################     模型保存      ########################################</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># save</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># 保存编译后的库文件（.so）</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>lib_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.so\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>lib<span class=\"token punctuation\">.</span>get_lib<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>export_library<span class=\"token punctuation\">(</span>lib_fname<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># 保存模型参数（.params）</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>params_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.params\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>params_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> param_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    param_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>relay<span class=\"token punctuation\">.</span>save_param_dict<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_params<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># 保存 JSON 格式的计算图（.json）</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>json_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.json\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>json_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> json_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    json_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_executor_config<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>dev <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>module <span class=\"token operator\">=</span> graph_executor<span class=\"token punctuation\">.</span>GraphModule<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">[</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># graph_executor.GraphModule</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">############################       运行    ##########################################</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>module<span class=\"token punctuation\">.</span>set_input<span class=\"token punctuation\">(</span>input_name<span class=\"token punctuation\">,</span> img_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>module<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>output_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>tvm_output <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>get_output<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tvm_output<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这段代码实现了一个 onnx 格式的 resnet18 模型进行：模型编译、模型保存、模型推理运行的过程。本篇文章介绍模型编译过程中的模型转换部分，也就是 <code>relay.frontend.from_onnx</code>  函数，它将 onnx 模型转化为 TVM 的高级 IR：Relay IR。<br>\n下图是 <code>relay.frontend.from_onnx</code>  函数整体结构流程图，在后面的详细介绍中会截取部分进行展示。</p>\n<p><img loading=\"lazy\" data-src=\"1728821938299.jpg\" alt=\"总体流程图\"></p>\n<h1 id=\"模型转换流程\"><a class=\"anchor\" href=\"#模型转换流程\">#</a> 模型转换流程</h1>\n<p><img loading=\"lazy\" data-src=\"1728822135202.jpg\" alt=\"分图\"></p>\n<p><code>mod, params = relay.frontend.from_onnx(onnx_model, shape_dict)</code>  函数将一个 onnx model 转换成对等的 Relay module。</p>\n<p>首先看下这个函数的参数：</p>\n<p>其中 <code>freeze_params</code>  参数为布尔类型，当为 true 的时候，神经网络模型中的 weight 和 bias 以及 shape 等 Tensor 会被固化到 TVM 将要转换的 IRModule 模型当中，作为 Constants，这种情况下 TVM 的优化可以更加激进， <code>from_onnx()</code>  函数返回的 params 字典不再需要保存这些参数（为空）；当为 False 的时候，weight 和 bias 以及 shape 等 Tensor 会作为变量 variables，后续过程中可以修改、替换这些 tensor，这些 Tensor 会收集起来从 params 字典中返回。 因此建议该参数定为 True。</p>\n<p><code>export_node_renamed_model_path</code>  参数为字符串，因为有时输入模型的节点缺少 name，TVM 会生成新的节点名字，并将更改节点名字的 onnx 模型输出出来。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">from_onnx</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    model<span class=\"token punctuation\">,</span>          <span class=\"token comment\"># onnx 模型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    shape<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\"># 输入 Tensor 的 shape</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    dtype<span class=\"token operator\">=</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># 输入 Tensor 的 type</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    opset<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># onnx 版本</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    freeze_params<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    convert_config<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    export_node_renamed_model_path<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p><code>from_onnx()</code>  函数完成了输入模型的检查校验，之后的关键代码为 <code>mod, params = g.from_onnx(graph, opset)</code>  ，也就是结构流程图中的 <code>GraphProto.from_onnx()</code> 。</p>\n<p><code>GraphProto.from_onnx()</code>  函数具体的完成了 onnx 模型转 Relay IRModule 的过程。过程看下方代码。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">from_onnx</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">,</span> opset<span class=\"token punctuation\">,</span> get_output_expr<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        self<span class=\"token punctuation\">.</span>opset <span class=\"token operator\">=</span> opset</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_parse_graph_initializers<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_parse_graph_input<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_check_user_inputs_in_outermost_graph_scope<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_check_for_unsupported_ops<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_construct_nodes<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># now return the outputs</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>_parse_value_proto<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        outputs <span class=\"token operator\">=</span> outputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> _expr<span class=\"token punctuation\">.</span>Tuple<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> get_output_expr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> outputs</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        free_vars <span class=\"token operator\">=</span> analysis<span class=\"token punctuation\">.</span>free_vars<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        nodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>v<span class=\"token punctuation\">:</span> k <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        free_vars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>nodes<span class=\"token punctuation\">[</span>var<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> var <span class=\"token keyword\">in</span> free_vars<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> i_name <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            i_name <span class=\"token keyword\">in</span> free_vars <span class=\"token keyword\">and</span> i_name <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_inputs<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                self<span class=\"token punctuation\">.</span>_inputs<span class=\"token punctuation\">[</span>i_name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>i_name<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\"># Create a function from our output expression and all input variables.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        func <span class=\"token operator\">=</span> _function<span class=\"token punctuation\">.</span>Function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>v <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_inputs<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> IRModule<span class=\"token punctuation\">.</span>from_expr<span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_params</pre></td></tr></table></figure><p><code>self._parse_graph_initializers(graph)</code>  函数将 onnx 模型中的 tensor 转换为 constant 节点，装进字典 node 中。代码中 <code>_expr.const(array)</code>  一路调用 <code>Constant()</code> ， <code>_ffi_api.Constant</code> ，将 tensor 转换为 C++ 后端中的 <code>Constant</code>  类。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">_parse_graph_initializers</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Parse network inputs to relay, aka parameters.\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> init_tensor <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">.</span>initializer<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Tensor's name is required.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        array <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_parse_array<span class=\"token punctuation\">(</span>init_tensor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>_freeze_params<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _expr<span class=\"token punctuation\">.</span>const<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">[</span>init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new_var<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                shape<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">[</span>init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                dtype<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">[</span>init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>self._parse_graph_input(graph)</code>  函数作用是指定图的输入节点。</p>\n<p><code>self._check_user_inputs_in_outermost_graph_scope()</code>  函数用来检查 shape 定义的 tensor 都已经声明。</p>\n<p><code>self._check_for_unsupported_ops(graph)</code>  函数检查所有的算子是否位于支持列表中。</p>\n<p><code>self._construct_nodes(graph)</code>  函数不仅将 onnx 节点转换乘 tvm 算子，还在遍历节点的过程中生成 tvm 抽象语法树。下面是函数具体过程：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">_construct_nodes</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Nodes are stored as directed acyclic graph.\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        op_name <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>op_type</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        attr <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_parse_attr<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>attribute<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># Fill in span of inputs</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        node_source_name <span class=\"token operator\">=</span> get_source_name<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_op_type_dict<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_set_parameter_span<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> node_source_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># Create and populate input list.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        inputs <span class=\"token operator\">=</span> onnx_input<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> i <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                inputs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>_renames<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                inputs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        i_name <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_parse_value_proto<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        node_output <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_fix_outputs<span class=\"token punctuation\">(</span>op_name<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"tvm_custom\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"tvm_custom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i_name</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"tvm_custom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"num_outputs\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        op <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_convert_operator<span class=\"token punctuation\">(</span>op_name<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>opset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span> _expr<span class=\"token punctuation\">.</span>TupleWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            outputs_num <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            outputs_num <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> outputs_num <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            op <span class=\"token operator\">=</span> fold_constant<span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            op <span class=\"token operator\">=</span> _expr<span class=\"token punctuation\">.</span>TupleWrapper<span class=\"token punctuation\">(</span>fold_constant<span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">.</span>astuple<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        op <span class=\"token operator\">=</span> set_span<span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span> node_source_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> outputs_num <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\"># ONNX supports optional outputs for some nodes.</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\"># This block searches for missing outputs in the ONNX graph</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\"># and removes any unneeded ops</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            valid_outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> outputs_num</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> output <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token keyword\">if</span> output <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    valid_outputs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\"># If we have outputs ONNX isn't expecting, we need to drop them</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>valid_outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                tup <span class=\"token operator\">=</span> op<span class=\"token punctuation\">.</span>astuple<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token comment\"># TupleWrapper can also wrap ops with TupleType outputs</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>tup<span class=\"token punctuation\">,</span> _expr<span class=\"token punctuation\">.</span>Tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token comment\"># For tuples, we extract the fields instead of using GetTupleItem</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>tup<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> valid <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>valid_outputs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> valid<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token comment\"># For call nodes, we need to GetTupleItem</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>op<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> valid <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>valid_outputs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> valid<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token comment\"># Create the new op with valid outputs</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    op <span class=\"token operator\">=</span> outputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token keyword\">elif</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> outputs_num<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    op <span class=\"token operator\">=</span> _expr<span class=\"token punctuation\">.</span>TupleWrapper<span class=\"token punctuation\">(</span>_expr<span class=\"token punctuation\">.</span>Tuple<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token comment\"># Drop invalid outputs for the onnx node</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                outputs_num <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                node_output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>output <span class=\"token keyword\">for</span> output <span class=\"token keyword\">in</span> node_output <span class=\"token keyword\">if</span> output <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">assert</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> outputs_num</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Number of output mismatch </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> vs </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>outputs_num<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> in </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>op_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">if</span> outputs_num <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>node_output<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> op</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> op<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>从 <code>self._construct_nodes(graph)</code>  函数代码中可以看到，首先遍历所有图节点 <code>node</code> ，通过 <code>self._parse_attr()</code>  函数将节点的所有属性信息构造为 tvm 的 attr 算子，再根据算子类型 <code>op_name</code> 、输入 <code>inputs</code> , 和属性 <code>attr</code> ，通过函数 <code>self._convert_operator(op_name, inputs, attr, self.opset)</code>  创建 tvm 算子。这个过程中自然形成了 tvm 的抽象语法树，构造了所有算子的连接关系。其中还有一些细节：比如当一个算子的输出 tensor 有多个时，会在该算子后面添加一个元组算子 <code>_expr.TupleWrapper()</code> .</p>\n<p><img loading=\"lazy\" data-src=\"1728822347896.jpg\" alt=\"子图2\"></p>\n<p>我们着重看一下函数 <code>self._convert_operator()</code> ，也就是算子转换函数。它将卷积、池化、全链接等这些算子包装为 tvm 中的一个 <code>CallNode</code>  算子。参数 <code>op_name</code>  指明算子的类型，如 Convolution, FullyConnected， <code>inputs</code>  是前述存储在 <code>self._nodes</code>  字典中其他算子， <code>attrs</code>  是前述刚转换的属性， <code>Opset</code>  是 onnx 算子版本号。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">_convert_operator</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> op_name<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">,</span> opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Convert ONNX operator into a Relay operator.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    The converter must specify conversions explicitly for incompatible name, and</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    apply handlers to operator attributes.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Parameters</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ----------</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    op_name : str</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        Operator name, such as Convolution, FullyConnected</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    inputs : list of tvm.relay.function.Function</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        List of inputs.</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    attrs : dict</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        Dict of operator attributes</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    opset : int</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        Opset version</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Returns</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    -------</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    sym : tvm.relay.function.Function</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        Converted relay function</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    \"\"\"</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    convert_map <span class=\"token operator\">=</span> _get_convert_map<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> op_name <span class=\"token keyword\">in</span> _identity_list<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        sym <span class=\"token operator\">=</span> get_relay_op<span class=\"token punctuation\">(</span>op_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>inputs<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>attrs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">elif</span> op_name <span class=\"token keyword\">in</span> convert_map<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        sym <span class=\"token operator\">=</span> convert_map<span class=\"token punctuation\">[</span>op_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">raise</span> NotImplementedError<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Operator </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>op_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> not implemented.\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> sym</pre></td></tr></table></figure><p>通过 <code>_get_convert_map()</code>  函数获取转换字典，我们截取该函数部分内容。以卷积为例，CONV 算子通过 <code>Conv.get_converter(opset)</code>  函数获取卷积的转换函数。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">_get_convert_map</span><span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\"># defs/experimental</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"Identity\"</span><span class=\"token punctuation\">:</span> Renamer<span class=\"token punctuation\">(</span><span class=\"token string\">\"copy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"Optional\"</span><span class=\"token punctuation\">:</span> Optional_<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">\"OptionalHasElement\"</span><span class=\"token punctuation\">:</span> OptionalHasElement<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">\"OptionalGetElement\"</span><span class=\"token punctuation\">:</span> OptionalGetElement<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"Affine\"</span><span class=\"token punctuation\">:</span> Affine<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># Bitwise operators</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\"BitShift\"</span><span class=\"token punctuation\">:</span> BitShift<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"BitwiseAnd\"</span><span class=\"token punctuation\">:</span> BitwiseAnd<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">\"BitwiseNot\"</span><span class=\"token punctuation\">:</span> BitwiseNot<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">\"BitwiseOr\"</span><span class=\"token punctuation\">:</span> BitwiseOr<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token string\">\"BitwiseXor\"</span><span class=\"token punctuation\">:</span> BitwiseXor<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token string\">\"ThresholdedRelu\"</span><span class=\"token punctuation\">:</span> ThresholdedRelu<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token string\">\"ScaledTanh\"</span><span class=\"token punctuation\">:</span> ScaledTanh<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token string\">\"AveragePool\"</span><span class=\"token punctuation\">:</span> AveragePool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token string\">\"LpPool\"</span><span class=\"token punctuation\">:</span> LpPool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token string\">\"GlobalLpPool\"</span><span class=\"token punctuation\">:</span> GlobalLpPool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token string\">\"MaxPool\"</span><span class=\"token punctuation\">:</span> MaxPool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token string\">\"MaxUnpool\"</span><span class=\"token punctuation\">:</span> MaxUnpool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token string\">\"Conv\"</span><span class=\"token punctuation\">:</span> Conv<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token string\">\"ConvTranspose\"</span><span class=\"token punctuation\">:</span> ConvTranspose<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token string\">\"GlobalAveragePool\"</span><span class=\"token punctuation\">:</span> GlobalAveragePool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token string\">\"GlobalMaxPool\"</span><span class=\"token punctuation\">:</span> GlobalMaxPool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>TVM 先尝试从 <code>_identity_list:</code>  列表中获取转换方法，开发这如果需要添加自定义算子，可以考虑在该列表中添加，当前我们不用考虑这个列表。之后 TVM 从获取转换方法并执行 <code>convert_map[op_name](inputs, attrs, self._params)</code> ，仍然以卷积为例，执行的是下面类 <code>class Conv(OnnxOpConverter)</code>  中的 <code>def _impl_v1(cls, inputs, attr, params)</code>  方法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Conv</span><span class=\"token punctuation\">(</span>OnnxOpConverter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Operator converter for Conv.\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">_impl_v1</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># Use shape of input to determine convolution type.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        data <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        kernel <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        input_shape <span class=\"token operator\">=</span> infer_shape<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        ndim <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        kernel_type <span class=\"token operator\">=</span> infer_type<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        kernel_shapes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>get_const_tuple<span class=\"token punctuation\">(</span>kernel_type<span class=\"token punctuation\">.</span>checked_type<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token string\">\"kernel_shape\"</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> attr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"kernel_shape\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> kernel_shapes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token string\">\"auto_pad\"</span> <span class=\"token keyword\">in</span> attr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"SAME_UPPER\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SAME_LOWER\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\"># Warning: Convolution does not yet support dynamic shapes,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\"># one will need to run dynamic_to_static on this model after import</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                data <span class=\"token operator\">=</span> autopad<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    attr<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"strides\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>ndim <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"kernel_shape\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    attr<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"dilations\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>ndim <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    mode<span class=\"token operator\">=</span>attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">elif</span> attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"VALID\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"pads\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>ndim <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">elif</span> attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"NOTSET\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                msg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token string-interpolation\"><span class=\"token string\">f'Value </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> in attribute \"auto_pad\" of operator Conv '</span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token string-interpolation\"><span class=\"token string\">f\"is invalid.\"</span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">raise</span> tvm<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">.</span>OpAttributeInvalid<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            attr<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"channels\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> kernel_shapes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        out <span class=\"token operator\">=</span> AttrCvt<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            op_name<span class=\"token operator\">=</span>dimension_picker<span class=\"token punctuation\">(</span><span class=\"token string\">\"conv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            transforms<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token string\">\"kernel_shape\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"kernel_size\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token string\">\"dilations\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"dilation\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token string\">\"pads\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"padding\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token string\">\"group\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"groups\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            custom_check<span class=\"token operator\">=</span>dimension_constraint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        use_bias <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">if</span> use_bias<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            out <span class=\"token operator\">=</span> _op<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>bias_add<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> out</pre></td></tr></table></figure><p>其中 <code>AttrCvt()</code>  函数经过多层调用（见结构流程图），最终调用了 C++ 后端通过 <code>TVM_REGISTER_GLOBAL(&quot;relay.op.nn._make.conv2d&quot;)</code>  注册的 <code>MakeConv&lt;Conv2DAttrs&gt;()</code>  函数，该函数创建一个包含卷积所有信息的 <code>CallNode</code>  算子，见下面代码 <code>return Call(op, &#123;data, weight&#125;, Attrs(attrs), &#123;&#125;);</code> ，该函数位于 <code>/home/xianmu/CProject/tvm/src/relay/op/nn/convolution_make.h</code> 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">inline</span> Expr <span class=\"token function\">MakeConv</span><span class=\"token punctuation\">(</span>Expr data<span class=\"token punctuation\">,</span> Expr weight<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>IndexExpr<span class=\"token operator\">></span> strides<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>IndexExpr<span class=\"token operator\">></span> padding<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                     Array<span class=\"token operator\">&lt;</span>IndexExpr<span class=\"token operator\">></span> dilation<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> groups<span class=\"token punctuation\">,</span> IndexExpr channels<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                     Array<span class=\"token operator\">&lt;</span>IndexExpr<span class=\"token operator\">></span> kernel_size<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string data_layout<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                     std<span class=\"token double-colon punctuation\">::</span>string kernel_layout<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string out_layout<span class=\"token punctuation\">,</span> DataType out_dtype<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                     std<span class=\"token double-colon punctuation\">::</span>string op_name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">auto</span> attrs <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_object</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  attrs<span class=\"token operator\">-></span>strides <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>strides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  attrs<span class=\"token operator\">-></span>padding <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>padding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  attrs<span class=\"token operator\">-></span>dilation <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>dilation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  attrs<span class=\"token operator\">-></span>groups <span class=\"token operator\">=</span> groups<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  attrs<span class=\"token operator\">-></span>channels <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  attrs<span class=\"token operator\">-></span>kernel_size <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>kernel_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  attrs<span class=\"token operator\">-></span>data_layout <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>data_layout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  attrs<span class=\"token operator\">-></span>kernel_layout <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>kernel_layout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  attrs<span class=\"token operator\">-></span>out_layout <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>out_layout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  attrs<span class=\"token operator\">-></span>out_dtype <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>out_dtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">const</span> Op<span class=\"token operator\">&amp;</span> op <span class=\"token operator\">=</span> <span class=\"token class-name\">Op</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>op_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">Call</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Attrs</span><span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"1728822492980.jpg\" alt=\"子图3\"></p>\n<p>到这里模型拓扑结构就算建立完成了。让我们再回到 <code>GraphProto.from_onnx()</code>  函数。前述过程就像是搭积木，搭完这个拓扑结构之后，调用函数 <code>_function.Function([v for k, v in self._inputs.items()], outputs)</code>  将图结构封装成 <code>tvm.relay.Function</code>  表达式，位于 <code>/home/xianmu/CProject/tvm/include/tvm/relay/function.h</code> 。 <code>tvm.relay.Function</code>  是一个有输入输出的表达式集合。</p>\n<p>最后一步，通过 <code>IRModule.from_expr(func)</code>  函数，创建 tvm 高级 IR：Relay IRModule。整个调用过程在结构流程图中给出。下面是类  <code>IRModule</code>  的属性信息， <code>tvm.relay.Function</code>  就存储在 <code>IRModuleNode</code>  的 <code>Map&lt;GlobalVar, BaseFunc&gt; functions;</code>  字段下。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">IRModuleNode</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">/*! \\brief A map from ids to all global functions. */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span>GlobalVar<span class=\"token punctuation\">,</span> BaseFunc<span class=\"token operator\">></span> functions<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">/*! \\brief A map from global type vars to ADT type data. */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span>GlobalTypeVar<span class=\"token punctuation\">,</span> TypeData<span class=\"token operator\">></span> type_definitions<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">/*! \\brief The source map for the module. */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  SourceMap source_map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">/* \\brief Additional attributes storing meta-data about the module. */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  DictAttrs attrs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">/*! \\brief Globally static object that are referred by the IR itself */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>GlobalInfo<span class=\"token operator\">>></span> global_infos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">/*!</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   * \\brief A map from string names to global variables that</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   * ensures global uniqueness.</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   */</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> GlobalVar<span class=\"token operator\">></span> global_var_map_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">/*! \\brief A map from string names to global type variables (ADT names)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   * that ensures global uniqueness.</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   */</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> GlobalTypeVar<span class=\"token operator\">></span> global_type_var_map_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">/*! \\brief A map from constructor tags to constructor objects</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   * for convenient access</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   */</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int32_t</span><span class=\"token punctuation\">,</span> Constructor<span class=\"token operator\">></span> constructor_tag_map_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">/*! \\brief The files previously imported, required to ensure</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      importing is idempotent for each module.</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   */</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unordered_set<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> import_set_<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>到此，tvm 的 <code>relay.frontend.from_onnx(onnx_model, shape_dict)</code>  函数已经介绍完毕，它将一个 onnx model 转换成对等的 Relay module。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！global_info)</p>\n",
            "tags": [
                "tvm",
                "compile"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/10/10/tvm01/",
            "url": "https://forcheetah.github.io/2024/10/10/tvm01/",
            "title": "【TVM】通过代码学习编译流程【1】必要知识",
            "date_published": "2024-10-10T12:12:43.910Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本系列文章将从代码和流程图入手，详细介绍 TVM AI 编译器的编译流程。本文章为第一篇，取名为 “必要知识”，约等于 “大杂烩”。食之无味，弃之可惜。但基于我个人的主观喜好和偏见，这些知识值得在整个代码讲解之前声明。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"工程结构\"><a class=\"anchor\" href=\"#工程结构\">#</a> 工程结构</h1>\n<p><a href=\"https://github.com/apache/tvm\">TVM</a> 主要由 C++ 语言和 Python 语言实现。</p>\n<ul>\n<li>\n<p>a.TVM C++ 后端核心代码   位于 /home/user/tvm/src<br>\nC++ 后端核心代码的功能是生成 <a href=\"http://libtvm.so\">libtvm.so</a> libtvm_runtime.so，分别是模型编译过程中的需要的 libtvm.so 库，和模型部署运行时需要的 libtvm_runtime.so 库。对应的头文件位于 /home/user/tvm/include.</p>\n<ul>\n<li>1. 其中 src/runtime 是模型部署相关 CPP 文件\n<ul>\n<li>src/runtime/graph_executor   最基本的图执行器</li>\n<li>src/runtime/module.cpp          运行时 Module 基类</li>\n<li>src/runtime/contrib                  BYOC 第三方设备运行及实现  包括 dnnl cblas cudnn ethosu 等等</li>\n<li>srd/runtime/cuda                    CUDA 运行时 Module</li>\n<li>还有其他设备的运行时 Module  如 opencl  hexagon   metal 等，以及一些接口文件</li>\n</ul>\n</li>\n<li>2.src/relay 是 TVM 高级中间表示 IR 的相关 CPP 文件</li>\n<li>3.src/relax TVM 正在发展的高级中间表示 IR，功能上等同于 Relay</li>\n<li>4.src/te      TVM 的 TE 表达式</li>\n<li>5.src/topi   算子的计算定义和后端调度</li>\n<li>6.src/tir      TVM 低级中介表示 IR，接近于硬件表示</li>\n<li>7.src/auto_shedule  TVM 自动优化调度相关</li>\n</ul>\n</li>\n<li>\n<p>b. TVM Python 前端代码      位于 /home/user/tvm/python<br>\nPython 前端代码为 C++ API 和执行编译的驱动代码，提供 Python 绑定。</p>\n</li>\n</ul>\n<p>表面上看 TVM 工程应当是 Python 前端调用 C++ 后端生成的 <a href=\"http://libtvm.so\">libtvm.so</a> libtvm_runtime.so ，实际上 TVM 支持 Python 和 C++ 的相互调用。例如一些算子的 compute 计算公式和 schedule 调度位于 Python 代码中，由 C++ 进行调用。</p>\n<p>在编译阶段，开发者编写 Python 代码，调用 TVM Python 前端，而 TVM 的 Python 前端又依赖于 C++ 后端生成的 libtvm.so libtvm_runtime.so 动态库。</p>\n<p>部署运行阶段即可以编写 Python 来执行，也可以直接编译 C++ 为可执行文件，参考<a href=\"https://github.com/ForCheetah/TvmCppDeploy\"> TVM C++ 部署</a></p>\n<h1 id=\"编译\"><a class=\"anchor\" href=\"#编译\">#</a> 编译</h1>\n<p>编译过程可以参考 TVM 英文文档和中文文档。文档中内容全面，这里只摘必要步骤，是最简单的部署安装方式。</p>\n<p>1. 编译 <a href=\"http://libtvm.so\">libtvm.so</a> libtvm_runtime.so</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build  <span class=\"token comment\"># 下载工程后进入工程目录 创新文件夹</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cp</span> cmake/config.cmake ./build</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># 将 cmake 配置文件拷贝到 build 目录，可以更改需要的额配置选项</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token parameter variable\">-j32</span></pre></td></tr></table></figure><p>2. 配置临时运行环境</p>\n<p>个人喜欢用临时环境运行项目，可以避免 .bashrc 文件中添加过多环境路径；特别是开发人员有多个 TVM 项目的时候，可以避免项目的混淆。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 指定 tvm 库路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/home/user/tvm/build:<span class=\"token environment constant\">$PATH</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 指定 tvm Python 路径</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">PYTHONPATH</span><span class=\"token operator\">=</span>/home/user/tvm/python:<span class=\"token variable\">$&#123;PYTHONPATH&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 运行</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>python3 ***.py</pre></td></tr></table></figure><h1 id=\"tvm-基类\"><a class=\"anchor\" href=\"#tvm-基类\">#</a> TVM 基类</h1>\n<p>大概从事工程项目开发的人员对 Object, ObjectPtr, ObjectRef 等写法相对熟悉，但是没有相关经验的算法研究人员，还是先认识一下 TVM 中的这三个基类。</p>\n<p>TVM 中大部分类都继承自三大基础类   Object, ObjectPtr, ObjectRef。想多了解一下的话，可以学习博客<a href=\"https://zhuanlan.zhihu.com/p/656435385\"> TVM: Object, ObjectPtr, ObjectRef (以 tir.sch 为例)</a> 。</p>\n<p>可能比较粗显的总结一下：TVM 中以 &quot;Node&quot; 结尾的类是 Object 的派生类，去掉 &quot;Node&quot; 的类是 ObjectRef 的派生类，Object 的派生类负责 &quot;做事&quot;，ObjectRef 的派生类方便程序员引用，ObjectPtr 是桥梁。但总之这三者是一个东西（刚学时我就被这搞晕了：(  ）。</p>\n<p>举例说明如何使用 TVM 的三大基础类构造对象:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Anode</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Object</span></span><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">Anode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">~</span><span class=\"token function\">Anode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token string\">\"instance\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">ObjectRef</span></span><span class=\"token punctuation\">&#123;</span>       </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">TVM_DEFINE_MUTABLE_OBJECT_REF_METHODS</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span>ObjectRef<span class=\"token punctuation\">,</span> Anode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span>ObjectPtr<span class=\"token operator\">&lt;</span>Anode<span class=\"token operator\">></span> n <span class=\"token operator\">=</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_object</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Anode<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 桥梁 Ptr = make_object (本体 node)    </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   A <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指针</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   ref<span class=\"token operator\">-></span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// Anode 指针，可以引用 a ()</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token comment\">//ref.get ()->a (); // 基类 Object 指针，error Object has no member a ()</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"1728562036320.jpg\" alt=\"Object 应用例子\"></p>\n<p>可以再看一下 TVM 工程中的例子，这段代码创建了本体 <code>CallNode</code> ，通过 make_object 生成桥梁 <code>ObjectPtr&lt;CallNode&gt;</code> ，最后赋值给指针 <code>Call</code>  的 <code>data_</code> 字段。</p>\n<h1 id=\"python和c相互调用\"><a class=\"anchor\" href=\"#python和c相互调用\">#</a> Python 和 C++ 相互调用</h1>\n<p>TVM 实现了 FFI (Foreign Function Interface) 机制，目标是使得任意语言下定义的函数都可以被任意其他语言调用。</p>\n<p>宏 TVM_REGISTER_GLOBAL</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * \\brief Register a function globally.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * \\code</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   TVM_REGISTER_GLOBAL(\"MyPrint\")</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   .set_body([](TVMArgs args, TVMRetValue* rv) &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   &#125;);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * \\endcode</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">TVM_REGISTER_GLOBAL</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>OpName<span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token expression\"><span class=\"token function\">TVM_STR_CONCAT</span><span class=\"token punctuation\">(</span>TVM_FUNC_REG_VAR_DEF<span class=\"token punctuation\">,</span> __COUNTER__<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Registry</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span>OpName<span class=\"token punctuation\">)</span></span></pre></td></tr></table></figure><p>在 C++ 后端同过 “TVM_REGISTER_GLOBAL” 这个宏将函数注册为全局函数，该全局函数的类型为 PackedFunc。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">TVM_REGISTER_GLOBAL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tvm.graph_executor_factory.create\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 注册为全局函数 PackedFunc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">set_body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token function\">Module</span><span class=\"token punctuation\">(</span>exec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 Python 前端可以通过 get_global_func () 函数来获取全局函数 PackedFunc 并执行</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fcreate <span class=\"token operator\">=</span> get_global_func<span class=\"token punctuation\">(</span><span class=\"token string\">\"tvm.graph_executor_facttory.create\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>self<span class=\"token punctuation\">.</span>module <span class=\"token operator\">=</span> fcreate<span class=\"token punctuation\">(</span>graph_json_str<span class=\"token punctuation\">,</span> libmod<span class=\"token punctuation\">,</span> libmod_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 C++ 端也可以通过名字获取 全局函数 PackedFunc</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PackedFunc pf <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">GetFunction</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>python 端有大量如下类似代码，将有相同后缀的 PackedFunc 注册到 Python 端</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"FFI APIs for tvm.ir\"\"\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> tvm<span class=\"token punctuation\">.</span>_ffi</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>tvm<span class=\"token punctuation\">.</span>_ffi<span class=\"token punctuation\">.</span>_init_api<span class=\"token punctuation\">(</span><span class=\"token string\">\"ir\"</span><span class=\"token punctuation\">,</span> __name__<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>Python 端获取并执行 PackedFunc</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_ffi_api<span class=\"token punctuation\">.</span>Module_UpdateGlobalInfo<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> global_info<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！global_info)</p>\n",
            "tags": [
                "tvm",
                "compile"
            ]
        }
    ]
}