{
    "version": "https://jsonfeed.org/version/1",
    "title": "Пусть этот камень будет более крепким, чем человек • All posts by \"compile\" tag",
    "description": "有自己的博客很帅，但是我很懒，要命！！！",
    "home_page_url": "https://forcheetah.github.io",
    "items": [
        {
            "id": "https://forcheetah.github.io/2024/10/25/tvm06/",
            "url": "https://forcheetah.github.io/2024/10/25/tvm06/",
            "title": "【TVM】通过代码学习编译流程【6】CodeGen",
            "date_published": "2024-10-25T14:11:43.312Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本系列文章将从代码和流程图入手，详细介绍 TVM AI 编译器的编译流程。本文章为第六篇，对应的 TVM 版本为当前最新版本 1.7。</p>\n<p>网络上有不少 TVM 工程的教程资源，如果本博客也是其他教程的简单重复的话，则网络的角落里又多了一份纯粹的空间占用者。所以我在想，本文章有什么特点才值得一看呢？我觉得有两个优点: 1、本文从代码出发，不会泛泛而谈，能够从细节了解 TVM；2、自认为结构流程图画的不错，能够从整体上把握 TVM 的脉络。所以，也许值得一看呢。</p>\n<p>本篇文章介绍 TVM CodeGen 函数。文章 <a href=\"https://forcheetah.github.io/2024/10/21/tvm04/\">《【TVM】通过代码学习编译流程【4】BuildRelay》</a> 已经介绍了 <code>BuildRelay</code>  总体流程和其子函数 <code>OptimizeImpl</code> 。本篇文章将介绍后续的 CodeGen 流程的部分内容。 <code>Codegen(func_module, func, mod_name)</code> —— 将 Relay IRModule 降级为 TIR Module。</p>\n<p>因为代码量巨大，模型编译会分成若干篇文章进行解析。接下来的若干篇都会介绍 BuildRelay 函数 及其调用的子函数。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"python脚本\"><a class=\"anchor\" href=\"#python脚本\">#</a> Python 脚本</h1>\n<p>这里提供一个简单的 Python 脚本，调用 TVM Python 前端，实现 onnx 模型的编译过程。tvm 通过代码学习编程流程系列文章将基本采用这个脚本帮助追踪代码。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> onnx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> tvm<span class=\"token punctuation\">.</span>relay <span class=\"token keyword\">as</span> relay</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> tvm</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> tvm<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> graph_executor</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">######################################    路径信息    ##########################################</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>model_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/resnet18.onnx\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>save_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/pythonSave/\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>onnx_model <span class=\"token operator\">=</span> onnx<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>model_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">##################################    图片信息    ##############################################</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>img_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/.tvm_test_data/data/imagenet_cat.png\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Resize it to 224x224</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>resized_image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>img_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>asarray<span class=\"token punctuation\">(</span>resized_image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># Our input image is in HWC layout while ONNX expects CHW input, so convert the array</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>img_data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Normalize according to the ImageNet input specification</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>imagenet_mean <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.485</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.406</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>imagenet_stddev <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.229</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.225</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>norm_img_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>img_data <span class=\"token operator\">/</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> imagenet_mean<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> imagenet_stddev</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># Add the batch dimension, as we are expecting 4-dimensional input: NCHW.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>norm_img_data<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">####################################     模型编译     ###########################################</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>input_name <span class=\"token operator\">=</span> <span class=\"token string\">\"data\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>target <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>Target<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>shape_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>input_name<span class=\"token punctuation\">:</span> img_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>mod<span class=\"token punctuation\">,</span> params <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>frontend<span class=\"token punctuation\">.</span>from_onnx<span class=\"token punctuation\">(</span>onnx_model<span class=\"token punctuation\">,</span> shape_dict<span class=\"token punctuation\">,</span> export_node_renamed_model_path<span class=\"token operator\">=</span>save_path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建 IRModule  高级 Relay IR</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">with</span> tvm<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>PassContext<span class=\"token punctuation\">(</span>opt_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    lib <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> target<span class=\"token operator\">=</span>target<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 创建 GraphExecutorFactoryModule  </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#######################################     模型保存      ########################################</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># save</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># 保存编译后的库文件（.so）</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>lib_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.so\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>lib<span class=\"token punctuation\">.</span>get_lib<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>export_library<span class=\"token punctuation\">(</span>lib_fname<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># 保存模型参数（.params）</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>params_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.params\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>params_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> param_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    param_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>relay<span class=\"token punctuation\">.</span>save_param_dict<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_params<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># 保存 JSON 格式的计算图（.json）</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>json_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.json\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>json_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> json_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    json_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_executor_config<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>dev <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>module <span class=\"token operator\">=</span> graph_executor<span class=\"token punctuation\">.</span>GraphModule<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">[</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># graph_executor.GraphModule</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">############################       运行    ##########################################</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>module<span class=\"token punctuation\">.</span>set_input<span class=\"token punctuation\">(</span>input_name<span class=\"token punctuation\">,</span> img_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>module<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>output_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>tvm_output <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>get_output<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tvm_output<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>再回顾一下 BuildRelay 函数，文章 <a href=\"https://forcheetah.github.io/2024/10/21/tvm04/\">《【TVM】通过代码学习编译流程【4】BuildRelay》</a> 已经介绍了 <code>BuildRelay</code>  总体流程和其子函数 <code>OptimizeImpl</code> 。下面将介绍其中的： <code>MakeExecutorCodegen</code> ，  <code>Init</code> ， <code>Codegen</code> 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">BuildRelay</span><span class=\"token punctuation\">(</span>IRModule relay_module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> String<span class=\"token operator\">&amp;</span> mod_name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// Relay IRModule -> IRModule optimizations.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IRModule <span class=\"token keyword\">module</span> <span class=\"token operator\">=</span> <span class=\"token function\">WithAttrs</span><span class=\"token punctuation\">(</span>  <span class=\"token comment\">// 为 Relay IRModule 添加 Executor 和 Runtime 属性</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        relay_module<span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    relay_module <span class=\"token operator\">=</span> <span class=\"token function\">OptimizeImpl</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 执行多个针对 Relay IRModule 的优化 Pass</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// Get the updated function and new IRModule to build.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Function func <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">Downcast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>relay_module<span class=\"token operator\">-></span><span class=\"token function\">Lookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 获取 Relay IRModule 中的 main 函数表达式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    IRModule func_module <span class=\"token operator\">=</span> <span class=\"token function\">WithAttrs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IRModule</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FromExpr</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 为 main 函数表达式添加属性信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                                     <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// Generate code for the updated function.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    executor_codegen_ <span class=\"token operator\">=</span> <span class=\"token function\">MakeExecutorCodegen</span><span class=\"token punctuation\">(</span>executor_<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 构建代码生成 GraphCodegen</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> config_<span class=\"token operator\">-></span>primitive_targets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Codegen 初始化</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">Codegen</span><span class=\"token punctuation\">(</span>func_module<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> mod_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 将 Relay IRModule 降级为 TIR Module    </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">UpdateOutput</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ret_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 更新降级后的 json 图结构到 BuildOutput 结构体</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    ret_<span class=\"token punctuation\">.</span>params <span class=\"token operator\">=</span> executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 更新降级后的 params 到 BuildOutput 结构体</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">auto</span> lowered_funcs <span class=\"token operator\">=</span> executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetIRModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取降级后的 TIR Module</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// No need to build for external functions.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    Target <span class=\"token function\">ext_dev</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ext_dev\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lowered_funcs<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>ext_dev<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> lowered_funcs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      lowered_funcs<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>ext_dev<span class=\"token punctuation\">,</span> <span class=\"token function\">IRModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">const</span> Target<span class=\"token operator\">&amp;</span> host_target <span class=\"token operator\">=</span> config_<span class=\"token operator\">-></span>host_virtual_device<span class=\"token operator\">-></span>target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">const</span> runtime<span class=\"token double-colon punctuation\">::</span>PackedFunc<span class=\"token operator\">*</span> pf <span class=\"token operator\">=</span> runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Registry</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"codegen.LLVMModuleCreate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// When there is no lowered_funcs due to reasons such as optimization.</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lowered_funcs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>host_target<span class=\"token operator\">-></span>kind<span class=\"token operator\">-></span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">CHECK</span><span class=\"token punctuation\">(</span>pf <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Unable to create empty module for llvm without llvm codegen.\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// If we can decide the target is LLVM, we then create an empty LLVM module.</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        ret_<span class=\"token punctuation\">.</span>mod <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>host_target<span class=\"token operator\">-></span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"empty_module\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// If we cannot decide the target is LLVM, we create an empty CSourceModule.</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// The code content is initialized with \";\" to prevent complaining</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// from CSourceModuleNode::SaveToFile.</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        ret_<span class=\"token punctuation\">.</span>mod <span class=\"token operator\">=</span> tvm<span class=\"token double-colon punctuation\">::</span>codegen<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CSourceModuleCreate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\";\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      ret_<span class=\"token punctuation\">.</span>mod <span class=\"token operator\">=</span> tvm<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">TIRToRuntime</span><span class=\"token punctuation\">(</span>lowered_funcs<span class=\"token punctuation\">,</span> host_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// TIR Module 转换为 runtime::Module</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">auto</span> ext_mods <span class=\"token operator\">=</span> executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetExternalModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    ret_<span class=\"token punctuation\">.</span>mod <span class=\"token operator\">=</span> tvm<span class=\"token double-colon punctuation\">::</span>codegen<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CreateMetadataModule</span><span class=\"token punctuation\">(</span>ret_<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">,</span> ret_<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">,</span> ext_mods<span class=\"token punctuation\">,</span> host_target<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                                                  runtime_<span class=\"token punctuation\">,</span> executor_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                                                  executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetExecutorCodegenMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// Remove external params which were stored in metadata module.</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span>Module mod <span class=\"token operator\">:</span> ext_mods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token keyword\">auto</span> pf_var <span class=\"token operator\">=</span> mod<span class=\"token punctuation\">.</span><span class=\"token function\">GetFunction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get_const_vars\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pf_var <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> variables <span class=\"token operator\">=</span> <span class=\"token function\">pf_var</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> variables<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>          <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> ret_<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>variables<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">operator</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> ret_<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"constant '\"</span> <span class=\"token operator\">&lt;&lt;</span> variables<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"' has been captured in external module\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            ret_<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"makeexecutorcodegen\"><a class=\"anchor\" href=\"#makeexecutorcodegen\">#</a> MakeExecutorCodegen</h1>\n<p>BuildRelay 函数的总体过程如下图:</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复。</p>\n",
            "tags": [
                "tvm",
                "compile"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/10/22/tvm3.5/",
            "url": "https://forcheetah.github.io/2024/10/22/tvm3.5/",
            "title": "【TVM】通过代码学习类【3.5】Pass",
            "date_published": "2024-10-22T11:48:24.954Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>文章 <a href=\"https://forcheetah.github.io/\">《【TVM】通过代码学习编译流程》</a>系列 主要介绍 TVM 在模型编译过程的流程，有时候感觉缺少了对类及其属性和方法的介绍。所以决定在系列文章的中间插入一些 “类的结构及其属性方法” 的介绍。</p>\n<p>本篇文章主要介绍 Pass 及其相关类。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"pass\"><a class=\"anchor\" href=\"#pass\">#</a> Pass</h1>\n<p>可以再回顾一下在《【TVM】通过代码学习编译流程【4】》中讲到的本体、桥梁、指针的关系。</p>\n<p>先看一看 Pass 的基类， 位于  <code>include/tvm/ir/transform.h</code> 。  Pass 本体  <code>PassNode</code> 。内容很少，主要就是 Pass 的执行函数： <code>IRModule operator()(IRModule mod)</code>  函数重载了 “()” 运算符。里面调用自身含有两个参数的 &quot;()&quot; 重载函数。</p>\n<p>含有两个参数的 &quot;()&quot; 重载函数 <code>virtual IRModule operator()(IRModule mod, const PassContext&amp; pass_ctx) const = 0;</code>  是个虚函数，这意味着 <code>PassNode</code>  的派生类需要重写该函数，实现 Pass 的实际功能。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PassNode</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">PassNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">/*!</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   * \\brief Get the pass information/meta data. */</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">virtual</span> PassInfo <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  IRModule <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 重载了 “()” 运算符</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PassContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用含有两个参数的 \"()\" 重载函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">virtual</span> IRModule <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PassContext<span class=\"token operator\">&amp;</span> pass_ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 虚函数 由派生类重写</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">VisitAttrs</span><span class=\"token punctuation\">(</span>AttrVisitor<span class=\"token operator\">*</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> _type_key <span class=\"token operator\">=</span> <span class=\"token string\">\"transform.Pass\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">TVM_DECLARE_BASE_OBJECT_INFO</span><span class=\"token punctuation\">(</span>PassNode<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Pass 指针  <code>Pass</code> ，指向 <code>PassNode</code>  本体。相当于给本体套了个壳子。<br>\n壳子中的 <code>IRModule operator()(IRModule mod) const;</code>  函数同样是调用自身含有两个参数的 &quot;()&quot; 重载函数。<br>\n含有两个参数的 &quot;()&quot; 重载函数 <code>IRModule Pass::operator()(IRModule mod, const PassContext&amp; pass_ctx)</code>  调用的是本体 <code>PassNode</code>  的功能。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pass</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ObjectRef</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  IRModule <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  IRModule <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PassContext<span class=\"token operator\">&amp;</span> pass_ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">TVM_DEFINE_OBJECT_REF_METHODS</span><span class=\"token punctuation\">(</span>Pass<span class=\"token punctuation\">,</span> ObjectRef<span class=\"token punctuation\">,</span> PassNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  IRModule <span class=\"token keyword\">static</span> <span class=\"token function\">AssertImmutableModule</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> IRModule<span class=\"token operator\">&amp;</span> mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PassNode<span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                                        <span class=\"token keyword\">const</span> PassContext<span class=\"token operator\">&amp;</span> pass_ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>IRModule <span class=\"token class-name\">Pass</span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 调用自身含有两个参数的 \"()\" 重载函数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PassContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>IRModule <span class=\"token class-name\">Pass</span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PassContext<span class=\"token operator\">&amp;</span> pass_ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 调用的是本体 `PassNode` 的功能</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">const</span> PassNode<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function\">ICHECK</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">const</span> PassInfo<span class=\"token operator\">&amp;</span> pass_info <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span><span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pass_ctx<span class=\"token punctuation\">.</span><span class=\"token function\">InstrumentBeforePass</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> pass_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">DLOG</span><span class=\"token punctuation\">(</span>INFO<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Skipping pass : \"</span> <span class=\"token operator\">&lt;&lt;</span> pass_info<span class=\"token operator\">-></span>name</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>               <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" with opt level: \"</span> <span class=\"token operator\">&lt;&lt;</span> pass_info<span class=\"token operator\">-></span>opt_level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> mod<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  IRModule ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pass_ctx<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">GetConfig</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Bool<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testing.immutable_module\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Bool</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token class-name\">Pass</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">AssertImmutableModule</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> pass_ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    ret <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pass_ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  pass_ctx<span class=\"token punctuation\">.</span><span class=\"token function\">InstrumentAfterPass</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> pass_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>所以总结来说，Pass 修改模型的功能由 Pass 的派生类重载的 <code>Pass::operator()(IRModule mod, const PassContext&amp; pass_ctx)</code>  函数实现。那么它有哪些派生类呢？后文提供了三个派生类，分别是  <code>FunctionPass</code> ， <code>Sequential</code> ， <code>ModulePass</code> 。他们有不同的功能作用。</p>\n<h1 id=\"functionpass\"><a class=\"anchor\" href=\"#functionpass\">#</a> FunctionPass</h1>\n<p>FunctionPassNode :: PassNode</p>\n<p>Function-level Pass 的实现类，该类是 Pass 的派生类。接收 Module 中函数表达式列表中的一个 function 进行优化。<br>\n <code>pass_func</code>  具体实现 function 优化的函数：由外部提供，以 function 为输入，如 <code>Pass DefuseOps()</code> ， <code>FoldConstant()</code>  等函数提供他们各自的 <code>pass_func</code> ，以实现不同的功能。</p>\n<p><code>Pass::operator()(IRModule mod, const PassContext&amp; pass_ctx)</code>  函数， <code>FunctionPass</code>  对该函数的实现也在下方。</p>\n<ul>\n<li>先遍历模型中的 function</li>\n<li><code>AsOptimizableFunctionNode()</code>  函数 ：过滤掉不能被优化的 function，如 kCompiler (指定编译器的)，kExtern (外部编译器的)，kSkipOptimization (指明跳过的)</li>\n<li>调用 pass_func 优化 function</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FunctionPassNode</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">PassNode</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  PassInfo pass_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  runtime<span class=\"token double-colon punctuation\">::</span>TypedPackedFunc<span class=\"token operator\">&lt;</span><span class=\"token function\">Function</span><span class=\"token punctuation\">(</span>Function<span class=\"token punctuation\">,</span> IRModule<span class=\"token punctuation\">,</span> PassContext<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> pass_func<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 具体实现 function 优化的函数：由外部提供，以 function 为输入</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">FunctionPassNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">VisitAttrs</span><span class=\"token punctuation\">(</span>tvm<span class=\"token double-colon punctuation\">::</span>AttrVisitor<span class=\"token operator\">*</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> v<span class=\"token operator\">-></span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pass_info\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pass_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  IRModule <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PassContext<span class=\"token operator\">&amp;</span> pass_ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 不再被派生类重写  具体实现在下方</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  PassInfo <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> pass_info<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> _type_key <span class=\"token operator\">=</span> <span class=\"token string\">\"relay.FunctionPass\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">TVM_DECLARE_FINAL_OBJECT_INFO</span><span class=\"token punctuation\">(</span>FunctionPassNode<span class=\"token punctuation\">,</span> PassNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Perform Module -> Module optimizations at the Function level.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>IRModule <span class=\"token class-name\">FunctionPassNode</span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PassContext<span class=\"token operator\">&amp;</span> pass_ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 具体实现</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  DiagnosticContext previous <span class=\"token operator\">=</span> <span class=\"token class-name\">DiagnosticContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  IRModule updated_mod <span class=\"token operator\">=</span> mod<span class=\"token operator\">-></span><span class=\"token function\">ShallowCopy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>GlobalVar<span class=\"token punctuation\">,</span> Function<span class=\"token operator\">>></span> updates<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> kv <span class=\"token operator\">:</span> mod<span class=\"token operator\">-></span>functions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//  遍历模型中的 function</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// only process optimizable Relay Functions</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">*</span> function_node <span class=\"token operator\">=</span> <span class=\"token function\">AsOptimizableFunctionNode</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 过滤掉不能被优化的 function，如 kCompiler (指定编译器的)，kExtern (外部编译器的)，kSkipOptimization (指明跳过的)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      Function updated_func <span class=\"token operator\">=</span> <span class=\"token function\">pass_func</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">GetRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>function_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> updated_mod<span class=\"token punctuation\">,</span> pass_ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用 pass_func 优化 function</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      updates<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>updated_func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">InferType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>updated_mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"modulepass\"><a class=\"anchor\" href=\"#modulepass\">#</a> ModulePass</h1>\n<p>ModulePassNode :: PassNode</p>\n<p>Module-level Pass 的实现类， <code>FunctionPass</code>  优化的是 Relay Module 包含的多个 <code>function</code> ，作用于 <code>function</code>  内部，不能实现 <code>function</code>  增删； <code>ModulePassNode</code>  优化的是整个 Module，能够实现 <code>function</code>  增删等 Module 范围的优化。<br>\n <code>pass_func</code>  具体实现 Module 优化的函数：由外部提供，以 Module 为输入<br>\n <code>Pass::operator()(IRModule mod, const PassContext&amp; pass_ctx)</code>  函数，实现在下方。</p>\n<ul>\n<li>调用 pass_func 优化 Module</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * \\brief Module-level passes are designed to implement global</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * analysis/optimizations, i.e. interprocedural optimizations (IPO), etc. Passes</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * at this level have the full control of a given Relay program including</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * addition and deletion of functions.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ModulePassNode</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">PassNode</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">/* \\brief The pass meta data.*/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  PassInfo pass_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  runtime<span class=\"token double-colon punctuation\">::</span>TypedPackedFunc<span class=\"token operator\">&lt;</span><span class=\"token function\">IRModule</span><span class=\"token punctuation\">(</span>IRModule<span class=\"token punctuation\">,</span> PassContext<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> pass_func<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 具体实现 Module 优化的函数：由外部提供，以 Module 为输入</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">ModulePassNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">VisitAttrs</span><span class=\"token punctuation\">(</span>tvm<span class=\"token double-colon punctuation\">::</span>AttrVisitor<span class=\"token operator\">*</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> v<span class=\"token operator\">-></span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pass_info\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pass_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  IRModule <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PassContext<span class=\"token operator\">&amp;</span> pass_ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 不再允许派生类修改</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">/*!</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   * \\brief Get the pass information/meta data.</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   */</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  PassInfo <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> pass_info<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> _type_key <span class=\"token operator\">=</span> <span class=\"token string\">\"transform.ModulePass\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token function\">TVM_DECLARE_FINAL_OBJECT_INFO</span><span class=\"token punctuation\">(</span>ModulePassNode<span class=\"token punctuation\">,</span> PassNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Module -> Module optimizations.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>IRModule <span class=\"token class-name\">ModulePassNode</span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PassContext<span class=\"token operator\">&amp;</span> pass_ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  DiagnosticContext previous <span class=\"token operator\">=</span> <span class=\"token class-name\">DiagnosticContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> PassInfo<span class=\"token operator\">&amp;</span> pass_info <span class=\"token operator\">=</span> <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  mod <span class=\"token operator\">=</span> <span class=\"token function\">pass_func</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pass_ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用 pass_func 优化 Module</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  pass_ctx<span class=\"token operator\">-></span>diag_ctx<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  pass_ctx<span class=\"token operator\">-></span>diag_ctx <span class=\"token operator\">=</span> previous<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> mod<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"sequential\"><a class=\"anchor\" href=\"#sequential\">#</a> Sequential</h1>\n<p>Sequential ：Sequential 类包含多个按照顺序执行的 Pass，类似于 pytorch 里面的 nn.Sequential</p>\n<ul>\n<li><code>tvm::Array&lt;Pass&gt; passes</code>  ：数组，包含多个 Pass，如前面提到的  <code>FunctionPass</code> ，  <code>ModulePass</code></li>\n<li><code>Pass::operator()(IRModule mod, const PassContext&amp; pass_ctx)</code>  函数，实现在下方。\n<ul>\n<li>遍历所有包含的 pass</li>\n<li>调用 Pass 执行对模型的优化</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * \\brief The SequentialNode contains a set of passes that transform Relay/Relax</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * programs from one AST to another semantically equivalent one.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * One example of this level of pass is that the pass manager needs to correctly</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * perform a host of optimizations with a given optimization level and disabled</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * passes.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SequentialNode</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">PassNode</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">/* \\brief The pass meta data.*/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  PassInfo pass_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">/*! \\brief A list of passes that used to compose a sequential pass. */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  tvm<span class=\"token double-colon punctuation\">::</span>Array<span class=\"token operator\">&lt;</span>Pass<span class=\"token operator\">></span> passes<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 数组，包含多个 Pass，如前面提到的 `FunctionPass`， `ModulePass`</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  PassInfo <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> pass_info<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">ResolveDependency</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> IRModule<span class=\"token operator\">&amp;</span> mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  IRModule <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PassContext<span class=\"token operator\">&amp;</span> pass_ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> _type_key <span class=\"token operator\">=</span> <span class=\"token string\">\"transform.Sequential\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token function\">TVM_DECLARE_FINAL_OBJECT_INFO</span><span class=\"token punctuation\">(</span>SequentialNode<span class=\"token punctuation\">,</span> PassNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>IRModule <span class=\"token class-name\">SequentialNode</span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PassContext<span class=\"token operator\">&amp;</span> pass_ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Pass<span class=\"token operator\">&amp;</span> pass <span class=\"token operator\">:</span> passes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 遍历所有包含的 pass</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// resolve dependencies</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> it <span class=\"token operator\">:</span> pass_info<span class=\"token operator\">-></span>required<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      mod <span class=\"token operator\">=</span> <span class=\"token function\">GetPass</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pass_ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pass_ctx<span class=\"token operator\">-></span>trace_stack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>pass_info<span class=\"token operator\">-></span>traceable <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pass_ctx<span class=\"token operator\">-></span>make_traceable<span class=\"token punctuation\">.</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         pass_ctx<span class=\"token operator\">-></span>make_traceable<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>pass_info<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token comment\">// In the future, we should pass the ffi key for a pass by deducing from its name.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      String transform_func_key <span class=\"token operator\">=</span> <span class=\"token string\">\"relax.tuning_api.Choice.default_transform_func\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      String constr_func_key <span class=\"token operator\">=</span> <span class=\"token string\">\"relax.tuning_api.Choice.default_constr_func\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      relax<span class=\"token double-colon punctuation\">::</span>Knob knob <span class=\"token operator\">=</span> relax<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Knob</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          pass_info<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token comment\">// Add new decision to the trace at the top of the stack.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">auto</span> trace <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">Downcast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>relax<span class=\"token double-colon punctuation\">::</span>Trace<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>pass_ctx<span class=\"token operator\">-></span>trace_stack<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      trace<span class=\"token operator\">-></span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>knob<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Applied\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      mod <span class=\"token operator\">=</span> <span class=\"token function\">pass</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pass_ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用 Pass 执行对模型的优化</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      trace<span class=\"token operator\">-></span><span class=\"token function\">SetOutMod</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      mod <span class=\"token operator\">=</span> <span class=\"token function\">pass</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pass_ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用 Pass 执行对模型的优化</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">return</span> mod<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复。</p>\n",
            "tags": [
                "tvm",
                "compile"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/10/21/tvm04/",
            "url": "https://forcheetah.github.io/2024/10/21/tvm04/",
            "title": "【TVM】通过代码学习编译流程【4】BuildRelay",
            "date_published": "2024-10-21T14:03:00.249Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本系列文章将从代码和流程图入手，详细介绍 TVM AI 编译器的编译流程。本文章为第四篇，对应的 TVM 版本为当前最新版本 1.7。</p>\n<p>网络上有不少 TVM 工程的教程资源，如果本博客也是其他教程的简单重复的话，则网络的角落里又多了一份纯粹的空间占用者。所以我在想，本文章有什么特点才值得一看呢？我觉得有两个优点: 1、本文从代码出发，不会泛泛而谈，能够从细节了解 TVM；2、自认为结构流程图画的不错，能够从整体上把握 TVM 的脉络。所以，也许值得一看呢。</p>\n<p>本篇文章介绍 TVM BuildRelay 函数。文章 <a href=\"https://forcheetah.github.io/2024/10/17/tvm03/\">《【TVM】通过代码学习编译流程【3】模型编译》</a> 已经介绍了 Relay IRModule 转换为 <code>GraphExecutorFactory</code>  的过程。其中中间有个 <code>bld_mod.build()</code>  函数调用 C++ 类 <code>RelayBuildModule</code>  的函数 <code>build</code> 。  <code>build</code>  流程包含了将 Relay IRModule 降级为低级中间表示 TIR，然后再转换为 Runtime::Module 的过程。本篇文章将介绍 <code>BuildRelay</code>  和其子函数 <code>OptimizeImpl</code> 。</p>\n<p>因为代码量巨大，模型编译会分成若干篇文章进行解析。接下来的若干篇都会介绍 BuildRelay 函数 及其调用的子函数。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"python脚本\"><a class=\"anchor\" href=\"#python脚本\">#</a> Python 脚本</h1>\n<p>这里提供一个简单的 Python 脚本，调用 TVM Python 前端，实现 onnx 模型的编译过程。tvm 通过代码学习编程流程系列文章将基本采用这个脚本帮助追踪代码。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> onnx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> tvm<span class=\"token punctuation\">.</span>relay <span class=\"token keyword\">as</span> relay</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> tvm</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> tvm<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> graph_executor</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">######################################    路径信息    ##########################################</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>model_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/resnet18.onnx\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>save_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/pythonSave/\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>onnx_model <span class=\"token operator\">=</span> onnx<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>model_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">##################################    图片信息    ##############################################</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>img_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/.tvm_test_data/data/imagenet_cat.png\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Resize it to 224x224</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>resized_image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>img_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>asarray<span class=\"token punctuation\">(</span>resized_image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># Our input image is in HWC layout while ONNX expects CHW input, so convert the array</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>img_data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Normalize according to the ImageNet input specification</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>imagenet_mean <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.485</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.406</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>imagenet_stddev <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.229</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.225</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>norm_img_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>img_data <span class=\"token operator\">/</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> imagenet_mean<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> imagenet_stddev</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># Add the batch dimension, as we are expecting 4-dimensional input: NCHW.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>norm_img_data<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">####################################     模型编译     ###########################################</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>input_name <span class=\"token operator\">=</span> <span class=\"token string\">\"data\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>target <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>Target<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>shape_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>input_name<span class=\"token punctuation\">:</span> img_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>mod<span class=\"token punctuation\">,</span> params <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>frontend<span class=\"token punctuation\">.</span>from_onnx<span class=\"token punctuation\">(</span>onnx_model<span class=\"token punctuation\">,</span> shape_dict<span class=\"token punctuation\">,</span> export_node_renamed_model_path<span class=\"token operator\">=</span>save_path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建 IRModule  高级 Relay IR</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">with</span> tvm<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>PassContext<span class=\"token punctuation\">(</span>opt_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    lib <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> target<span class=\"token operator\">=</span>target<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 创建 GraphExecutorFactoryModule  </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#######################################     模型保存      ########################################</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># save</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># 保存编译后的库文件（.so）</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>lib_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.so\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>lib<span class=\"token punctuation\">.</span>get_lib<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>export_library<span class=\"token punctuation\">(</span>lib_fname<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># 保存模型参数（.params）</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>params_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.params\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>params_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> param_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    param_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>relay<span class=\"token punctuation\">.</span>save_param_dict<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_params<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># 保存 JSON 格式的计算图（.json）</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>json_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.json\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>json_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> json_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    json_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_executor_config<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>dev <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>module <span class=\"token operator\">=</span> graph_executor<span class=\"token punctuation\">.</span>GraphModule<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">[</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># graph_executor.GraphModule</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">############################       运行    ##########################################</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>module<span class=\"token punctuation\">.</span>set_input<span class=\"token punctuation\">(</span>input_name<span class=\"token punctuation\">,</span> img_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>module<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>output_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>tvm_output <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>get_output<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tvm_output<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"buildrelay\"><a class=\"anchor\" href=\"#buildrelay\">#</a> BuildRelay</h1>\n<p>文章 <a href=\"https://forcheetah.github.io/2024/10/17/tvm03/\">《【TVM】通过代码学习编译流程【3】模型编译》</a> 已经介绍了 Relay IRModule 转换为 <code>GraphExecutorFactory</code>  的过程。其中中间有个 <code>bld_mod.build()</code>  函数调用 C++ 类 <code>RelayBuildModule</code>  的函数 <code>build</code> 。  <code>build</code>  流程包含了将 Relay IRModule 降级为低级中间表示 TIR，然后再转换为 Runtime::Module 的过程。本篇讲解 <code>bld_mod.build()</code>  函数调用到的 BuildRelay 函数，即下图中的红色节点。</p>\n<p><img loading=\"lazy\" data-src=\"1729519037124.jpg\" alt=\"总体流程图\"></p>\n<p>前述流程中讲到  <code>bld_mod.build()</code>  函数调用 C++ 类 <code>RelayBuildModule</code>  的函数 <code>build</code> 。 下面是 <code>RelayBuildModule</code>  类根据名字 “build” 调用的函数，它调用了自身的 <code>Build()</code>  函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">ICHECK_EQ</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>num_args<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>RelayBuildModule</code>  类的 <code>Build()</code>  函数以 Relay IRModule 模型为输入，调用关键函数  <code>BuildRelay(std::move(mod), mod_name);</code> 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Build</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Array<span class=\"token operator\">&lt;</span>Target<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> raw_targets<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> tvm<span class=\"token double-colon punctuation\">::</span>Target<span class=\"token operator\">&amp;</span> target_host<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>             <span class=\"token keyword\">const</span> Executor<span class=\"token operator\">&amp;</span> executor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Runtime<span class=\"token operator\">&amp;</span> runtime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>             <span class=\"token keyword\">const</span> WorkspaceMemoryPools<span class=\"token operator\">&amp;</span> workspace_memory_pools<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>             <span class=\"token keyword\">const</span> ConstantMemoryPools<span class=\"token operator\">&amp;</span> constant_memory_pools<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> String mod_name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    VLOG_CONTEXT <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Build\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    executor_ <span class=\"token operator\">=</span> executor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    runtime_ <span class=\"token operator\">=</span> runtime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    workspace_memory_pools_ <span class=\"token operator\">=</span> workspace_memory_pools<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    constant_memory_pools_ <span class=\"token operator\">=</span> constant_memory_pools<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    config_ <span class=\"token operator\">=</span> <span class=\"token function\">CompilationConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PassContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> raw_targets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Using compilation config:\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl <span class=\"token operator\">&lt;&lt;</span> config_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">BuildRelay</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mod_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>RelayBuildModule</code>  类的 <code>BuildRelay()</code>  函数是 TVM 编译的关键函数。基本的编译流程都在该函数当中。代码如下所示，在代码中添加了部分注释。简略介绍一下流程；<br>\n <code>WithAttrs()</code>  —— 为 Relay IRModule 添加 Executor 和 Runtime 属性<br>\n <code> OptimizeImpl(std::move(module))</code> —— 收集并执行大量针对高级中间表示 Relay IRModule 的优化 Pass，包含算子融合，常量折叠等。<br>\n <code>MakeExecutorCodegen(executor_-&gt;name)</code> —— 构建代码生成 GraphCodegen，用于将高层次的计算描述转换为特定硬件平台上的低层次、可执行代码。<br>\n <code>Init(nullptr, config_-&gt;primitive_targets)</code> ——Codegen 初始化。<br>\n <code>Codegen(func_module, func, mod_name)</code> —— 将 Relay IRModule 降级为 TIR Module。<br>\n <code>UpdateOutput(&amp;ret_)</code> —— 更新降级后的 json 图结构到 BuildOutput 结构体<br>\n <code>executor_codegen_-&gt;GetParams()</code> —— 更新降级后的 params 到 BuildOutput 结构体<br>\n <code>TIRToRuntime(lowered_funcs, host_target)</code> ——TIR Module 转换为 runtime::Module</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">BuildRelay</span><span class=\"token punctuation\">(</span>IRModule relay_module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> String<span class=\"token operator\">&amp;</span> mod_name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// Relay IRModule -> IRModule optimizations.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IRModule <span class=\"token keyword\">module</span> <span class=\"token operator\">=</span> <span class=\"token function\">WithAttrs</span><span class=\"token punctuation\">(</span>  <span class=\"token comment\">// 为 Relay IRModule 添加 Executor 和 Runtime 属性</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        relay_module<span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    relay_module <span class=\"token operator\">=</span> <span class=\"token function\">OptimizeImpl</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 执行多个针对 Relay IRModule 的优化 Pass</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// Get the updated function and new IRModule to build.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Function func <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">Downcast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>relay_module<span class=\"token operator\">-></span><span class=\"token function\">Lookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 获取 Relay IRModule 中的 main 函数表达式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    IRModule func_module <span class=\"token operator\">=</span> <span class=\"token function\">WithAttrs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IRModule</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FromExpr</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 为 main 函数表达式添加属性信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                                     <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// Generate code for the updated function.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    executor_codegen_ <span class=\"token operator\">=</span> <span class=\"token function\">MakeExecutorCodegen</span><span class=\"token punctuation\">(</span>executor_<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 构建代码生成 GraphCodegen</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> config_<span class=\"token operator\">-></span>primitive_targets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Codegen 初始化</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">Codegen</span><span class=\"token punctuation\">(</span>func_module<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> mod_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 将 Relay IRModule 降级为 TIR Module    </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">UpdateOutput</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ret_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 更新降级后的 json 图结构到 BuildOutput 结构体</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    ret_<span class=\"token punctuation\">.</span>params <span class=\"token operator\">=</span> executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 更新降级后的 params 到 BuildOutput 结构体</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">auto</span> lowered_funcs <span class=\"token operator\">=</span> executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetIRModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取降级后的 TIR Module</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// No need to build for external functions.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    Target <span class=\"token function\">ext_dev</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ext_dev\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lowered_funcs<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>ext_dev<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> lowered_funcs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      lowered_funcs<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>ext_dev<span class=\"token punctuation\">,</span> <span class=\"token function\">IRModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">const</span> Target<span class=\"token operator\">&amp;</span> host_target <span class=\"token operator\">=</span> config_<span class=\"token operator\">-></span>host_virtual_device<span class=\"token operator\">-></span>target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">const</span> runtime<span class=\"token double-colon punctuation\">::</span>PackedFunc<span class=\"token operator\">*</span> pf <span class=\"token operator\">=</span> runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Registry</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"codegen.LLVMModuleCreate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// When there is no lowered_funcs due to reasons such as optimization.</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lowered_funcs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>host_target<span class=\"token operator\">-></span>kind<span class=\"token operator\">-></span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">CHECK</span><span class=\"token punctuation\">(</span>pf <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Unable to create empty module for llvm without llvm codegen.\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// If we can decide the target is LLVM, we then create an empty LLVM module.</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        ret_<span class=\"token punctuation\">.</span>mod <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>host_target<span class=\"token operator\">-></span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"empty_module\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// If we cannot decide the target is LLVM, we create an empty CSourceModule.</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// The code content is initialized with \";\" to prevent complaining</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// from CSourceModuleNode::SaveToFile.</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        ret_<span class=\"token punctuation\">.</span>mod <span class=\"token operator\">=</span> tvm<span class=\"token double-colon punctuation\">::</span>codegen<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CSourceModuleCreate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\";\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      ret_<span class=\"token punctuation\">.</span>mod <span class=\"token operator\">=</span> tvm<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">TIRToRuntime</span><span class=\"token punctuation\">(</span>lowered_funcs<span class=\"token punctuation\">,</span> host_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// TIR Module 转换为 runtime::Module</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">auto</span> ext_mods <span class=\"token operator\">=</span> executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetExternalModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    ret_<span class=\"token punctuation\">.</span>mod <span class=\"token operator\">=</span> tvm<span class=\"token double-colon punctuation\">::</span>codegen<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CreateMetadataModule</span><span class=\"token punctuation\">(</span>ret_<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">,</span> ret_<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">,</span> ext_mods<span class=\"token punctuation\">,</span> host_target<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                                                  runtime_<span class=\"token punctuation\">,</span> executor_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                                                  executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetExecutorCodegenMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// Remove external params which were stored in metadata module.</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span>Module mod <span class=\"token operator\">:</span> ext_mods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token keyword\">auto</span> pf_var <span class=\"token operator\">=</span> mod<span class=\"token punctuation\">.</span><span class=\"token function\">GetFunction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get_const_vars\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pf_var <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> variables <span class=\"token operator\">=</span> <span class=\"token function\">pf_var</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> variables<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>          <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> ret_<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>variables<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">operator</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> ret_<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"constant '\"</span> <span class=\"token operator\">&lt;&lt;</span> variables<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"' has been captured in external module\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            ret_<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>BuildRelay 过程很长，这是总体的流程结构的一部分。</p>\n<p><img loading=\"lazy\" data-src=\"1729519253239.jpg\" alt=\"总体\"></p>\n<h1 id=\"optimizeimpl\"><a class=\"anchor\" href=\"#optimizeimpl\">#</a> OptimizeImpl</h1>\n<p><code> OptimizeImpl(std::move(module))</code> —— 收集并执行大量针对高级中间表示 Relay IRModule 的优化 Pass，包含算子融合，常量折叠等。 <code>OptimizeImpl()</code>  函数如下所示。代码中包含了主要函数的简单注释。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>IRModule <span class=\"token function\">OptimizeImpl</span><span class=\"token punctuation\">(</span>IRModule relay_module<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">ICHECK</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">.</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The IRModule must be defined for the Relay compiler.\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    backend<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BindParamsInModule</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">,</span> params_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 根据参数名字绑定参数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Array<span class=\"token operator\">&lt;</span>Pass<span class=\"token operator\">></span> pass_seqs <span class=\"token operator\">=</span>  <span class=\"token comment\">// 获取一系列 pass，组成包含 Pass 的数组</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">GetPassPrefix</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*is_homogenous=*/</span>config_<span class=\"token operator\">-></span>primitive_targets<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/*is_vm=*/</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    transform<span class=\"token double-colon punctuation\">::</span>PassContext pass_ctx <span class=\"token operator\">=</span> <span class=\"token class-name\">PassContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token punctuation\">.</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">// This pass currently only supports the homogeneous case.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">SplitArgs</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">GetAttr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"max_function_args\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              <span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              <span class=\"token punctuation\">.</span><span class=\"token function\">IntValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// Always plan devices so the remaining passes don't need to distinguish homogeneous vs hetrogenous execution.</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">PlanDevices</span><span class=\"token punctuation\">(</span>config_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// Fuse the operations if it is needed.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FuseOps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 添加算子融合 Pass</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// Create a sequential pass and perform optimizations.</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    transform<span class=\"token double-colon punctuation\">::</span>Pass seq <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Sequential</span><span class=\"token punctuation\">(</span>pass_seqs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将多个 Pass 封装成 Sequential 类。Sequential 类包含多个按照顺序执行的 Pass，类似于 pytorch 里面的 nn.Sequential</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token punctuation\">.</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      With<span class=\"token operator\">&lt;</span>Target<span class=\"token operator\">></span> <span class=\"token function\">tctx</span><span class=\"token punctuation\">(</span>config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      relay_module <span class=\"token operator\">=</span> <span class=\"token function\">seq</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      relay_module <span class=\"token operator\">=</span> <span class=\"token function\">seq</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 执行 Sequential seq 中的所有 Pass，修改 relay_module 结构</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// Do layout rewrite for auto-scheduler.  </span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>backend<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">IsAutoSchedulerEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token punctuation\">.</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 使用 auto-schedule 优化调度的情况下</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      Pass major_pass <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">AutoSchedulerLayoutRewrite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 内存排布重写 Pass</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token keyword\">bool</span> enable_layout_rewrite_targets <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token operator\">-></span><span class=\"token function\">GetTargetDeviceType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> kDLCPU <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">GetAttr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"device\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"mali\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enable_layout_rewrite_targets <span class=\"token operator\">&amp;&amp;</span> pass_ctx<span class=\"token punctuation\">.</span><span class=\"token function\">PassEnabled</span><span class=\"token punctuation\">(</span>major_pass<span class=\"token operator\">-></span><span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        With<span class=\"token operator\">&lt;</span>Target<span class=\"token operator\">></span> <span class=\"token function\">tctx</span><span class=\"token punctuation\">(</span>config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        relay_module <span class=\"token operator\">=</span> <span class=\"token function\">major_pass</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// Defuse ops to fold constants, then fuse them again</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">DefuseOps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 执行 单个 Pass</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FoldConstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FuseOps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>backend<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">IsMetaScheduleEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token punctuation\">.</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 使用 meta-schedule 优化调度的情况下</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      Pass major_pass <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MetaScheduleLayoutRewrite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token keyword\">bool</span> enable_layout_rewrite_targets <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>          config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token operator\">-></span><span class=\"token function\">GetTargetDeviceType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> kDLCPU <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>          config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">GetAttr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"device\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"mali\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enable_layout_rewrite_targets <span class=\"token operator\">&amp;&amp;</span> pass_ctx<span class=\"token punctuation\">.</span><span class=\"token function\">PassEnabled</span><span class=\"token punctuation\">(</span>major_pass<span class=\"token operator\">-></span><span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        With<span class=\"token operator\">&lt;</span>Target<span class=\"token operator\">></span> <span class=\"token function\">tctx</span><span class=\"token punctuation\">(</span>config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        relay_module <span class=\"token operator\">=</span> <span class=\"token function\">major_pass</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// Defuse ops to fold constants, then fuse them again</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">DefuseOps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>     <span class=\"token comment\">// 执行反算子融合 Pass</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FoldConstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 执行常量折叠 Pass</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FuseOps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>       <span class=\"token comment\">// 执行算子融合 Pass</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">InferType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Inline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">InferType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">LabelOps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">AnnotateMemoryScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">return</span> relay_module<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code> backend::BindParamsInModule(relay_module, params_)</code> —— 根据参数名字绑定参数</p>\n<p>Meta Schedule 和 AutoSchedule 都是用于自动优化调度的工具。AutoSchedule 是 TVM 较早期引入的一种自动调度机制，它的主要特点是基于成本模型的搜索算法来探索可能的调度选项。AutoSchedule 通常依赖于一个预定义的成本模型来估计不同调度策略下的性能，并使用搜索算法（如进化算法或随机搜索）来找到最佳的调度。MetaSchedule 是一个更为现代化且灵活的自动调度框架，它旨在解决日益增长的硬件多样性和复杂的深度学习工作负载带来的挑战。与 AutoSchedule 相比，MetaSchedule 引入了更多先进的技术和设计理念，如自适应性，机器学习搜索测量，有反馈的成本模型。使用方法：例如可以在 PassContext 中配置 “relay.backend.use_meta_schedule” 参数设置为 TRUE，则 TVM 使用 Meta Schedule 帮助完成自动调度优化。</p>\n<p><code>GetPassPrefix()</code> —— 获取一系列 Pass，组成包含 Pass 的数组。代码如下。</p>\n<p>函数中还获取了很多其他 Pass，下一篇文章将选择其中的 <code>DefuseOps</code> Pass 进行讲解。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Array<span class=\"token operator\">&lt;</span>Pass<span class=\"token operator\">></span> <span class=\"token function\">GetPassPrefix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> is_homogeneous<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> is_vm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Array<span class=\"token operator\">&lt;</span>Pass<span class=\"token operator\">></span> pass_seqs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// TODO(mbs): Would be nice to get spans on all diagnostics, but since they arg forgotton</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// by most passes there's little utility in including this now. Plus we'd need to only do</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// this if there's no existing spans to work from.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// pass_seqs.push_back(parser::AnnotateSpans());</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  Array<span class=\"token operator\">&lt;</span>runtime<span class=\"token double-colon punctuation\">::</span>String<span class=\"token operator\">></span> entry_functions<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">RemoveUnusedFunctions</span><span class=\"token punctuation\">(</span>entry_functions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ToBasicBlockNormalForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// Run all dialect legalization passes.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>relay<span class=\"token double-colon punctuation\">::</span>qnn<span class=\"token double-colon punctuation\">::</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Legalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// Legalize pass is restricted to homogeneous execution for now.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is_homogeneous<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Legalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">SimplifyInference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is_vm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// eta expand to support constructors in argument position</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">EtaExpand</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">/* expand_constructor */</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* expand_global_var */</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  PackedFunc fskip <span class=\"token operator\">=</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    Expr expr <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">*</span> call_node <span class=\"token operator\">=</span> expr<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">as</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CallNode<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">auto</span> op_node <span class=\"token operator\">=</span> call_node<span class=\"token operator\">-></span>op<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">as</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>OpNode<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op_node<span class=\"token operator\">-></span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"cast\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">auto</span> attrs <span class=\"token operator\">=</span> call_node<span class=\"token operator\">-></span>attrs<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">as</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CastAttrs<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>attrs<span class=\"token operator\">-></span>dtype <span class=\"token operator\">==</span> <span class=\"token class-name\">DataType</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">EliminateCommonSubexpr</span><span class=\"token punctuation\">(</span>fskip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CombineParallelConv2D</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CombineParallelDense</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CombineParallelBatchMatmul</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FoldConstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FoldScaleAxis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">SimplifyExpr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CanonicalizeCast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CanonicalizeOps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FlattenAtrousConv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token comment\">// Alter layout transformation is currently only applied to homogeneous execution.</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is_homogeneous<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>is_vm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">InferType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">AlterOpLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">SimplifyExprPostAlterOp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token comment\">// Fast math optimizations.</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FastMath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FoldConstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token keyword\">return</span> pass_seqs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复。</p>\n",
            "tags": [
                "tvm",
                "compile"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/10/18/aicompile01/",
            "url": "https://forcheetah.github.io/2024/10/18/aicompile01/",
            "title": "【AI编译】Tiling操作能优化什么时间",
            "date_published": "2024-10-18T13:44:56.351Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇讲解 Tiling 操作为什么能够优化神经网络推理。</p>\n<p>也可以参考 <a href=\"https://www.hiascend.com/developer/techArticles/20240920-1?envFlag=1\">《Ascend C 算子优化实用技巧 04——Tiling 优化》</a></p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"什么是tiling\"><a class=\"anchor\" href=\"#什么是tiling\">#</a> 什么是 tiling</h1>\n<p>无法完整的容纳算子的输入与输出，需要每次搬运一部分输入进行计算然后搬出，再搬运下一部分输入进行计算，直到得到完整的最终结果，这个数据切分、分块计算的过程称之为 Tiling，切分数据的算法称为 Tiling 算法或者 Tiling 策略。</p>\n<h1 id=\"tile算子和tiling的区别\"><a class=\"anchor\" href=\"#tile算子和tiling的区别\">#</a> tile 算子和 tiling 的区别</h1>\n<p>我们先问一问语言大模型两者的区别：</p>\n<h2 id=\"神经网络推理中的tile算子\"><a class=\"anchor\" href=\"#神经网络推理中的tile算子\">#</a> 神经网络推理中的 Tile 算子</h2>\n<p>在神经网络中，会发现 tile 作为一个节点算子出现。Tile 算子（或称为 Tiling 操作）是一种张量操作，它的功能是将输入张量沿着指定的维度重复一定次数。该算子需要指定两个参数：</p>\n<ul>\n<li>1.reps<br>\n（重复次数）：这是一个整数列表，定义了每个维度上的重复次数。列表的长度必须与输入张量的维度相匹配，或者至少与你想要扩展的那些维度相匹配。如果对于某个维度你不希望进行复制，可以设置为 1。</li>\n<li>2.axis<br>\n（轴 / 维度）：虽然某些框架可能不需要显式指定轴，因为它们可以通过 reps 的结构来推断，但有些情况下需要明确指出哪些维度应该被复制。</li>\n</ul>\n<p>例如，假设有一个形状为 (2, 3) 的二维张量，并且你想沿第一个维度（行方向）重复两次，沿第二个维度（列方向）重复三次，那么你可以使用 Tile 算子并设置 reps=[2, 3]。这样操作后，输出张量将会是一个形状为 (4, 9) 的新张量，其中原始张量的内容被按照指定的方式进行了复制。</p>\n<p>在不同的深度学习库中，Tile 算子的实现可能会有所不同。例如，在 TensorFlow 中，它是 tf.tile () 函数；而在 PyTorch 中，则对应的是 torch.tile () 或者 .repeat () 方法。每种实现都有其特定的语法和用法，但核心概念是一致的。</p>\n<h2 id=\"ai编译优化中的tiling操作\"><a class=\"anchor\" href=\"#ai编译优化中的tiling操作\">#</a> AI 编译优化中的 tiling 操作</h2>\n<p>在 AI 编译领域，特别是针对深度学习模型的优化过程中，“tiling”（平铺）操作是指一种将计算任务分解成更小、更易于管理的子任务的技术。这种技术通常用于提高计算效率和内存使用效率，尤其是在处理大规模数据集或高维度张量时。</p>\n<p>Tiling 的主要目的是：</p>\n<ul>\n<li>1. 减少内存访问开销：通过将大块数据划分为较小的 “瓦片”，可以将这些小块数据加载到高速缓存中，从而减少对外部存储器的访问次数。这有助于利用 CPU 或 GPU 的高速缓存来加速计算过程。</li>\n<li>2. 并行化处理：每个 “瓦片” 可以独立处理，这意味着它们可以在多核处理器上并行执行，或者在 GPU 等并行计算架构上高效地分发给不同的线程或流处理器。</li>\n<li>3. 更好地利用硬件资源：通过适当调整瓦片大小，可以确保计算单元能够被充分利用，同时避免因单个任务过大导致的资源浪费。</li>\n<li>4. 改善局部性：合理设置的瓦片尺寸可以帮助保持良好的空间局部性和时间局部性，使得数据在被处理前已经被预取到了更快的存储层次中。</li>\n<li>5. 降低峰值内存需求：对于某些运算来说，一次性加载整个输入可能需要大量的内存。通过 tilling，我们可以仅处理当前所需的那部分数据，从而降低了对系统内存的需求。<br>\n例如，在卷积神经网络 (CNN) 中，一个常见的做法是将图像分割成多个小块，并且只在这些小块上进行卷积运算，而不是在整个图像上进行。这样做不仅可以减少每次计算所需的数据量，还能促进更好的并行化。</li>\n</ul>\n<p>Tiling 策略的选择取决于具体的硬件特性以及所处理数据的特点。在实际应用中，通常需要根据目标平台和具体应用场景来精心设计合适的 tilling 方案。一些自动化的工具和框架如 TensorFlow XLA、TVM (Tensor Virtual Machine) 等提供了高级别的 API 来帮助开发者实现高效的 tilling 优化。</p>\n<h2 id=\"两个tile是完全不同的概念\"><a class=\"anchor\" href=\"#两个tile是完全不同的概念\">#</a> 两个 tile 是完全不同的概念</h2>\n<p>两个 “tile” 概念虽然名字相似，但它们在不同的上下文中使用，并且具有不同的含义和用途：</p>\n<p>1. 神经网络中的 Tile 算子：</p>\n<ul>\n<li>在这个上下文中，Tile 是指一种张量操作，它将输入张量沿着指定维度重复一定次数。</li>\n<li>它主要用于数据处理阶段，例如当你需要复制或扩展张量以匹配某些特定的尺寸要求时。</li>\n<li>例子包括 TensorFlow 中的 tf.tile () 函数或 PyTorch 中的.repeat () 方法。</li>\n</ul>\n<p>2.AI 编译领域的 Tiling（平铺）：</p>\n<ul>\n<li>这里的 Tiling 是一种优化技术，用于将计算任务分解成更小的、可管理的部分，以便于更好地利用硬件资源，如缓存和并行计算能力。</li>\n<li>它通常是在模型优化阶段使用的，目的是提高计算效率、减少内存访问开销、促进并行化处理等。</li>\n<li>Tiling 可以应用于各种类型的运算，比如卷积运算中将图像分割成小块来处理。</li>\n</ul>\n<p>总结来说，尽管两者都涉及到了 “复制” 或 “分块” 的概念，但是神经网络中的 Tile 算子更多地关注于数据结构的操作，而 AI 编译领域的 Tiling 则是一个优化策略，旨在提升程序执行的性能。这两个概念分别属于数据处理和性能优化的不同领域。</p>\n<h1 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h1>\n<p>一台电脑的内存很大，现在主流配置 16GB，甚至 32GB，虽然空间很大，但是它的速度比较慢，我们把它叫做 Global Memory。</p>\n<p>专用的 NPU 芯片用来做神经网络推理，它的高速缓存速度很快，但是空间可能只有几 MB，我们把它叫做 Cache。</p>\n<p>为了获取更快的运算速度，tensor 需要加载到 Cache 中进行计算，但是当算子需要占用的空间超过 Cache 的空间时，需要不断的进行数据搬运，导致算子搬入或搬出数据变为算子整个运行过程的性能瓶颈。</p>\n<p><img loading=\"lazy\" data-src=\"1729258859529.jpg\" alt=\"AI\"></p>\n<p>如上图所示：</p>\n<p>假设现在有 300 个数，需要连续经过三个 add 算子进行加操作，分别是 <code>add_1</code> ， <code>add_2</code>  和 <code>add_3</code> ，最终仍然输出 300 个数。</p>\n<p>但是 Cache 只能够存放 100 个数。</p>\n<p>在没有 tiling 操作的情况下：计算 <code>add_1</code>  时，需要将 (0,100) 个数 load 到 Cache，计算完毕后，需要将这 (0,100) store 回 global memory，为下一百个数腾出空间【接下来的计算 Cache 未命中】；然后加载 load (100,200) 的数据，继续计算 <code>add_1</code> 。以此类推，在没有 tiling 操作的情况下，计算完 <code>add_1</code> ， <code>add_2</code>  和 <code>add_3</code>  需要 load 和 store 操作的数据都是 900。</p>\n<p>在 tiling 的情况下，会提前将数据分块，分成 (0,100)，(100,200) 和 (200,300)。加载 (0,100)，接连计算 <code>add_1</code> ， <code>add_2</code>  和 <code>add_3</code> 。计算 <code>add_2</code>  时发现 Cache 中的数据正是所需要的数据【Cache 命中】。计算流程如图所示，整个计算下来，load 和 store 操作的数据都是 300。</p>\n<p><img loading=\"lazy\" data-src=\"a.jpg\" alt=\"图片\"></p>\n<p>tiling 操作提高了 cache 的命中率，避免了频繁搬运带来的时间损耗。<br>\n从图上看，同一 group 中包含的超出 cache 算子越多，tiling 带来的收益越大。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "compile",
                "AI"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/10/17/tvm03/",
            "url": "https://forcheetah.github.io/2024/10/17/tvm03/",
            "title": "【TVM】通过代码学习编译流程【3】模型编译",
            "date_published": "2024-10-17T12:03:36.801Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本系列文章将从代码和流程图入手，详细介绍 TVM AI 编译器的编译流程。本文章为第三篇，对应的 TVM 版本为当前最新版本 1.7。</p>\n<p>网络上有不少 TVM 工程的教程资源，如果本博客也是其他教程的简单重复的话，则网络的角落里又多了一份纯粹的空间占用者。所以我在想，本文章有什么特点才值得一看呢？我觉得有两个优点: 1、本文从代码出发，不会泛泛而谈，能够从细节了解 TVM；2、自认为结构流程图画的不错，能够从整体上把握 TVM 的脉络。所以，也许值得一看呢。</p>\n<p>本篇文章介绍 TVM 对模型的编译流程。文章 <a href=\"https://forcheetah.github.io/2024/10/13/tvm02/\">《【TVM】通过代码学习编译流程【2】模型转换》</a> 已经介绍了 onnx 模型转换为 TVM 高级中间表示 Relay IRModule 的过程，得到了 Relay IRModule。本篇文章则介绍该模型后续的编译从 Relay IRModule 转换为 <code>GraphExecutorFactory</code>  的过程。</p>\n<p>因为代码量巨大，模型编译会分成若干篇文章进行解析。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"python脚本\"><a class=\"anchor\" href=\"#python脚本\">#</a> Python 脚本</h1>\n<p>这里提供一个简单的 Python 脚本，调用 TVM Python 前端，实现 onnx 模型的编译过程。tvm 通过代码学习编程流程系列文章将基本采用这个脚本帮助追踪代码。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> onnx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> tvm<span class=\"token punctuation\">.</span>relay <span class=\"token keyword\">as</span> relay</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> tvm</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> tvm<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> graph_executor</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">######################################    路径信息    ##########################################</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>model_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/resnet18.onnx\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>save_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/pythonSave/\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>onnx_model <span class=\"token operator\">=</span> onnx<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>model_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">##################################    图片信息    ##############################################</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>img_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/.tvm_test_data/data/imagenet_cat.png\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Resize it to 224x224</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>resized_image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>img_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>asarray<span class=\"token punctuation\">(</span>resized_image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># Our input image is in HWC layout while ONNX expects CHW input, so convert the array</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>img_data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Normalize according to the ImageNet input specification</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>imagenet_mean <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.485</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.406</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>imagenet_stddev <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.229</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.225</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>norm_img_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>img_data <span class=\"token operator\">/</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> imagenet_mean<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> imagenet_stddev</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># Add the batch dimension, as we are expecting 4-dimensional input: NCHW.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>norm_img_data<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">####################################     模型编译     ###########################################</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>input_name <span class=\"token operator\">=</span> <span class=\"token string\">\"data\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>target <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>Target<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>shape_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>input_name<span class=\"token punctuation\">:</span> img_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>mod<span class=\"token punctuation\">,</span> params <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>frontend<span class=\"token punctuation\">.</span>from_onnx<span class=\"token punctuation\">(</span>onnx_model<span class=\"token punctuation\">,</span> shape_dict<span class=\"token punctuation\">,</span> export_node_renamed_model_path<span class=\"token operator\">=</span>save_path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建 IRModule  高级 Relay IR</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">with</span> tvm<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>PassContext<span class=\"token punctuation\">(</span>opt_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    lib <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> target<span class=\"token operator\">=</span>target<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 创建 GraphExecutorFactoryModule  </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#######################################     模型保存      ########################################</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># save</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># 保存编译后的库文件（.so）</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>lib_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.so\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>lib<span class=\"token punctuation\">.</span>get_lib<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>export_library<span class=\"token punctuation\">(</span>lib_fname<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># 保存模型参数（.params）</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>params_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.params\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>params_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> param_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    param_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>relay<span class=\"token punctuation\">.</span>save_param_dict<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_params<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># 保存 JSON 格式的计算图（.json）</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>json_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.json\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>json_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> json_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    json_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_executor_config<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>dev <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>module <span class=\"token operator\">=</span> graph_executor<span class=\"token punctuation\">.</span>GraphModule<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">[</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># graph_executor.GraphModule</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">############################       运行    ##########################################</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>module<span class=\"token punctuation\">.</span>set_input<span class=\"token punctuation\">(</span>input_name<span class=\"token punctuation\">,</span> img_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>module<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>output_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>tvm_output <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>get_output<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tvm_output<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"tvm编译\"><a class=\"anchor\" href=\"#tvm编译\">#</a> TVM 编译</h1>\n<p>下面的函数实现了 TVM 的编译过程。该过程的输入 <code>mod, target=target, params=params</code>  分别是 Relay IRModule 中间表示， <code>target</code>  目标设备， <code>params</code>  参数。</p>\n<p><code>params</code>  参数在上一篇文章中有讲到， <code>freeze_params=True</code>  的情况下该 <code>params</code>  为空的字典。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> tvm<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>PassContext<span class=\"token punctuation\">(</span>opt_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    lib <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> target<span class=\"token operator\">=</span>target<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 创建 GraphExecutorFactoryModule</span></pre></td></tr></table></figure><p>下图是 <code>relay.build()</code>  函数的总体流程图。</p>\n<p><img loading=\"lazy\" data-src=\"1729165916609.jpg\" alt=\"总体流程图\"></p>\n<h2 id=\"pass上下文-passcontext\"><a class=\"anchor\" href=\"#pass上下文-passcontext\">#</a> Pass 上下文   PassContext</h2>\n<p><code>Pass</code> ：在编译器设计中，“pass” 通常指的是编译过程中的一轮或多轮处理。一个 “pass” 是指对源代码或者其某种表示形式（如抽象语法树或中间表示）进行一次完整的扫描或处理。</p>\n<p><code>with tvm.transform.PassContext(opt_level=3)</code>  代码初始化了 TVM 转换 Pass 的上下文。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token decorator annotation punctuation\">@tvm<span class=\"token punctuation\">.</span>_ffi<span class=\"token punctuation\">.</span>register_object</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transform.PassContext\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PassContext</span><span class=\"token punctuation\">(</span>tvm<span class=\"token punctuation\">.</span>runtime<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"The basis where a Relay optimization/analysis runs on.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Each pass context contains a number of auxiliary information that is used</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    to help an optimization pass. Such information includes the error reporter</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    to record the errors of during the optimization, etc.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    opt_level : Optional[int]</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        The optimization level of this pass.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    required_pass : Optional[Union[List[str], Set[str], Tuple[str]]]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        The list of passes that are required by a certain pass.</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    disabled_pass : Optional[Union[List[str], Set[str], Tuple[str]]]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        The list of passes that are disabled.</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    instruments : Optional[Sequence[PassInstrument]]</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        The list of pass instrument implementations.</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    config : Optional[Dict[str, Object]]</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        Additional configurations for specific passes.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    trace: Optional[relax.tuning.Trace]</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        Initial trace for trace mode.</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    trace_stack: Optional[List[relax.tuning_api.Trace]]</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        Initial trace stack for trace mode.</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    make_traceable: Optional[List[str]]</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        List of passes to make traceable.</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    num_evals: int</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        initial number of evaluations conducted in the pipeline.</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    tuning_api_database: Optional[relax.tuning_api.JSONDatabase]</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    \"\"\"</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        opt_level<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        required_pass<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        disabled_pass<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        instruments<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        config<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        trace<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        trace_stack<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        make_traceable<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        num_evals<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        tuning_api_database<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        required <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>required_pass<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> required_pass <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>required<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">raise</span> TypeError<span class=\"token punctuation\">(</span><span class=\"token string\">\"required_pass is expected to be the type of \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"list/tuple/set.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        disabled <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>disabled_pass<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> disabled_pass <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>disabled<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">raise</span> TypeError<span class=\"token punctuation\">(</span><span class=\"token string\">\"disabled_pass is expected to be the type of \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"list/tuple/set.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        instruments <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>instruments<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> instruments <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>instruments<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">raise</span> TypeError<span class=\"token punctuation\">(</span><span class=\"token string\">\"instruments is expected to be the type of \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"list/tuple/set.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\"># Convert to Map&lt;String, bool></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\"># TODO(sunggg): Replace this to Set equivalent if exists</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        make_traceable <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span> <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> make_traceable<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">if</span> make_traceable <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> trace_stack<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            trace_stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>trace<span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> trace <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        config <span class=\"token operator\">=</span> config <span class=\"token keyword\">if</span> config <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        self<span class=\"token punctuation\">.</span>__init_handle_by_constructor__<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            _ffi_transform_api<span class=\"token punctuation\">.</span>PassContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            opt_level<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            required<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            disabled<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            instruments<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            config<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            trace_stack<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            make_traceable<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            num_evals<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            tuning_api_database<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上述代码可以看到，PassContext 在初始化的时候， <code>opt_level</code> pass 优化级别，可以指定  <code>required_pass</code>  需要的 pass 列表， <code>disabled_pass</code>  需要排除的 pass 列表等。</p>\n<p>之后调用 <code>self.__init_handle_by_constructor__()</code>  函数创建 PassContext 类。其中 <code>_ffi_transform_api.PassContext</code>  是构造函数，其余参数是构造函数的参数。 <code>self.__init_handle_by_constructor__()</code>  调用 C++ 后端注册函数 <code>&quot;transform.PassContext&quot;</code> ，该函数如下所示：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">TVM_REGISTER_GLOBAL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transform.PassContext\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">set_body_typed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> opt_level<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> required<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> disabled<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                       Array<span class=\"token operator\">&lt;</span>instrument<span class=\"token double-colon punctuation\">::</span>PassInstrument<span class=\"token operator\">></span> instruments<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                       Optional<span class=\"token operator\">&lt;</span>Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> ObjectRef<span class=\"token operator\">>></span> config<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>ObjectRef<span class=\"token operator\">></span> trace_stack<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                       Optional<span class=\"token operator\">&lt;</span>Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Bool<span class=\"token operator\">>></span> make_traceable<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num_evals<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                       Optional<span class=\"token operator\">&lt;</span>ObjectRef<span class=\"token operator\">></span> tuning_api_database<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">auto</span> pctx <span class=\"token operator\">=</span> <span class=\"token class-name\">PassContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      pctx<span class=\"token operator\">-></span>opt_level <span class=\"token operator\">=</span> opt_level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      pctx<span class=\"token operator\">-></span>required_pass <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>required<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      pctx<span class=\"token operator\">-></span>disabled_pass <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>disabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      pctx<span class=\"token operator\">-></span>instruments <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>instruments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        pctx<span class=\"token operator\">-></span>config <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      pctx<span class=\"token operator\">-></span>trace_stack <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>trace_stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      pctx<span class=\"token operator\">-></span>make_traceable <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>make_traceable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      pctx<span class=\"token operator\">-></span>num_evals <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>num_evals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      pctx<span class=\"token operator\">-></span>tuning_api_database <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>tuning_api_database<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token class-name\">PassConfigManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">Legalize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>pctx<span class=\"token operator\">-></span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">return</span> pctx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>通过 <code>TVM_REGISTER_GLOBAL(&quot;transform.PassContext&quot;)</code>  注册为全局函数，接收所有参数，通过 <code>auto pctx = PassContext::Create();</code>  创建 <code>PassContext</code>  类。</p>\n<h2 id=\"编译过程-bld_mod-buildmodule\"><a class=\"anchor\" href=\"#编译过程-bld_mod-buildmodule\">#</a> 编译过程   bld_mod = BuildModule ()</h2>\n<p><img loading=\"lazy\" data-src=\"1729165916609.jpg\" alt=\"总体流程图\"></p>\n<p>创建完 Pass 上下文之后，接下来在回到 Python 脚本，看 <code>lib = relay.build(mod, target=target, params=params)</code> ，该函数将 Relay IRModule 编译成为 <code>GraphExecutorFactoryModule</code> ，对应于 C++ 后端的 <code>GraphExecutorFactory</code>  类。</p>\n<p><code>relay.build()</code>  函数如下所示：其中  <code>ir_mod</code>  是前述模型转换得到的 Relay IRModule， <code>target</code>  是计划部署的加速硬件或设备 如 llvm cuda metal 等，甚至可以指定多种加速硬件或设备。  <code>target_host</code>  是指定主机端（通常是 CPU）的编译目标，例如当  <code>target</code>  是一个设备（如 GPU）时，通常还需要一些 cpu 来处理与设备驱动程序的交互、内存分配等任务。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ir_mod<span class=\"token punctuation\">,</span>          <span class=\"token comment\"># Relay IRModule</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    target<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\"># 计划部署的加速硬件或设备 如 llvm cuda metal 等</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    target_host<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 指定主机端（通常是 CPU）的编译目标 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    executor<span class=\"token operator\">=</span>Executor<span class=\"token punctuation\">(</span><span class=\"token string\">\"graph\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    runtime<span class=\"token operator\">=</span>Runtime<span class=\"token punctuation\">(</span><span class=\"token string\">\"cpp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    workspace_memory_pools<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    constant_memory_pools<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    params<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    mod_name<span class=\"token operator\">=</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Helper function that builds a Relay function to run on TVM graph executor.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Parameters</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ----------</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ir_mod : :py:class:`~tvm.IRModule`</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        The IR module to build. Using relay.Function is deprecated.</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    target : None, or any multi-target like object, see Target.canon_multi_target</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        For homogeneous compilation, the unique build target.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        For heterogeneous compilation, a dictionary or list of possible build targets.</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        Defaults to the current target in the environment if None.</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    target_host : None, or any target like object, see Target.canon_target</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        Host compilation target, if target is device.</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    executor : Optional[Executor]</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        The executor configuration with which to build the model.</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        Defaults to \"graph\" if no executor specified.</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    runtime : Optional[Runtime]</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        Runtime configuration to use when building the model.</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        Defaults to \"cpp\" if no runtime specified.</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    workspace_memory_pools : Optional[WorkspaceMemoryPools]</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        The object that contains an Array of WorkspacePoolInfo objects</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        that hold properties of read-write workspace pools that could be</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        used by the inference.</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    constant_memory_pools : Optional[ConstantMemoryPools]</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        The object that contains an Array of ConstantPoolInfo objects</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        that hold properties of read-only pools that could be</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        used by the inference.</pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    params : dict of str to NDArray</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        Input parameters to the graph that do not change</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        during inference time. Used for constant folding.</pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    mod_name: Optional[str]</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        The module name we will build</pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    Returns</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    -------</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    factory_module : tvm.relay.backend.executor_factory.ExecutorFactoryModule</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            The runtime factory for the TVM graph executor.</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    \"\"\"</pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>ir_mod<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>IRModule<span class=\"token punctuation\">,</span> _function<span class=\"token punctuation\">.</span>Function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Type of input parameter mod must be tvm.IRModule\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>ir_mod<span class=\"token punctuation\">,</span> _function<span class=\"token punctuation\">.</span>Function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">if</span> params<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            ir_mod <span class=\"token operator\">=</span> bind_params_by_name<span class=\"token punctuation\">(</span>ir_mod<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        ir_mod <span class=\"token operator\">=</span> IRModule<span class=\"token punctuation\">.</span>from_expr<span class=\"token punctuation\">(</span>ir_mod<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        warnings<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token string\">\"Please use input parameter mod (tvm.IRModule) \"</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token string\">\"instead of deprecated parameter mod (tvm.relay.function.Function)\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            DeprecationWarning<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    raw_targets <span class=\"token operator\">=</span> Target<span class=\"token punctuation\">.</span>canon_multi_target_and_host<span class=\"token punctuation\">(</span>Target<span class=\"token punctuation\">.</span>target_or_current<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> target_host<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>raw_targets<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    target_host <span class=\"token operator\">=</span> raw_targets<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>host</pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token comment\"># If current dispatch context is fallback context (the default root context),</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\"># then load pre-tuned parameters from TopHub</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>autotvm<span class=\"token punctuation\">.</span>DispatchContext<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">,</span> autotvm<span class=\"token punctuation\">.</span>FallbackContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        tophub_context <span class=\"token operator\">=</span> autotvm<span class=\"token punctuation\">.</span>tophub<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>raw_targets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        tophub_context <span class=\"token operator\">=</span> autotvm<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>EmptyContext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">with</span> tophub_context<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        bld_mod <span class=\"token operator\">=</span> BuildModule<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        graph_json<span class=\"token punctuation\">,</span> runtime_mod<span class=\"token punctuation\">,</span> params <span class=\"token operator\">=</span> bld_mod<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            mod<span class=\"token operator\">=</span>ir_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            target<span class=\"token operator\">=</span>raw_targets<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            executor<span class=\"token operator\">=</span>executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            runtime<span class=\"token operator\">=</span>runtime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            workspace_memory_pools<span class=\"token operator\">=</span>workspace_memory_pools<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            constant_memory_pools<span class=\"token operator\">=</span>constant_memory_pools<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            mod_name<span class=\"token operator\">=</span>mod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        func_metadata <span class=\"token operator\">=</span> bld_mod<span class=\"token punctuation\">.</span>get_function_metadata<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        devices <span class=\"token operator\">=</span> bld_mod<span class=\"token punctuation\">.</span>get_devices<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        lowered_ir_mods <span class=\"token operator\">=</span> bld_mod<span class=\"token punctuation\">.</span>get_irmodule<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        executor_codegen_metadata <span class=\"token operator\">=</span> bld_mod<span class=\"token punctuation\">.</span>get_executor_codegen_metadata<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">if</span> executor<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"aot\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            executor_factory <span class=\"token operator\">=</span> _executor_factory<span class=\"token punctuation\">.</span>AOTExecutorFactoryModule<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                ir_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                lowered_ir_mods<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                raw_targets<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                runtime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                runtime_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                mod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                func_metadata<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                executor_codegen_metadata<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                devices<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token keyword\">elif</span> executor<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"graph\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            executor_factory <span class=\"token operator\">=</span> _executor_factory<span class=\"token punctuation\">.</span>GraphExecutorFactoryModule<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                ir_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                raw_targets<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                graph_json<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                runtime_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                mod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                func_metadata<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            <span class=\"token keyword\">assert</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Executor \"</span> <span class=\"token operator\">+</span> executor <span class=\"token operator\">+</span> <span class=\"token string\">\" not supported\"</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">return</span> executor_factory</pre></td></tr></table></figure><p>简单看下流程：</p>\n<p><code>if not isinstance(ir_mod, (IRModule,_function.Function))</code>  检查输入模型的格式，如果不是 <code>IRModule,_function.Function</code>  中的一个，报错！</p>\n<p><code>if isinstance(ir_mod, _function.Function)</code>  则检查如果是 <code> _function.Function</code> ，则帮助将该表达式重新封装为 Relay IRModule，并提醒你不要直接把 Function 表达式传进来，而是要先封装成 IRModule</p>\n<p><code>if isinstance(autotvm.DispatchContext.current, autotvm.FallbackContext)</code>  检查是否有提前计算的最优调度.<br>\n <code>bld_mod = BuildModule()</code>  初始化一个 <code>class BuildModule(object)</code> ，如下代码。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BuildModule</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Build an IR module to run on TVM graph executor. This class is used</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    to expose the `RelayBuildModule` APIs implemented in C++.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \"\"\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>mod <span class=\"token operator\">=</span> _build_module<span class=\"token punctuation\">.</span>_BuildModule<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C++ 类：RelayBuildModule</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_graph_json <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_graph_json\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_module <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_module\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_build <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"build\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_optimize <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"optimize\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_set_params_func <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"set_params\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_params_func <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_params\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_function_metadata <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_function_metadata\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_executor_codegen_metadata <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_executor_codegen_metadata\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_devices <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_devices\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_irmodule <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_irmodule\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        target<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        target_host<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        executor<span class=\"token operator\">=</span>Executor<span class=\"token punctuation\">(</span><span class=\"token string\">\"graph\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        runtime<span class=\"token operator\">=</span>Runtime<span class=\"token punctuation\">(</span><span class=\"token string\">\"cpp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        workspace_memory_pools<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        constant_memory_pools<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        params<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        mod_name<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">from</span> tvm<span class=\"token punctuation\">.</span>auto_scheduler <span class=\"token keyword\">import</span> is_auto_scheduler_enabled</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">from</span> tvm<span class=\"token punctuation\">.</span>meta_schedule <span class=\"token keyword\">import</span> is_meta_schedule_enabled</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\"># pylint: enable=import-outside-toplevel</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\"># Setup the params.</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span> params<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_set_params<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\"># Build the IR module. If auto_scheduler is not enabled,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\"># then use the TOPI-defined schedule.</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\"># Turn off AutoTVM config not found warnings if auto_scheduler is enabled.</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        old_autotvm_silent <span class=\"token operator\">=</span> autotvm<span class=\"token punctuation\">.</span>GLOBAL_SCOPE<span class=\"token punctuation\">.</span>silent</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        autotvm<span class=\"token punctuation\">.</span>GLOBAL_SCOPE<span class=\"token punctuation\">.</span>silent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            is_auto_scheduler_enabled<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> is_meta_schedule_enabled<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> old_autotvm_silent</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        mod_name <span class=\"token operator\">=</span> mangle_module_name<span class=\"token punctuation\">(</span>mod_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_build<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            target<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            target_host<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            runtime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            workspace_memory_pools<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            constant_memory_pools<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            mod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        autotvm<span class=\"token punctuation\">.</span>GLOBAL_SCOPE<span class=\"token punctuation\">.</span>silent <span class=\"token operator\">=</span> old_autotvm_silent</pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\"># Get artifacts</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        mod <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_module<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        params <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_params<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        executor_config <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_graph_json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> executor<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"graph\"</span> <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">return</span> executor_config<span class=\"token punctuation\">,</span> mod<span class=\"token punctuation\">,</span> params</pre></td></tr></table></figure><p><code>bld_mod</code>  是 Python 中的类 <code>BuildModule</code> ，在初始化的时候：<br>\n <code>self.mod = _build_module._BuildModule()</code>  将 <code>mod</code>  字段注册为 C++ 后端类 <code>RelayBuildModule</code> 。具体过程是先调用 C++ 的注册全局函数 <code>relay.build_module._BuildModule</code> ，随即调用 <code>RelayBuildModule</code>  类创建函数 <code>RelayBuildCreate</code> 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">TVM_REGISTER_GLOBAL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"relay.build_module._BuildModule\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set_body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token function\">RelayBuildCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> runtime<span class=\"token double-colon punctuation\">::</span>Module <span class=\"token function\">RelayBuildCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">auto</span> exec <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_object</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>RelayBuildModule<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Module</span><span class=\"token punctuation\">(</span>exec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>RelayBuildModule</code> Relay 模型创建类用于帮助创建 Relay IRModule。从下方 <code>RelayBuildModule</code>  类的具体内容中可以看到，该类的 <code>GetFunction()</code>  函数通过名字注册了许多函数，如 <code>get_graph_json</code> 、 <code>get_module</code> 、 <code>build</code>  等。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">RelayBuildModule</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">ModuleNode</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">RelayBuildModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  PackedFunc <span class=\"token function\">GetFunction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ObjectPtr<span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> sptr_to_self<span class=\"token punctuation\">)</span> <span class=\"token keyword\">final</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_graph_json\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">GetGraphJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_module\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">GetModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">ICHECK_EQ</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>num_args<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"list_params\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">ListParamNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_params\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">GetParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"set_params\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Constant<span class=\"token operator\">></span> params <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> kv <span class=\"token operator\">:</span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">SetParam</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> kv<span class=\"token punctuation\">.</span>second<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_devices\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">ListDevices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_irmodule\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetIRModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_external_modules\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetExternalModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_function_metadata\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetFunctionMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_executor_codegen_metadata\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetExecutorCodegenMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"optimize\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token function\">ICHECK_EQ</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>num_args<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">Optimize</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token function\">LOG</span><span class=\"token punctuation\">(</span>FATAL<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Unknown packed function: \"</span> <span class=\"token operator\">&lt;&lt;</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>再回到 Python 前端类 <code>BuildModule</code> 。</p>\n<p>在注册 <code>self.mod</code>  为 C<ins> 类 <code>RelayBuildModule</code>  后，又将 C</ins> 类 <code>RelayBuildModule</code>  的 <code>get_graph_json</code> 、 <code>get_module</code> 、 <code>build</code>  等功能函数一一赋给自身成员：即 <code>self._get_graph_json = self.mod[&quot;get_graph_json&quot;]</code> ， <code>self._get_module = self.mod[&quot;get_module&quot;]</code> 、 <code>self._build = self.mod[&quot;build&quot;]</code>  等。</p>\n<p>也就是说 C++ 类 <code>RelayBuildModule</code>  与 Python 前端类 <code>BuildModule</code>  功能一一对应，可以视为同一个类。</p>\n<h2 id=\"编译过程-bld_modbuild\"><a class=\"anchor\" href=\"#编译过程-bld_modbuild\">#</a> 编译过程   bld_mod.build ()</h2>\n<p><img loading=\"lazy\" data-src=\"1729165916609.jpg\" alt=\"总体流程图\"></p>\n<p>继续看 <code>relay.build()</code>  函数， <code>bld_mod.build()</code>  函数完成了 Relay IRModule 编译的绝大多数流程。</p>\n<p><code>bld_mod.build()</code>  函数以 Relay IRModule  <code>ir_mod</code>  为输入，输出 runtime::Module  <code>runtime_mod</code> 。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>graph_json<span class=\"token punctuation\">,</span> runtime_mod<span class=\"token punctuation\">,</span> params <span class=\"token operator\">=</span> bld_mod<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            mod<span class=\"token operator\">=</span>ir_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            target<span class=\"token operator\">=</span>raw_targets<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            executor<span class=\"token operator\">=</span>executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            runtime<span class=\"token operator\">=</span>runtime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            workspace_memory_pools<span class=\"token operator\">=</span>workspace_memory_pools<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            constant_memory_pools<span class=\"token operator\">=</span>constant_memory_pools<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            mod_name<span class=\"token operator\">=</span>mod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如前所述， <code>bld_mod.build()</code>  函数调用的就是 C++ 类 <code>RelayBuildModule</code>  的函数 <code>build</code> 。  <code>build</code>  流程包含了将 Relay IRModule 降级为低级中间表示 TIR，然后再转换为 Runtime::Module 的过程。</p>\n<p>后续文章《【TVM】通过代码学习编译流程【4~...】》将介绍 C++ 类 <code>RelayBuildModule</code>  的 <code>build</code>  流程。</p>\n<p>接下来的 <code>_executor_factory.GraphExecutorFactoryModule()</code>  构造函数将编译后的 runtime::Module  <code>runtime_mod</code>  封装成 <code>GraphExecutorFactory</code>  类。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>executor_factory <span class=\"token operator\">=</span> _executor_factory<span class=\"token punctuation\">.</span>GraphExecutorFactoryModule<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ir_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    raw_targets<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    graph_json<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    runtime_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    mod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    func_metadata<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>该函数的参数已经提到不少了，剩下的:</p>\n<p><code>graph_json</code> ：Relay IRModule 经降级后低级中间表示 TIR Module 对应的图结构，用 json 表示。下面截取一段展示：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"nodes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>    # 节点</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token property\">\"op\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span>  # 输入节点</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token property\">\"inputs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  # 输入节点没有其他输入</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token property\">\"op\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tvm_op\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tvmgen_default_fused_layout_transform\"</span><span class=\"token punctuation\">,</span>  # layout_transform节点</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token property\">\"attrs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>  # 属性</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token property\">\"num_outputs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token property\">\"num_inputs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token property\">\"flatten_data\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token property\">\"func_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tvmgen_default_fused_layout_transform\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token property\">\"src_layout\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NCHW\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token property\">\"dst_layout\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NCHW3c\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token property\">\"hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ba3dc2c95d3171fd\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token property\">\"inputs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>  # 以<span class=\"token number\">0</span>号节点data为输入</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p><code>func_metadata</code> ：函数的元数据信息，下面是打印的某个简单模型的元数据信息，包含 workspace_sizes、constant_sizes 等，tir_primfuncs 则是一系列降级后的低级中间表示 TIR 函数。</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"tvmgen_default_fused_layout_transform\"</span><span class=\"token operator\">:</span> FunctionInfoNode(</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>workspace_sizes=<span class=\"token punctuation\">&#123;</span>llvm -keys=cpu -mtriple=x86_64-pc-linux-gnu<span class=\"token operator\">:</span> <span class=\"token number\">602112</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  constant_sizes=<span class=\"token punctuation\">&#123;</span>llvm -keys=cpu -mtriple=x86_64-pc-linux-gnu<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  tir_primfuncs=<span class=\"token punctuation\">&#123;</span>llvm -keys=cpu -mtriple=x86_64-pc-linux-gnu<span class=\"token operator\">:</span>  <span class=\"token punctuation\">[</span>一系列 @T.prim_func<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>)<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>_executor_factory.GraphExecutorFactoryModule()</code>  类构造函数如下所示。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GraphExecutorFactoryModule</span><span class=\"token punctuation\">(</span>ExecutorFactoryModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Graph executor factory module.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    This is a module of graph executor factory</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \"\"\"</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ir_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        target<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        graph_json_str<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        libmod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        libmod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        function_metadata<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">assert</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>graph_json_str<span class=\"token punctuation\">,</span> string_types<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        fcreate <span class=\"token operator\">=</span> get_global_func<span class=\"token punctuation\">(</span><span class=\"token string\">\"tvm.graph_executor_factory.create\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> params<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            args<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            args<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ndarray<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        self<span class=\"token punctuation\">.</span>ir_mod <span class=\"token operator\">=</span> ir_mod</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        self<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> target</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        self<span class=\"token punctuation\">.</span>executor <span class=\"token operator\">=</span> executor</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        self<span class=\"token punctuation\">.</span>module <span class=\"token operator\">=</span> fcreate<span class=\"token punctuation\">(</span>graph_json_str<span class=\"token punctuation\">,</span> libmod<span class=\"token punctuation\">,</span> libmod_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        self<span class=\"token punctuation\">.</span>graph_json <span class=\"token operator\">=</span> graph_json_str</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        self<span class=\"token punctuation\">.</span>lib <span class=\"token operator\">=</span> libmod</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        self<span class=\"token punctuation\">.</span>libmod_name <span class=\"token operator\">=</span> libmod_name</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        self<span class=\"token punctuation\">.</span>params <span class=\"token operator\">=</span> params</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        self<span class=\"token punctuation\">.</span>iter_cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        self<span class=\"token punctuation\">.</span>function_metadata <span class=\"token operator\">=</span> function_metadata</pre></td></tr></table></figure><p>通过 <code>get_global_func(&quot;tvm.graph_executor_factory.create&quot;)</code>  获取全局函数 —— <code>GraphExecutorFactory</code>  的构造函数 <code>fcreate</code> ，并执行，将其复制给 <code>self.module</code>  字段。</p>\n<p>在 <code>src/runtime/graph_executor/graph_executor_factory.cc</code>  路径下可以找到注册的 C++ 全局函数 <code>TVM_REGISTER_GLOBAL(&quot;tvm.graph_executor_factory.create&quot;)</code> ，如下面所示。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">TVM_REGISTER_GLOBAL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tvm.graph_executor_factory.create\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">set_body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span>NDArray<span class=\"token operator\">></span> params<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>size_t<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>string name <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">operator</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        params<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">operator</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">NDArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">auto</span> exec <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_object</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>GraphExecutorFactory<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      exec<span class=\"token operator\">-></span><span class=\"token function\">Import</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token function\">Module</span><span class=\"token punctuation\">(</span>exec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中 <code> make_object&lt;GraphExecutorFactory&gt;</code>  构建了 <code>GraphExecutorFactory</code>  类，并将 <code>args[1]</code>  注册到该类的 <code>std::vector&lt;Module&gt; imports_;</code>  字段底下。该字段存储当前模型所依赖的其他 runtime::Module，而 <code>args[1]</code>  指的是 <code>fcreate(graph_json_str, libmod, libmod_name, *args)</code>  函数的 <code>libmod</code>  参数，即前述 runtime::Module  <code>runtime_mod</code> 。</p>\n<p>所以  <code>GraphExecutorFactory</code>  类 依赖于 Relay IRModule 经【relay -&gt; tir】【tir -&gt; runtime】过程得到的  <code>runtime_mod</code> 。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "tvm",
                "compile"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/10/13/tvm02/",
            "url": "https://forcheetah.github.io/2024/10/13/tvm02/",
            "title": "【TVM】通过代码学习编译流程【2】模型转换",
            "date_published": "2024-10-13T12:29:30.047Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本系列文章将从代码和流程图入手，详细介绍 TVM AI 编译器的编译流程。本文章为第二篇，对应的 TVM 版本为当前最新版本 1.7。</p>\n<p>网络上有不少 TVM 工程的教程资源，如果本博客也是其他教程的简单重复的话，则网络的角落里又多了一份纯粹的空间占用者。所以我在想，本文章有什么特点才值得一看呢？我觉得有两个优点: 1、本文从代码出发，不会泛泛而谈，能够从细节了解 TVM；2、自认为结构流程图画的不错，能够从整体上把握 TVM 的脉络。所以，也许值得一看呢。</p>\n<p>本篇文章以 onnx 为例，介绍主流模型转换为 TVM 高级中间表示 Relay IR 的过程。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"onnx结构\"><a class=\"anchor\" href=\"#onnx结构\">#</a> Onnx 结构</h1>\n<p>先来了解一下 onnx 模型的结构信息：下图是一个简单的 onnx 模型的结构（只选取了代表性的一部分）</p>\n<p>全局信息：  版本信息： <code>ir_version: 7</code>  ； 来源： <code>producer_name: &quot;pytorch&quot;</code>    来源版本 ： <code>producer_version: &quot;2.1.0&quot;</code> <br>\n 图信息：包含在 graph 字段中。</p>\n<ul>\n<li>节点信息 node：指明输入 input 输出 output 张量，本身的名字 name，节点类型 type，参数信息 attribute</li>\n<li>张量信息 initializer：维度 dims，类型信息 data_type，名字 name，具体数值 raw_data。</li>\n<li>输入张量 input</li>\n<li>输出张量 output</li>\n</ul>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ir_version<span class=\"token operator\">:</span> <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>producer_name<span class=\"token operator\">:</span> <span class=\"token string\">\"pytorch\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>producer_version<span class=\"token operator\">:</span> <span class=\"token string\">\"2.1.0\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>graph <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  node <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    input<span class=\"token operator\">:</span> <span class=\"token string\">\"start\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    input<span class=\"token operator\">:</span> <span class=\"token string\">\"onnx::Conv_28\"</span>    # kernal</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    input<span class=\"token operator\">:</span> <span class=\"token string\">\"onnx::Conv_29\"</span>    # bias</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    output<span class=\"token operator\">:</span> <span class=\"token string\">\"/conv1/Conv_output_0\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"/conv1/Conv\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    op_type<span class=\"token operator\">:</span> <span class=\"token string\">\"Conv\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    attribute <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"dilations\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      type<span class=\"token operator\">:</span> INTS</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    attribute <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"group\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      i<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      type<span class=\"token operator\">:</span> INT</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    attribute <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"kernel_shape\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      type<span class=\"token operator\">:</span> INTS</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    attribute <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"pads\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      type<span class=\"token operator\">:</span> INTS</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  node <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    input<span class=\"token operator\">:</span> <span class=\"token string\">\"/conv1/Conv_output_0\"</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    output<span class=\"token operator\">:</span> <span class=\"token string\">\"/relu1/Relu_output_0\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"/relu1/Relu\"</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    op_type<span class=\"token operator\">:</span> <span class=\"token string\">\"Relu\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  initializer <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    dims<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    dims<span class=\"token operator\">:</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    data_type<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"fc.weight\"</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    raw_data<span class=\"token operator\">:</span> <span class=\"token string\">\"]&amp;\\212>`\\201\\213\\274@\\227\\224\\275\\274\\331p\\276b@N>\\017\\305\\223>&amp;&amp;\\263\\276(UD=\\300\\257q\\275\\320\\231\\246\\275\\320\\341\\276=\\372\\273&#125;>C\\226\\236> e)\\275\\357\\222\\236>\\212\\\\8>\"</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  initializer <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    dims<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    data_type<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"fc.bias\"</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    raw_data<span class=\"token operator\">:</span> <span class=\"token string\">\"\\3451\\232\\276\\200\\247(=\"</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  input <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"start\"</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    type <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      tensor_type <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        elem_type<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        shape <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  output <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"end\"</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    type <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      tensor_type <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        elem_type<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        shape <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>opset_import <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  version<span class=\"token operator\">:</span> <span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"python脚本\"><a class=\"anchor\" href=\"#python脚本\">#</a> Python 脚本</h1>\n<p>这里提供一个简单的 Python 脚本，调用 TVM Python 前端，实现 onnx 模型的编译过程。tvm 通过代码学习编程流程系列文章将基本采用这个脚本帮助追踪代码。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> onnx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> tvm<span class=\"token punctuation\">.</span>relay <span class=\"token keyword\">as</span> relay</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> tvm</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> tvm<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> graph_executor</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">######################################    路径信息    ##########################################</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>model_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/resnet18.onnx\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>save_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/pythonSave/\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>onnx_model <span class=\"token operator\">=</span> onnx<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>model_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">##################################    图片信息    ##############################################</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>img_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/.tvm_test_data/data/imagenet_cat.png\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Resize it to 224x224</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>resized_image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>img_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>asarray<span class=\"token punctuation\">(</span>resized_image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># Our input image is in HWC layout while ONNX expects CHW input, so convert the array</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>img_data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Normalize according to the ImageNet input specification</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>imagenet_mean <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.485</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.406</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>imagenet_stddev <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.229</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.225</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>norm_img_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>img_data <span class=\"token operator\">/</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> imagenet_mean<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> imagenet_stddev</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># Add the batch dimension, as we are expecting 4-dimensional input: NCHW.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>norm_img_data<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">####################################     模型编译     ###########################################</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>input_name <span class=\"token operator\">=</span> <span class=\"token string\">\"data\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>target <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>Target<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>shape_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>input_name<span class=\"token punctuation\">:</span> img_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>mod<span class=\"token punctuation\">,</span> params <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>frontend<span class=\"token punctuation\">.</span>from_onnx<span class=\"token punctuation\">(</span>onnx_model<span class=\"token punctuation\">,</span> shape_dict<span class=\"token punctuation\">,</span> export_node_renamed_model_path<span class=\"token operator\">=</span>save_path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建 IRModule  高级 Relay IR</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">with</span> tvm<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>PassContext<span class=\"token punctuation\">(</span>opt_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    lib <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> target<span class=\"token operator\">=</span>target<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 创建 GraphExecutorFactoryModule  </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#######################################     模型保存      ########################################</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># save</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># 保存编译后的库文件（.so）</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>lib_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.so\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>lib<span class=\"token punctuation\">.</span>get_lib<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>export_library<span class=\"token punctuation\">(</span>lib_fname<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># 保存模型参数（.params）</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>params_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.params\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>params_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> param_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    param_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>relay<span class=\"token punctuation\">.</span>save_param_dict<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_params<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># 保存 JSON 格式的计算图（.json）</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>json_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.json\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>json_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> json_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    json_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_executor_config<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>dev <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>module <span class=\"token operator\">=</span> graph_executor<span class=\"token punctuation\">.</span>GraphModule<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">[</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># graph_executor.GraphModule</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">############################       运行    ##########################################</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>module<span class=\"token punctuation\">.</span>set_input<span class=\"token punctuation\">(</span>input_name<span class=\"token punctuation\">,</span> img_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>module<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>output_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>tvm_output <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>get_output<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tvm_output<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这段代码实现了一个 onnx 格式的 resnet18 模型进行：模型编译、模型保存、模型推理运行的过程。本篇文章介绍模型编译过程中的模型转换部分，也就是 <code>relay.frontend.from_onnx</code>  函数，它将 onnx 模型转化为 TVM 的高级 IR：Relay IR。<br>\n下图是 <code>relay.frontend.from_onnx</code>  函数整体结构流程图，在后面的详细介绍中会截取部分进行展示。</p>\n<p><img loading=\"lazy\" data-src=\"1728821938299.jpg\" alt=\"总体流程图\"></p>\n<h1 id=\"模型转换流程\"><a class=\"anchor\" href=\"#模型转换流程\">#</a> 模型转换流程</h1>\n<p><img loading=\"lazy\" data-src=\"1728822135202.jpg\" alt=\"分图\"></p>\n<p><code>mod, params = relay.frontend.from_onnx(onnx_model, shape_dict)</code>  函数将一个 onnx model 转换成对等的 Relay module。</p>\n<p>首先看下这个函数的参数：</p>\n<p>其中 <code>freeze_params</code>  参数为布尔类型，当为 true 的时候，神经网络模型中的 weight 和 bias 以及 shape 等 Tensor 会被固化到 TVM 将要转换的 IRModule 模型当中，作为 Constants，这种情况下 TVM 的优化可以更加激进， <code>from_onnx()</code>  函数返回的 params 字典不再需要保存这些参数（为空）；当为 False 的时候，weight 和 bias 以及 shape 等 Tensor 会作为变量 variables，后续过程中可以修改、替换这些 tensor，这些 Tensor 会收集起来从 params 字典中返回。 因此建议该参数定为 True。</p>\n<p><code>export_node_renamed_model_path</code>  参数为字符串，因为有时输入模型的节点缺少 name，TVM 会生成新的节点名字，并将更改节点名字的 onnx 模型输出出来。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">from_onnx</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    model<span class=\"token punctuation\">,</span>          <span class=\"token comment\"># onnx 模型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    shape<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\"># 输入 Tensor 的 shape</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    dtype<span class=\"token operator\">=</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># 输入 Tensor 的 type</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    opset<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># onnx 版本</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    freeze_params<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    convert_config<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    export_node_renamed_model_path<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p><code>from_onnx()</code>  函数完成了输入模型的检查校验，之后的关键代码为 <code>mod, params = g.from_onnx(graph, opset)</code>  ，也就是结构流程图中的 <code>GraphProto.from_onnx()</code> 。</p>\n<p><code>GraphProto.from_onnx()</code>  函数具体的完成了 onnx 模型转 Relay IRModule 的过程。过程看下方代码。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">from_onnx</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">,</span> opset<span class=\"token punctuation\">,</span> get_output_expr<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        self<span class=\"token punctuation\">.</span>opset <span class=\"token operator\">=</span> opset</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_parse_graph_initializers<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_parse_graph_input<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_check_user_inputs_in_outermost_graph_scope<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_check_for_unsupported_ops<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_construct_nodes<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># now return the outputs</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>_parse_value_proto<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        outputs <span class=\"token operator\">=</span> outputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> _expr<span class=\"token punctuation\">.</span>Tuple<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> get_output_expr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> outputs</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        free_vars <span class=\"token operator\">=</span> analysis<span class=\"token punctuation\">.</span>free_vars<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        nodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>v<span class=\"token punctuation\">:</span> k <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        free_vars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>nodes<span class=\"token punctuation\">[</span>var<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> var <span class=\"token keyword\">in</span> free_vars<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> i_name <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            i_name <span class=\"token keyword\">in</span> free_vars <span class=\"token keyword\">and</span> i_name <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_inputs<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                self<span class=\"token punctuation\">.</span>_inputs<span class=\"token punctuation\">[</span>i_name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>i_name<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\"># Create a function from our output expression and all input variables.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        func <span class=\"token operator\">=</span> _function<span class=\"token punctuation\">.</span>Function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>v <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_inputs<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> IRModule<span class=\"token punctuation\">.</span>from_expr<span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_params</pre></td></tr></table></figure><p><code>self._parse_graph_initializers(graph)</code>  函数将 onnx 模型中的 tensor 转换为 constant 节点，装进字典 node 中。代码中 <code>_expr.const(array)</code>  一路调用 <code>Constant()</code> ， <code>_ffi_api.Constant</code> ，将 tensor 转换为 C++ 后端中的 <code>Constant</code>  类。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">_parse_graph_initializers</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Parse network inputs to relay, aka parameters.\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> init_tensor <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">.</span>initializer<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Tensor's name is required.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        array <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_parse_array<span class=\"token punctuation\">(</span>init_tensor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>_freeze_params<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _expr<span class=\"token punctuation\">.</span>const<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">[</span>init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new_var<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                shape<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">[</span>init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                dtype<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">[</span>init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>self._parse_graph_input(graph)</code>  函数作用是指定图的输入节点。</p>\n<p><code>self._check_user_inputs_in_outermost_graph_scope()</code>  函数用来检查 shape 定义的 tensor 都已经声明。</p>\n<p><code>self._check_for_unsupported_ops(graph)</code>  函数检查所有的算子是否位于支持列表中。</p>\n<p><code>self._construct_nodes(graph)</code>  函数不仅将 onnx 节点转换乘 tvm 算子，还在遍历节点的过程中生成 tvm 抽象语法树。下面是函数具体过程：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">_construct_nodes</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Nodes are stored as directed acyclic graph.\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        op_name <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>op_type</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        attr <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_parse_attr<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>attribute<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># Fill in span of inputs</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        node_source_name <span class=\"token operator\">=</span> get_source_name<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_op_type_dict<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_set_parameter_span<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> node_source_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># Create and populate input list.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        inputs <span class=\"token operator\">=</span> onnx_input<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> i <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                inputs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>_renames<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                inputs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        i_name <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_parse_value_proto<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        node_output <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_fix_outputs<span class=\"token punctuation\">(</span>op_name<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"tvm_custom\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"tvm_custom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i_name</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"tvm_custom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"num_outputs\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        op <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_convert_operator<span class=\"token punctuation\">(</span>op_name<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>opset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span> _expr<span class=\"token punctuation\">.</span>TupleWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            outputs_num <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            outputs_num <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> outputs_num <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            op <span class=\"token operator\">=</span> fold_constant<span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            op <span class=\"token operator\">=</span> _expr<span class=\"token punctuation\">.</span>TupleWrapper<span class=\"token punctuation\">(</span>fold_constant<span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">.</span>astuple<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        op <span class=\"token operator\">=</span> set_span<span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span> node_source_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> outputs_num <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\"># ONNX supports optional outputs for some nodes.</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\"># This block searches for missing outputs in the ONNX graph</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\"># and removes any unneeded ops</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            valid_outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> outputs_num</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> output <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token keyword\">if</span> output <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    valid_outputs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\"># If we have outputs ONNX isn't expecting, we need to drop them</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>valid_outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                tup <span class=\"token operator\">=</span> op<span class=\"token punctuation\">.</span>astuple<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token comment\"># TupleWrapper can also wrap ops with TupleType outputs</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>tup<span class=\"token punctuation\">,</span> _expr<span class=\"token punctuation\">.</span>Tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token comment\"># For tuples, we extract the fields instead of using GetTupleItem</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>tup<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> valid <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>valid_outputs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> valid<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token comment\"># For call nodes, we need to GetTupleItem</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>op<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> valid <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>valid_outputs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> valid<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token comment\"># Create the new op with valid outputs</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    op <span class=\"token operator\">=</span> outputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token keyword\">elif</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> outputs_num<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    op <span class=\"token operator\">=</span> _expr<span class=\"token punctuation\">.</span>TupleWrapper<span class=\"token punctuation\">(</span>_expr<span class=\"token punctuation\">.</span>Tuple<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token comment\"># Drop invalid outputs for the onnx node</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                outputs_num <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                node_output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>output <span class=\"token keyword\">for</span> output <span class=\"token keyword\">in</span> node_output <span class=\"token keyword\">if</span> output <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">assert</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> outputs_num</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Number of output mismatch </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> vs </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>outputs_num<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> in </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>op_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">if</span> outputs_num <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>node_output<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> op</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> op<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>从 <code>self._construct_nodes(graph)</code>  函数代码中可以看到，首先遍历所有图节点 <code>node</code> ，通过 <code>self._parse_attr()</code>  函数将节点的所有属性信息构造为 tvm 的 attr 算子，再根据算子类型 <code>op_name</code> 、输入 <code>inputs</code> , 和属性 <code>attr</code> ，通过函数 <code>self._convert_operator(op_name, inputs, attr, self.opset)</code>  创建 tvm 算子。这个过程中自然形成了 tvm 的抽象语法树，构造了所有算子的连接关系。其中还有一些细节：比如当一个算子的输出 tensor 有多个时，会在该算子后面添加一个元组算子 <code>_expr.TupleWrapper()</code> .</p>\n<p><img loading=\"lazy\" data-src=\"1728822347896.jpg\" alt=\"子图2\"></p>\n<p>我们着重看一下函数 <code>self._convert_operator()</code> ，也就是算子转换函数。它将卷积、池化、全链接等这些算子包装为 tvm 中的一个 <code>CallNode</code>  算子。参数 <code>op_name</code>  指明算子的类型，如 Convolution, FullyConnected， <code>inputs</code>  是前述存储在 <code>self._nodes</code>  字典中其他算子， <code>attrs</code>  是前述刚转换的属性， <code>Opset</code>  是 onnx 算子版本号。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">_convert_operator</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> op_name<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">,</span> opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Convert ONNX operator into a Relay operator.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    The converter must specify conversions explicitly for incompatible name, and</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    apply handlers to operator attributes.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Parameters</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ----------</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    op_name : str</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        Operator name, such as Convolution, FullyConnected</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    inputs : list of tvm.relay.function.Function</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        List of inputs.</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    attrs : dict</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        Dict of operator attributes</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    opset : int</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        Opset version</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Returns</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    -------</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    sym : tvm.relay.function.Function</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        Converted relay function</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    \"\"\"</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    convert_map <span class=\"token operator\">=</span> _get_convert_map<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> op_name <span class=\"token keyword\">in</span> _identity_list<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        sym <span class=\"token operator\">=</span> get_relay_op<span class=\"token punctuation\">(</span>op_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>inputs<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>attrs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">elif</span> op_name <span class=\"token keyword\">in</span> convert_map<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        sym <span class=\"token operator\">=</span> convert_map<span class=\"token punctuation\">[</span>op_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">raise</span> NotImplementedError<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Operator </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>op_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> not implemented.\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> sym</pre></td></tr></table></figure><p>通过 <code>_get_convert_map()</code>  函数获取转换字典，我们截取该函数部分内容。以卷积为例，CONV 算子通过 <code>Conv.get_converter(opset)</code>  函数获取卷积的转换函数。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">_get_convert_map</span><span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\"># defs/experimental</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"Identity\"</span><span class=\"token punctuation\">:</span> Renamer<span class=\"token punctuation\">(</span><span class=\"token string\">\"copy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"Optional\"</span><span class=\"token punctuation\">:</span> Optional_<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">\"OptionalHasElement\"</span><span class=\"token punctuation\">:</span> OptionalHasElement<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">\"OptionalGetElement\"</span><span class=\"token punctuation\">:</span> OptionalGetElement<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"Affine\"</span><span class=\"token punctuation\">:</span> Affine<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># Bitwise operators</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\"BitShift\"</span><span class=\"token punctuation\">:</span> BitShift<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"BitwiseAnd\"</span><span class=\"token punctuation\">:</span> BitwiseAnd<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">\"BitwiseNot\"</span><span class=\"token punctuation\">:</span> BitwiseNot<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">\"BitwiseOr\"</span><span class=\"token punctuation\">:</span> BitwiseOr<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token string\">\"BitwiseXor\"</span><span class=\"token punctuation\">:</span> BitwiseXor<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token string\">\"ThresholdedRelu\"</span><span class=\"token punctuation\">:</span> ThresholdedRelu<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token string\">\"ScaledTanh\"</span><span class=\"token punctuation\">:</span> ScaledTanh<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token string\">\"AveragePool\"</span><span class=\"token punctuation\">:</span> AveragePool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token string\">\"LpPool\"</span><span class=\"token punctuation\">:</span> LpPool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token string\">\"GlobalLpPool\"</span><span class=\"token punctuation\">:</span> GlobalLpPool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token string\">\"MaxPool\"</span><span class=\"token punctuation\">:</span> MaxPool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token string\">\"MaxUnpool\"</span><span class=\"token punctuation\">:</span> MaxUnpool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token string\">\"Conv\"</span><span class=\"token punctuation\">:</span> Conv<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token string\">\"ConvTranspose\"</span><span class=\"token punctuation\">:</span> ConvTranspose<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token string\">\"GlobalAveragePool\"</span><span class=\"token punctuation\">:</span> GlobalAveragePool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token string\">\"GlobalMaxPool\"</span><span class=\"token punctuation\">:</span> GlobalMaxPool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>TVM 先尝试从 <code>_identity_list:</code>  列表中获取转换方法，开发这如果需要添加自定义算子，可以考虑在该列表中添加，当前我们不用考虑这个列表。之后 TVM 从获取转换方法并执行 <code>convert_map[op_name](inputs, attrs, self._params)</code> ，仍然以卷积为例，执行的是下面类 <code>class Conv(OnnxOpConverter)</code>  中的 <code>def _impl_v1(cls, inputs, attr, params)</code>  方法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Conv</span><span class=\"token punctuation\">(</span>OnnxOpConverter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Operator converter for Conv.\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">_impl_v1</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># Use shape of input to determine convolution type.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        data <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        kernel <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        input_shape <span class=\"token operator\">=</span> infer_shape<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        ndim <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        kernel_type <span class=\"token operator\">=</span> infer_type<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        kernel_shapes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>get_const_tuple<span class=\"token punctuation\">(</span>kernel_type<span class=\"token punctuation\">.</span>checked_type<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token string\">\"kernel_shape\"</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> attr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"kernel_shape\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> kernel_shapes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token string\">\"auto_pad\"</span> <span class=\"token keyword\">in</span> attr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"SAME_UPPER\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SAME_LOWER\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\"># Warning: Convolution does not yet support dynamic shapes,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\"># one will need to run dynamic_to_static on this model after import</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                data <span class=\"token operator\">=</span> autopad<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    attr<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"strides\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>ndim <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"kernel_shape\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    attr<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"dilations\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>ndim <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    mode<span class=\"token operator\">=</span>attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">elif</span> attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"VALID\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"pads\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>ndim <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">elif</span> attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"NOTSET\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                msg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token string-interpolation\"><span class=\"token string\">f'Value </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> in attribute \"auto_pad\" of operator Conv '</span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token string-interpolation\"><span class=\"token string\">f\"is invalid.\"</span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">raise</span> tvm<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">.</span>OpAttributeInvalid<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            attr<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"channels\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> kernel_shapes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        out <span class=\"token operator\">=</span> AttrCvt<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            op_name<span class=\"token operator\">=</span>dimension_picker<span class=\"token punctuation\">(</span><span class=\"token string\">\"conv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            transforms<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token string\">\"kernel_shape\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"kernel_size\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token string\">\"dilations\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"dilation\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token string\">\"pads\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"padding\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token string\">\"group\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"groups\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            custom_check<span class=\"token operator\">=</span>dimension_constraint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        use_bias <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">if</span> use_bias<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            out <span class=\"token operator\">=</span> _op<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>bias_add<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> out</pre></td></tr></table></figure><p>其中 <code>AttrCvt()</code>  函数经过多层调用（见结构流程图），最终调用了 C++ 后端通过 <code>TVM_REGISTER_GLOBAL(&quot;relay.op.nn._make.conv2d&quot;)</code>  注册的 <code>MakeConv&lt;Conv2DAttrs&gt;()</code>  函数，该函数创建一个包含卷积所有信息的 <code>CallNode</code>  算子，见下面代码 <code>return Call(op, &#123;data, weight&#125;, Attrs(attrs), &#123;&#125;);</code> ，该函数位于 <code>/home/xianmu/CProject/tvm/src/relay/op/nn/convolution_make.h</code> 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">inline</span> Expr <span class=\"token function\">MakeConv</span><span class=\"token punctuation\">(</span>Expr data<span class=\"token punctuation\">,</span> Expr weight<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>IndexExpr<span class=\"token operator\">></span> strides<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>IndexExpr<span class=\"token operator\">></span> padding<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                     Array<span class=\"token operator\">&lt;</span>IndexExpr<span class=\"token operator\">></span> dilation<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> groups<span class=\"token punctuation\">,</span> IndexExpr channels<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                     Array<span class=\"token operator\">&lt;</span>IndexExpr<span class=\"token operator\">></span> kernel_size<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string data_layout<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                     std<span class=\"token double-colon punctuation\">::</span>string kernel_layout<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string out_layout<span class=\"token punctuation\">,</span> DataType out_dtype<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                     std<span class=\"token double-colon punctuation\">::</span>string op_name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">auto</span> attrs <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_object</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  attrs<span class=\"token operator\">-></span>strides <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>strides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  attrs<span class=\"token operator\">-></span>padding <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>padding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  attrs<span class=\"token operator\">-></span>dilation <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>dilation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  attrs<span class=\"token operator\">-></span>groups <span class=\"token operator\">=</span> groups<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  attrs<span class=\"token operator\">-></span>channels <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  attrs<span class=\"token operator\">-></span>kernel_size <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>kernel_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  attrs<span class=\"token operator\">-></span>data_layout <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>data_layout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  attrs<span class=\"token operator\">-></span>kernel_layout <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>kernel_layout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  attrs<span class=\"token operator\">-></span>out_layout <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>out_layout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  attrs<span class=\"token operator\">-></span>out_dtype <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>out_dtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">const</span> Op<span class=\"token operator\">&amp;</span> op <span class=\"token operator\">=</span> <span class=\"token class-name\">Op</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>op_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">Call</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Attrs</span><span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"1728822492980.jpg\" alt=\"子图3\"></p>\n<p>到这里模型拓扑结构就算建立完成了。让我们再回到 <code>GraphProto.from_onnx()</code>  函数。前述过程就像是搭积木，搭完这个拓扑结构之后，调用函数 <code>_function.Function([v for k, v in self._inputs.items()], outputs)</code>  将图结构封装成 <code>tvm.relay.Function</code>  表达式，位于 <code>/home/xianmu/CProject/tvm/include/tvm/relay/function.h</code> 。 <code>tvm.relay.Function</code>  是一个有输入输出的表达式集合。</p>\n<p>最后一步，通过 <code>IRModule.from_expr(func)</code>  函数，创建 tvm 高级 IR：Relay IRModule。整个调用过程在结构流程图中给出。下面是类  <code>IRModule</code>  的属性信息， <code>tvm.relay.Function</code>  就存储在 <code>IRModuleNode</code>  的 <code>Map&lt;GlobalVar, BaseFunc&gt; functions;</code>  字段下。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">IRModuleNode</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">/*! \\brief A map from ids to all global functions. */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span>GlobalVar<span class=\"token punctuation\">,</span> BaseFunc<span class=\"token operator\">></span> functions<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">/*! \\brief A map from global type vars to ADT type data. */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span>GlobalTypeVar<span class=\"token punctuation\">,</span> TypeData<span class=\"token operator\">></span> type_definitions<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">/*! \\brief The source map for the module. */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  SourceMap source_map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">/* \\brief Additional attributes storing meta-data about the module. */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  DictAttrs attrs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">/*! \\brief Globally static object that are referred by the IR itself */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>GlobalInfo<span class=\"token operator\">>></span> global_infos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">/*!</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   * \\brief A map from string names to global variables that</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   * ensures global uniqueness.</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   */</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> GlobalVar<span class=\"token operator\">></span> global_var_map_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">/*! \\brief A map from string names to global type variables (ADT names)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   * that ensures global uniqueness.</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   */</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> GlobalTypeVar<span class=\"token operator\">></span> global_type_var_map_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">/*! \\brief A map from constructor tags to constructor objects</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   * for convenient access</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   */</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int32_t</span><span class=\"token punctuation\">,</span> Constructor<span class=\"token operator\">></span> constructor_tag_map_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">/*! \\brief The files previously imported, required to ensure</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      importing is idempotent for each module.</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   */</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unordered_set<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> import_set_<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>到此，tvm 的 <code>relay.frontend.from_onnx(onnx_model, shape_dict)</code>  函数已经介绍完毕，它将一个 onnx model 转换成对等的 Relay module。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "tvm",
                "compile"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/10/10/tvm01/",
            "url": "https://forcheetah.github.io/2024/10/10/tvm01/",
            "title": "【TVM】通过代码学习编译流程【1】必要知识",
            "date_published": "2024-10-10T12:12:43.910Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本系列文章将从代码和流程图入手，详细介绍 TVM AI 编译器的编译流程。本文章为第一篇，取名为 “必要知识”，约等于 “大杂烩”。食之无味，弃之可惜。但基于我个人的主观喜好和偏见，这些知识值得在整个代码讲解之前声明。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"工程结构\"><a class=\"anchor\" href=\"#工程结构\">#</a> 工程结构</h1>\n<p><a href=\"https://github.com/apache/tvm\">TVM</a> 主要由 C++ 语言和 Python 语言实现。</p>\n<ul>\n<li>\n<p>a.TVM C++ 后端核心代码   位于 /home/user/tvm/src<br>\nC++ 后端核心代码的功能是生成 <a href=\"http://libtvm.so\">libtvm.so</a> libtvm_runtime.so，分别是模型编译过程中的需要的 libtvm.so 库，和模型部署运行时需要的 libtvm_runtime.so 库。对应的头文件位于 /home/user/tvm/include.</p>\n<ul>\n<li>1. 其中 src/runtime 是模型部署相关 CPP 文件\n<ul>\n<li>src/runtime/graph_executor   最基本的图执行器</li>\n<li>src/runtime/module.cpp          运行时 Module 基类</li>\n<li>src/runtime/contrib                  BYOC 第三方设备运行及实现  包括 dnnl cblas cudnn ethosu 等等</li>\n<li>srd/runtime/cuda                    CUDA 运行时 Module</li>\n<li>还有其他设备的运行时 Module  如 opencl  hexagon   metal 等，以及一些接口文件</li>\n</ul>\n</li>\n<li>2.src/relay 是 TVM 高级中间表示 IR 的相关 CPP 文件</li>\n<li>3.src/relax TVM 正在发展的高级中间表示 IR，功能上等同于 Relay</li>\n<li>4.src/te      TVM 的 TE 表达式</li>\n<li>5.src/topi   算子的计算定义和后端调度</li>\n<li>6.src/tir      TVM 低级中介表示 IR，接近于硬件表示</li>\n<li>7.src/auto_shedule  TVM 自动优化调度相关</li>\n</ul>\n</li>\n<li>\n<p>b. TVM Python 前端代码      位于 /home/user/tvm/python<br>\nPython 前端代码为 C++ API 和执行编译的驱动代码，提供 Python 绑定。</p>\n</li>\n</ul>\n<p>表面上看 TVM 工程应当是 Python 前端调用 C++ 后端生成的 <a href=\"http://libtvm.so\">libtvm.so</a> libtvm_runtime.so ，实际上 TVM 支持 Python 和 C++ 的相互调用。例如一些算子的 compute 计算公式和 schedule 调度位于 Python 代码中，由 C++ 进行调用。</p>\n<p>在编译阶段，开发者编写 Python 代码，调用 TVM Python 前端，而 TVM 的 Python 前端又依赖于 C++ 后端生成的 libtvm.so libtvm_runtime.so 动态库。</p>\n<p>部署运行阶段即可以编写 Python 来执行，也可以直接编译 C++ 为可执行文件，参考<a href=\"https://github.com/ForCheetah/TvmCppDeploy\"> TVM C++ 部署</a></p>\n<h1 id=\"编译\"><a class=\"anchor\" href=\"#编译\">#</a> 编译</h1>\n<p>编译过程可以参考 TVM 英文文档和中文文档。文档中内容全面，这里只摘必要步骤，是最简单的部署安装方式。</p>\n<p>1. 编译 <a href=\"http://libtvm.so\">libtvm.so</a> libtvm_runtime.so</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build  <span class=\"token comment\"># 下载工程后进入工程目录 创新文件夹</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cp</span> cmake/config.cmake ./build</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># 将 cmake 配置文件拷贝到 build 目录，可以更改需要的额配置选项</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token parameter variable\">-j32</span></pre></td></tr></table></figure><p>2. 配置临时运行环境</p>\n<p>个人喜欢用临时环境运行项目，可以避免 .bashrc 文件中添加过多环境路径；特别是开发人员有多个 TVM 项目的时候，可以避免项目的混淆。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 指定 tvm 库路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/home/user/tvm/build:<span class=\"token environment constant\">$PATH</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 指定 tvm Python 路径</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">PYTHONPATH</span><span class=\"token operator\">=</span>/home/user/tvm/python:<span class=\"token variable\">$&#123;PYTHONPATH&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 运行</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>python3 ***.py</pre></td></tr></table></figure><h1 id=\"tvm-基类\"><a class=\"anchor\" href=\"#tvm-基类\">#</a> TVM 基类</h1>\n<p>大概从事工程项目开发的人员对 Object, ObjectPtr, ObjectRef 等写法相对熟悉，但是没有相关经验的算法研究人员，还是先认识一下 TVM 中的这三个基类。</p>\n<p>TVM 中大部分类都继承自三大基础类   Object, ObjectPtr, ObjectRef。想多了解一下的话，可以学习博客<a href=\"https://zhuanlan.zhihu.com/p/656435385\"> TVM: Object, ObjectPtr, ObjectRef (以 tir.sch 为例)</a> 。</p>\n<p>可能比较粗显的总结一下：TVM 中以 &quot;Node&quot; 结尾的类是 Object 的派生类，去掉 &quot;Node&quot; 的类是 ObjectRef 的派生类，Object 的派生类负责 &quot;做事&quot;，ObjectRef 的派生类方便程序员引用，ObjectPtr 是桥梁。但总之这三者是一个东西（刚学时我就被这搞晕了：(  ）。</p>\n<p>举例说明如何使用 TVM 的三大基础类构造对象:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Anode</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Object</span></span><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">Anode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">~</span><span class=\"token function\">Anode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token string\">\"instance\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">ObjectRef</span></span><span class=\"token punctuation\">&#123;</span>       </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">TVM_DEFINE_MUTABLE_OBJECT_REF_METHODS</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span>ObjectRef<span class=\"token punctuation\">,</span> Anode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span>ObjectPtr<span class=\"token operator\">&lt;</span>Anode<span class=\"token operator\">></span> n <span class=\"token operator\">=</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_object</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Anode<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 桥梁 Ptr = make_object (本体 node)    </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   A <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指针</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   ref<span class=\"token operator\">-></span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// Anode 指针，可以引用 a ()</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token comment\">//ref.get ()->a (); // 基类 Object 指针，error Object has no member a ()</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"1728562036320.jpg\" alt=\"Object 应用例子\"></p>\n<p>可以再看一下 TVM 工程中的例子，这段代码创建了本体 <code>CallNode</code> ，通过 make_object 生成桥梁 <code>ObjectPtr&lt;CallNode&gt;</code> ，最后赋值给指针 <code>Call</code>  的 <code>data_</code> 字段。</p>\n<h1 id=\"python和c相互调用\"><a class=\"anchor\" href=\"#python和c相互调用\">#</a> Python 和 C++ 相互调用</h1>\n<p>TVM 实现了 FFI (Foreign Function Interface) 机制，目标是使得任意语言下定义的函数都可以被任意其他语言调用。</p>\n<p>宏 TVM_REGISTER_GLOBAL</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * \\brief Register a function globally.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * \\code</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   TVM_REGISTER_GLOBAL(\"MyPrint\")</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   .set_body([](TVMArgs args, TVMRetValue* rv) &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   &#125;);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * \\endcode</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">TVM_REGISTER_GLOBAL</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>OpName<span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token expression\"><span class=\"token function\">TVM_STR_CONCAT</span><span class=\"token punctuation\">(</span>TVM_FUNC_REG_VAR_DEF<span class=\"token punctuation\">,</span> __COUNTER__<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Registry</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span>OpName<span class=\"token punctuation\">)</span></span></pre></td></tr></table></figure><p>在 C++ 后端同过 “TVM_REGISTER_GLOBAL” 这个宏将函数注册为全局函数，该全局函数的类型为 PackedFunc。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">TVM_REGISTER_GLOBAL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tvm.graph_executor_factory.create\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 注册为全局函数 PackedFunc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">set_body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token function\">Module</span><span class=\"token punctuation\">(</span>exec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 Python 前端可以通过 get_global_func () 函数来获取全局函数 PackedFunc 并执行</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fcreate <span class=\"token operator\">=</span> get_global_func<span class=\"token punctuation\">(</span><span class=\"token string\">\"tvm.graph_executor_facttory.create\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>self<span class=\"token punctuation\">.</span>module <span class=\"token operator\">=</span> fcreate<span class=\"token punctuation\">(</span>graph_json_str<span class=\"token punctuation\">,</span> libmod<span class=\"token punctuation\">,</span> libmod_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 C++ 端也可以通过名字获取 全局函数 PackedFunc</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PackedFunc pf <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">GetFunction</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>python 端有大量如下类似代码，将有相同后缀的 PackedFunc 注册到 Python 端</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"FFI APIs for tvm.ir\"\"\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> tvm<span class=\"token punctuation\">.</span>_ffi</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>tvm<span class=\"token punctuation\">.</span>_ffi<span class=\"token punctuation\">.</span>_init_api<span class=\"token punctuation\">(</span><span class=\"token string\">\"ir\"</span><span class=\"token punctuation\">,</span> __name__<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>Python 端获取并执行 PackedFunc</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_ffi_api<span class=\"token punctuation\">.</span>Module_UpdateGlobalInfo<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> global_info<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "tvm",
                "compile"
            ]
        }
    ]
}