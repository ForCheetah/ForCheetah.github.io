{
    "version": "https://jsonfeed.org/version/1",
    "title": "Пусть этот камень будет более крепким, чем человек • All posts by \"lib\" tag",
    "description": "有自己的博客很帅，但是我很懒，要命！！！",
    "home_page_url": "https://forcheetah.github.io",
    "items": [
        {
            "id": "https://forcheetah.github.io/2024/05/14/cpplib/",
            "url": "https://forcheetah.github.io/2024/05/14/cpplib/",
            "title": "C语言工程调用Cpp库解决方案",
            "date_published": "2024-05-14T12:37:34.628Z",
            "content_html": "<p>本文为 C 语言工程调用 C++ 库的解决方案。</p>\n<p>应用场景： 需要 C++ 程序编译成的库提供函数接口，来解决 C 语言工程的需求。</p>\n<p>想要快速解决问题，直接看 三、通用解决方法</p>\n<blockquote>\n<p>人的出场顺序真的很重要，很多人如果换一个时间认识，换一个时间共处，一切都将是不一样的场景，不一样的结局。所以，人生有无限种可能，我的人生，是现在这一种。感谢大家恰到好处的出现，组成我最好的一种可能。<br>\n------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<h1 id=\"c库可以编辑的情况\"><a class=\"anchor\" href=\"#c库可以编辑的情况\">#</a> C++ 库可以编辑的情况</h1>\n<p>C++ 库由自己编写，可以决定头文件书写的位置</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"iostream\"</span> <span class=\"token comment\">// 将用到的 C++ 标准库，如 iostream，放在本 cpp 文件中</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" # iostream: i am saying hello !\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" # c: i am saying hello !\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建 hello.cpp 文件，实现 sayHello () 功能，分别用 C++ 标准库和 C 标准库的输入输出功能打印 hello！</p>\n<p>①需要注意的是 “将 C++ 标准库放在该 cpp 文件中”，原因后续指出。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span>  <span class=\"token comment\">// 这里不能出现 C++ 标准库</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>创建头文件 hello.h   这里可以添加 C 语言标准库，但是不要把 C++ 标准库放在这里。</p>\n<p>以上 hello.h 和 hello.cpp 模拟了 C++ 库。为了使 C 语言工程能够调用该库，需要增加一个中间层</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// helloWapper.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"helloWapper.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建中间层 helloWapper.cpp ， 对想要使用的 C++ 库函数进行封装，即： 通过 Wapper_sayHello () 调用 sayHello ()</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// helloWapper.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>创建中间层头文件 helloWapper.h，暴露 Wapper_sayHello () 接口。中间出现的 extern &quot;C&quot; {} 是告诉 G++ 编译器，对中间的函数按照 C 语言的方式进行编译。</p>\n<p>然后将上述两个 CPP 文件编译成 静态库 ，使用的 CMakeLists.txt 文件如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include <span class=\"token punctuation\">)</span> <span class=\"token comment\"># 指定头文件位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>test_call_LIST <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/hello.cpp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/helloWapper.cpp<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定需要编译的 CPP 文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>set<span class=\"token punctuation\">(</span>LIBRARY_OUTPUT_PATH <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 指定库输出路径</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>add_library<span class=\"token punctuation\">(</span>hello STATIC <span class=\"token variable\">$&#123;test_call_LIST&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 编译</span></pre></td></tr></table></figure><p>所有文件结构如下：<br>\n<img loading=\"lazy\" data-src=\"1715602113090.jpg\" alt=\"文件结构图\"></p>\n<p>在工程根目录输入</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build <span class=\"token operator\">&amp;</span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake <span class=\"token punctuation\">..</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr></table></figure><p>bin 文件夹下就会出现 封装好的库 libhello.a</p>\n<p>创建 mian.c 来模拟 C 语言工程：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"helloWapper.h\"</span>  <span class=\"token comment\">// 调用 C++ 库接口</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>A：通过命令行进行编译运行</strong></p>\n<p>回到工程根目录，编译 main.c ， 运行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gcc <span class=\"token parameter variable\">-o</span> Hello ./src/main.c -I./include -L./bin <span class=\"token parameter variable\">-lhello</span> -lstdc++</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./Hello</pre></td></tr></table></figure><p><strong>B：通过 Cmake 编译运行</strong></p>\n<p>在工程根目录，将 CMakeList.txt 内容替换为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># CMakeList.txt</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定头文件目录</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>find_library<span class=\"token punctuation\">(</span>Hello_LIB hello HINTS <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 引入 libhello.a 静态库</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>hello_List <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>add_executable <span class=\"token punctuation\">(</span>Hello <span class=\"token variable\">$&#123;hello_List&#125;</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 默认 gcc 编译 main.c</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>target_link_libraries <span class=\"token punctuation\">(</span>Hello <span class=\"token variable\">$&#123;Hello_LIB&#125;</span> stdc++<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> build <span class=\"token operator\">&amp;&amp;</span> cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./Hello</pre></td></tr></table></figure><p>A B 两种方式均输出结果： 至此 C 语言工程能够成功调用 C++ 库</p>\n<p><img loading=\"lazy\" data-src=\"1715602427908.jpg\" alt=\"输出结果\"></p>\n<p>以上 A B 两种方式中均出现 stdc++ ，一般以 libstdc++.so 的方式存在，是 C++ 标准库。</p>\n<p>可以看下图 “G++ and GCC”</p>\n<p><img loading=\"lazy\" data-src=\"1715602427908.jpg\" alt=\" “G++ and GCC”\"></p>\n<p>GCC 在编译时不会自动链接 C++ 标准库， 因此 hello.cpp 用到的 类似 &quot;iostream&quot; 等 C++ 标准库需要手动链接，否则会出现以下错误：</p>\n<p><img loading=\"lazy\" data-src=\"1715686800105.jpg\" alt=\"找不到C++标准库错误\"></p>\n<h1 id=\"c库为第三方库无法编辑的情况\"><a class=\"anchor\" href=\"#c库为第三方库无法编辑的情况\">#</a> C++ 库为第三方库，无法编辑的情况</h1>\n<p>在《一、C<ins> 库可以编辑的情况》 中提到  【①需要注意的是 “ 将 C</ins> 标准库放在该 cpp 文件中”】 是因为 GCC 编译不仅找不到 C<ins> 标准库 stdc</ins> ，也找不到 C++ 标准库的头文件。如果在 hello.h 中引用 “iostream&quot;， 那么用 GCC 编译 C 语言工程时，会报找不到头文件错误。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span>  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"iostream\"</span>  <span class=\"token comment\">// 这里出现了 C++ 标准库</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但是当我们想用的 C<ins> 库为第三方库，而它在头文件里引用了大量 C</ins> 标准库的情况下，该如何处理呢？</p>\n<p>再看图 “G++ and GCC”，里面指明 G<ins> 编译器能够编译 C 和 C</ins> 文件，且能够自动链接 C<ins> 标准库。所以在这种情况下，只需要在编译 C 语言工程的时候，指定 G</ins> 为编译器（编译 C 文件默认使用的是 GCC 编译器）就可以了。</p>\n<p>下面是与《一、C++ 库可以编辑的情况》相似的总体流程（有修改的地方会有注释）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span>  <span class=\"token comment\">// C++ 标准库头文件转移到 hello.h 中</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" # iostream: i am saying hello !\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" # c: i am saying hello !\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建 hello.cpp 文件，实现 sayHello () 功能，分别用 C++ 标准库和 C 标准库的输入输出功能打印 hello！</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span> </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"iostream\"</span>  <span class=\"token comment\">// C++ 标准库出现在这里</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>创建头文件 hello.h<br>\n 以上 hello.h 和 hello.cpp 模拟了 C++ 库。为了使 C 语言工程能够调用该库，需要增加一个中间层：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// helloWapper.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"helloWapper.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建中间层 helloWapper.cpp ， 对想要使用的 C++ 库函数进行封装，即： 通过 Wapper_sayHello () 调用 sayHello ()</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// helloWapper.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>创建中间层头文件 helloWapper.h，暴露 Wapper_sayHello () 接口。中间出现的 extern &quot;C&quot; {} 是告诉 G++ 编译器，对中间的函数按照 C 语言的方式进行编译。<br>\n然后将上述两个 CPP 文件编译成 静态库 ，使用的 CMakeLists.txt 文件如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include <span class=\"token punctuation\">)</span> <span class=\"token comment\"># 指定头文件位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>test_call_LIST <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/hello.cpp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/helloWapper.cpp<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定需要编译的 CPP 文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>set<span class=\"token punctuation\">(</span>LIBRARY_OUTPUT_PATH <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 指定库输出路径</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>add_library<span class=\"token punctuation\">(</span>hello STATIC <span class=\"token variable\">$&#123;test_call_LIST&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 编译</span></pre></td></tr></table></figure><p>文件结构还是图：文件结构图</p>\n<p>在工程根目录输入</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build <span class=\"token operator\">&amp;</span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake <span class=\"token punctuation\">..</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr></table></figure><p>bin 文件夹下就会出现 封装好的库 libhello.a<br>\n 创建 mian.c 来模拟 C 语言工程：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"helloWapper.h\"</span>  <span class=\"token comment\">// 调用 C++ 库接口</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>A：通过命令行进行编译运行</strong><br>\n回到工程根目录，编译 main.c ， 运行：<br>\n编译器使用了 g++ ，可以自动搜索 C<ins> 标准库路径及链接 C</ins> 标准库，因此不需要再加 “-lstdc++”。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>g++ <span class=\"token parameter variable\">-o</span> Hello ./src/main.c -I./include -L./bin <span class=\"token parameter variable\">-lhello</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./Hello</pre></td></tr></table></figure><p><strong>B：通过 Cmake 编译运行</strong><br>\n在工程根目录，将 CMakeList.txt 内容替换为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># CMakeList.txt</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SET<span class=\"token punctuation\">(</span>CMAKE_C_COMPILER <span class=\"token string\">\"g++\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定使用  g++ 编译器进行编译</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定头文件目录</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>find_library<span class=\"token punctuation\">(</span>Hello_LIB hello HINTS <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 引入 libhello.a 静态库</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>hello_List <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>add_executable <span class=\"token punctuation\">(</span>Hello <span class=\"token variable\">$&#123;hello_List&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>target_link_libraries <span class=\"token punctuation\">(</span>Hello <span class=\"token variable\">$&#123;Hello_LIB&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>编译、执行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> build <span class=\"token operator\">&amp;&amp;</span> cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./Hello</pre></td></tr></table></figure><h1 id=\"通用方法\"><a class=\"anchor\" href=\"#通用方法\">#</a> 通用方法</h1>\n<p>可以忽略方法一和二。方法三可以采用 GCC 编译调用了 C<ins> 库的 C 语言工程。<br>\n解决的方法是： 在 中间层 helloWapper.cpp 中引用 C</ins> 库头文件 #include &quot;hello.h&quot;， 而不是在 helloWapper.h 中引用</p>\n<p>例子：<br>\n创建 C++ 库源文件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span>  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" # iostream: i am saying hello !\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" # c: i am saying hello !\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建头文件 hello.h</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span> </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"iostream\"</span> </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以上 hello.h 和 hello.cpp 模拟了 C++ 库。为了使 C 语言工程能够调用该库，需要增加一个中间层</p>\n<p>其中注意：一定要将 C<ins> 库的头文件 &quot;hello.h&quot; 加在 中间层的.cpp 文件中， 而不是放在中间层.h 文件中。这种情况下能够将 &quot;hello.h&quot; 等所有 C</ins> 库头文件编译到库当中，防止最后采用 GCC 编译时找不到 g++ 标准库的头文件。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// helloWapper.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span>  <span class=\"token comment\">// 一定要将 C++ 库的头文件 \"hello.h\" 加在 中间层的 cpp 文件中</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"helloWapper.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// helloWapper.h</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus  </span><span class=\"token comment\">// 不要把 #include \"hello.h\" 放在这里</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>创建中间层头文件 helloWapper.h，暴露 Wapper_sayHello () 接口。中间出现的 extern &quot;C&quot; {} 是告诉 G++ 编译器，对中间的函数按照 C 语言的方式进行编译。</p>\n<p>然后将上述两个 CPP 文件编译成 静态库 ，使用的 CMakeLists.txt 文件如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include <span class=\"token punctuation\">)</span> <span class=\"token comment\"># 指定头文件位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>test_call_LIST <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/hello.cpp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/helloWapper.cpp<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定需要编译的 CPP 文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>set<span class=\"token punctuation\">(</span>LIBRARY_OUTPUT_PATH <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 指定库输出路径</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>add_library<span class=\"token punctuation\">(</span>hello STATIC <span class=\"token variable\">$&#123;test_call_LIST&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 编译</span></pre></td></tr></table></figure><p>文件结构还是图：文件结构图</p>\n<p>在工程根目录输入</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build <span class=\"token operator\">&amp;</span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake <span class=\"token punctuation\">..</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr></table></figure><p>bin 文件夹下就会出现 封装好的库 libhello.a<br>\n 创建 mian.c 来模拟 C 语言工程：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"helloWapper.h\"</span>  <span class=\"token comment\">// 调用 C++ 库接口</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>A：通过命令行进行编译运行</strong><br>\n回到工程根目录，编译 main.c ， 运行：<br>\n编译器使用了 gcc ，需要添加 C<ins> 标准库 “ -lstdc</ins>”（标准库的头文件已经在 C++ 库中了）。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gcc <span class=\"token operator\">-</span>o Hello <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>main<span class=\"token punctuation\">.</span>c <span class=\"token operator\">-</span>I<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>include <span class=\"token operator\">-</span>L<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>bin <span class=\"token operator\">-</span>lhello <span class=\"token operator\">-</span>lstdc<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>Hello</pre></td></tr></table></figure><p><strong>B：通过 Cmake 编译运行</strong><br>\n在工程根目录，将 CMakeList.txt 内容替换为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># CMakeList.txt</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定头文件目录</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>find_library<span class=\"token punctuation\">(</span>Hello_LIB hello HINTS <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 引入 libhello.a 静态库</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>hello_List <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>add_executable <span class=\"token punctuation\">(</span>Hello <span class=\"token variable\">$&#123;hello_List&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>target_link_libraries <span class=\"token punctuation\">(</span>Hello <span class=\"token variable\">$&#123;Hello_LIB&#125;</span> stdc++<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>编译、执行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> build <span class=\"token operator\">&amp;&amp;</span> cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./Hello</pre></td></tr></table></figure><p>方法三是最通用的解决方法，不仅仍然可以使用 GCC 编译，而且想要在其他地方调用 C++ 库时，需要的头文件只有 “helloWapper.h” 一个。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "Linux",
                "lib"
            ]
        }
    ]
}