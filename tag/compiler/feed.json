{
    "version": "https://jsonfeed.org/version/1",
    "title": "Пусть этот камень будет более крепким, чем человек • All posts by \"compiler\" tag",
    "description": "有自己的博客很帅，但是我很懒，要命！！！",
    "home_page_url": "https://forcheetah.github.io",
    "items": [
        {
            "id": "https://forcheetah.github.io/2025/08/10/compile04/",
            "url": "https://forcheetah.github.io/2025/08/10/compile04/",
            "title": "【脉动阵列】脉动阵列类型",
            "date_published": "2025-08-10T15:16:48.217Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇文章简单总结脉动阵列加速矩阵运算的类型。</p>\n<p>网上相关资料较多，可以自行搜索。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"脉动阵列类型\"><a class=\"anchor\" href=\"#脉动阵列类型\">#</a> 脉动阵列类型</h1>\n<p>使用脉动阵列实现卷积的数据流类型。</p>\n<p>使用脉动阵列实现卷积时，往往先将卷积转化为矩阵预算，然后再补零和分块矩阵乘。<br>\n脉动阵列设计中有 3 种典型的数据流： 输出固定 （Output Stationary， OS） 数据流、 权重固定 （Weight Stationary， WS） 数据流和输入固定 （ Input Stationary， IS） 数据流。</p>\n<p>以下面这个 5*5 的矩阵乘为例：假设 M 是输入、N 是权重，Z 是结果。</p>\n<p><img loading=\"lazy\" data-src=\"1754838893561.jpg\" alt=\"典型的矩阵乘示例\"></p>\n<p>以下是 输出固定 的数据流动方式。提前将输入和权重按照图示进行数据排布，并依次输入到脉动阵列中。计算结束后，脉动阵列的对应位置刚好得到结果 Z。这种方式下，输出是固定在脉动阵列中的。</p>\n<p><img loading=\"lazy\" data-src=\"1754838965677.jpg\" alt=\"输出固定\"></p>\n<p>以下是 权重固定 的数据流动方式。需要提前将输入按照图示进行数据排布，权重提前加载至脉动阵列中。随着输入依次进入脉动阵列，下方会输出结果。这种方式下，权重是固定在脉动阵列中的。</p>\n<p><img loading=\"lazy\" data-src=\"1754838986110.jpg\" alt=\"权重固定\"></p>\n<p>至于输入固定的数据流动方式，其与权重固定类似，不过是两个矩阵调换位置。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，并指明哪一篇博客，我看到一定及时回复！</p>\n",
            "tags": [
                "compiler"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2025/04/27/Tengine02/",
            "url": "https://forcheetah.github.io/2025/04/27/Tengine02/",
            "title": "【Tengine】推理流程脑图【2】",
            "date_published": "2025-04-27T13:17:52.829Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇通流程脑图和代码介绍 Tengine 推理引擎的推理流程。本篇是第二篇。第一篇<a href=\"https://forcheetah.github.io/2025/04/24/Tengine01/\">地址</a>。<a href=\"https://github.com/OAID/Tengine\">Tengine 工程地址</a>。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p><img loading=\"lazy\" data-src=\"1745759345300.jpg\" alt=\"Tengine\"></p>\n<p>Tengine 由 OPEN AI LAB 主导开发，该项目实现了深度学习神经网络模型在嵌入式设备上的快速、高效部署需求。为实现在众多 AIoT 应用中的跨平台部署，该项目使用 C 语言进行核心模块开发，针对嵌入式设备资源有限的特点进行了深度框架裁剪。同时采用了完全分离的前后端设计，有利于 CPU、GPU、NPU 等异构计算单元的快速移植和部署，降低评估、迁移成本。</p>\n<h1 id=\"总流程图\"><a class=\"anchor\" href=\"#总流程图\">#</a> 总流程图</h1>\n<p>总流程图：</p>\n<p><img loading=\"lazy\" data-src=\"1745759400512.jpg\" alt=\"Tengine推理流程图\"></p>\n<p><code>init_tengine()</code>  和  <code>create_graph()</code>  流程位于第一篇<a href=\"https://forcheetah.github.io/2025/04/24/Tengine01/\">地址</a>中。</p>\n<h1 id=\"prerun_graph_multithread\"><a class=\"anchor\" href=\"#prerun_graph_multithread\">#</a> prerun_graph_multithread()</h1>\n<p><img loading=\"lazy\" data-src=\"1745759572184.jpg\" alt=\"prerun_graph_multithread推理流程图\"></p>\n<p>该函数是神经网络模型运行前的与运行流程。从流程图中看，其主要调用了三个函数。</p>\n<h2 id=\"1infer_ir_graph_shape\"><a class=\"anchor\" href=\"#1infer_ir_graph_shape\">#</a> 1.infer_ir_graph_shape()</h2>\n<p>推理引擎要根据输入 tensor 的维度来推理输出 tensor 的维度。例如某个卷积节点的输入维度是【1，32，128，128】，依据 kernel 大小计算出输出维度【1,64,128,128】。所以该函数会按顺序执行所有节点，并调用每个节点的 <code>op-&gt;infer_shape</code>  方法（前述提到过），完成整个模型的 tensor 维度推理。</p>\n<h2 id=\"2optimizer-split_graph\"><a class=\"anchor\" href=\"#2optimizer-split_graph\">#</a> 2.optimizer-&gt;split_graph()</h2>\n<p>切分子图。这是一个为了实现多设备运行而实现的方法，即通过切分子图实现。</p>\n<p>当前已有一个总图，包含模型所有的节点。而设备可能包括 CPU、GPU、NPU、DNNL 等等，而这些设备可能仅支持一部分算子，这就要求将总图切分成设备支持的子图，和设备不支持的子图。设备支持的子图交给设备运行，不支持的交给 CPU 执行。</p>\n<p>经过这个函数之后，子图就变成一各执行单元。</p>\n<h2 id=\"3schedule-prerun\"><a class=\"anchor\" href=\"#3schedule-prerun\">#</a> 3.schedule-&gt;prerun()</h2>\n<p>预运行，其调用的是 <code>interface-&gt;prerun()</code> ，即前述的，和设备相关的接口中的 <code>prerun()</code>  函数。其又调用了三个函数：</p>\n<p><code>create_exec_graph()</code> ：为每个子图创建执行子图。</p>\n<p>通过 <code>find_node_ops()</code>  函数，找到节点的所有执行方式。前述卷积算法，就注册了三种执行方式。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ret <span class=\"token operator\">=</span> <span class=\"token function\">register_conv_ref_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">register_conv_dw_hcl_x86_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">register_conv_hcl_x86_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>找到所有执行方式之后，调用每种执行方式的 <code>node_ops-&gt;score()</code>  函数，获得一个得分。例如 <code>conv_hcl_x86_op</code>  这种实现方式，其 <code>score()</code>  函数如下。它根据该节点的参数返回一个得分。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">score</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_ops</span><span class=\"token operator\">*</span> node_ops<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">exec_graph</span><span class=\"token operator\">*</span> exec_graph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token operator\">*</span> exec_node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token operator\">*</span> ir_node <span class=\"token operator\">=</span> exec_node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">graph</span><span class=\"token operator\">*</span> ir_graph <span class=\"token operator\">=</span> ir_node<span class=\"token operator\">-></span>graph<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor</span><span class=\"token operator\">*</span> input_tensor <span class=\"token operator\">=</span> <span class=\"token function\">get_ir_graph_tensor</span><span class=\"token punctuation\">(</span>ir_graph<span class=\"token punctuation\">,</span> ir_node<span class=\"token operator\">-></span>input_tensors<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor</span><span class=\"token operator\">*</span> output_tensor <span class=\"token operator\">=</span> <span class=\"token function\">get_ir_graph_tensor</span><span class=\"token punctuation\">(</span>ir_graph<span class=\"token punctuation\">,</span> ir_node<span class=\"token operator\">-></span>output_tensors<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_param</span><span class=\"token operator\">*</span> param <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_param</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>exec_node<span class=\"token operator\">-></span>op<span class=\"token punctuation\">.</span>param_mem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> group <span class=\"token operator\">=</span> param<span class=\"token operator\">-></span>group<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> kernel_h <span class=\"token operator\">=</span> param<span class=\"token operator\">-></span>kernel_h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> kernel_w <span class=\"token operator\">=</span> param<span class=\"token operator\">-></span>kernel_w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> in_c <span class=\"token operator\">=</span> input_tensor<span class=\"token operator\">-></span>dims<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> group<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> out_c <span class=\"token operator\">=</span> output_tensor<span class=\"token operator\">-></span>dims<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> group<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input_tensor<span class=\"token operator\">-></span>data_type <span class=\"token operator\">!=</span> TENGINE_DT_FP32 <span class=\"token operator\">&amp;&amp;</span> input_tensor<span class=\"token operator\">-></span>data_type <span class=\"token operator\">!=</span> TENGINE_DT_UINT8 <span class=\"token operator\">&amp;&amp;</span> input_tensor<span class=\"token operator\">-></span>data_type <span class=\"token operator\">!=</span> TENGINE_DT_INT8<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回 0 得分，意思是无法使用</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>group <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回 0 得分，意思是无法使用</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> OPS_SCORE_PREFER<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 返回 OPS_SCORE_PREFER 得分，意思是推荐使用</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>得分分为以下几档：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OPS_SCORE_STATIC</span> <span class=\"token expression\"><span class=\"token number\">10000</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OPS_SCORE_BEST</span>   <span class=\"token expression\"><span class=\"token number\">8000</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OPS_SCORE_PREFER</span> <span class=\"token expression\"><span class=\"token number\">6000</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OPS_SCORE_CANDO</span>  <span class=\"token expression\"><span class=\"token number\">4000</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OPS_SCORE_NOTSUP</span> <span class=\"token expression\"><span class=\"token number\">2000</span></span></span></pre></td></tr></table></figure><p>推理引擎将选择得分最高的作为执行方法，而得分低于 4000 的方法不可使用。</p>\n<p>下一步是调用 <code>node_ops-&gt;init_node()</code>  函数，是初始化节点预留的接口。</p>\n<p>通过 <code>prerun_exec_graph()</code>  函数调用 <code>node_ops-&gt;prerun()</code> ，这个是节点预运行而预留的接口。</p>\n<h1 id=\"run_graph\"><a class=\"anchor\" href=\"#run_graph\">#</a> run_graph()</h1>\n<p><img loading=\"lazy\" data-src=\"1745759741353.jpg\" alt=\"run_graph推理流程图\"></p>\n<p>到这里才开始实际执行图的每个节点。</p>\n<p>和前述一样，还是调用和设备相关的接口 <code>interface-&gt;run()</code> ，先调用每个算子的 <code>node_ops-&gt;reshape()</code>  函数，从工程中来看该函数仍然是在做维度推理的工作，与前述的 <code>infer_shape()</code>  相同。似乎是重复的做法，不过不同之处在于前述的 <code>infer_shape()</code>  只在模型构建完成之后运行一次，而这个 <code>reshape()</code>  函数在算子每次执行之前都要调用。</p>\n<p>可能是为了防止模型的每次运行，输入 tensor 大小都不一样？毕竟神经网络模型通常会不断输入数据，重复运行。（当开发者确定每次输入输入维度一致时，这里的运算就有些浪费时间了。）</p>\n<p>然后调用算子的具体执行： <code>node_ops-&gt;run()</code> 。</p>\n<h1 id=\"postrun_graph\"><a class=\"anchor\" href=\"#postrun_graph\">#</a> postrun_graph()</h1>\n<p><img loading=\"lazy\" data-src=\"1745759761537.jpg\" alt=\"postrun_graoh推理流程图\"></p>\n<p>图的后处理。</p>\n<p>调用每个节点的后运行  <code>node_ops-&gt;postrun()</code></p>\n<p>调用子图的释放函数 <code>release_exec_graph()</code> ，调用每个节点的释放函数 <code>node_ops-&gt;release_node()</code> 。</p>\n<h1 id=\"destroy_graph\"><a class=\"anchor\" href=\"#destroy_graph\">#</a> destroy_graph()</h1>\n<p><img loading=\"lazy\" data-src=\"1745759830848.jpg\" alt=\"destroy_graph推理流程图\"></p>\n<p>调用整个图的释放函数 <code>interface-&gt;release_graph()</code> 。</p>\n<p>一张脑图就帮我们整体把握 Tengine 推理引擎。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，并指明哪一篇博客，我看到一定及时回复！</p>\n",
            "tags": [
                "compiler"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2025/04/24/Tengine01/",
            "url": "https://forcheetah.github.io/2025/04/24/Tengine01/",
            "title": "【Tengine】推理流程脑图【1】",
            "date_published": "2025-04-24T12:13:25.414Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇通过流程脑图和代码介绍 Tengine 推理引擎的推理流程。本篇是第一部分。<a href=\"https://github.com/OAID/Tengine\">Tengine 工程地址</a>。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p><img loading=\"lazy\" data-src=\"1745496368199.jpg\" alt=\"Tengine\"></p>\n<p>Tengine 由 OPEN AI LAB 主导开发，该项目实现了深度学习神经网络模型在嵌入式设备上的快速、高效部署需求。为实现在众多 AIoT 应用中的跨平台部署，该项目使用 C 语言进行核心模块开发，针对嵌入式设备资源有限的特点进行了深度框架裁剪。同时采用了完全分离的前后端设计，有利于 CPU、GPU、NPU 等异构计算单元的快速移植和部署，降低评估、迁移成本。</p>\n<h1 id=\"推理流程\"><a class=\"anchor\" href=\"#推理流程\">#</a> 推理流程</h1>\n<p>不了解 AI 推理引擎的人，可能难以理解推理引擎做了哪些工作。所以我画了一张流程图，该流程图介绍了 Tengine 推理引擎在推理神经网络的时候做了哪些事情。通过这张图，不仅能全局掌握 Tengine 的推理流程，还能对推理引擎有更深刻的认识。</p>\n<p>直接上图：</p>\n<p><img loading=\"lazy\" data-src=\"1745496426999.jpg\" alt=\"Tengine推理流程图\"></p>\n<p>图中是一大批函数名字和他们之间的链接关系。我们先从左边入手，左边红色连线分别是 <code>init_tengine()</code> 、 <code>Create_graph()</code> 、 <code>prerun_graph_multithread()</code> 、 <code>run_graph()</code> 、 <code>get_graph_output_tensor()</code> 、 <code>postrun_graoh()</code>  和 <code>destroy_graph()</code> 。这些函数名通俗易懂，我们挨个来描述他们的详细功能。</p>\n<h1 id=\"init_tengine\"><a class=\"anchor\" href=\"#init_tengine\">#</a> init_tengine()</h1>\n<p><img loading=\"lazy\" data-src=\"1745496461827.jpg\" alt=\"init_tengine推理流程图\"></p>\n<p>顾名思义，该函数完成推理引擎的初始化。分为三个步骤：注册算子原型、注册序列化工具、注册设备。</p>\n<h2 id=\"1注册算子原型register_all_op_prototype\"><a class=\"anchor\" href=\"#1注册算子原型register_all_op_prototype\">#</a> 1. 注册算子原型：register_all_op_prototype ()</h2>\n<p>该函数将在编译的过程中生成在 build 文件夹里。该函数将调用一百多个算子原型的注册函数。如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">register_all_op_prototype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">register_argmax_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">register_const_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">register_convolution_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">register_crop_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">register_deconvolution_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以注册卷积算子为例， <code>register_convolution_op()</code>  函数注册了卷积算子对应的初始化函数 <code>init_op</code>  和释放函数 <code>release_op</code> 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">register_convolution_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ir_method_t m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    m<span class=\"token punctuation\">.</span>version <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    m<span class=\"token punctuation\">.</span>init <span class=\"token operator\">=</span> init_op<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    m<span class=\"token punctuation\">.</span>release <span class=\"token operator\">=</span> release_op<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">register_op</span><span class=\"token punctuation\">(</span>OP_CONV<span class=\"token punctuation\">,</span> OP_CONV_NAME<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>初始化函数 <code>init_op</code>  为卷积参数 <code>conv_param</code>  开辟空间（保存 kernel shape、pad 等信息），同时注册了维度推理函数 <code>infer_shape</code> （根据输入 tensor 和 kernel 维度推理输出 tensor 维度）。</p>\n<h2 id=\"2注册序列化工具register_all_serializer\"><a class=\"anchor\" href=\"#2注册序列化工具register_all_serializer\">#</a> 2. 注册序列化工具：register_all_serializer ()</h2>\n<p>它调用了两个函数。</p>\n<p>1. <code>register_tm2_serializer()</code> ，就是注册序列化 tmfile 模型文件的工具。该工具静态结构体 <code>tm2_serializer</code>  如下所示，可用来读取内存，加载模型等。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm2_serializer</span> tm2_serializer <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span>base <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">.</span>get_name <span class=\"token operator\">=</span> get_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">.</span>load_model <span class=\"token operator\">=</span> load_model<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">.</span>load_mem <span class=\"token operator\">=</span> load_mem<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">.</span>unload_graph <span class=\"token operator\">=</span> unload_graph<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">.</span>register_op_loader <span class=\"token operator\">=</span> register_op_loader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">.</span>unregister_op_loader <span class=\"token operator\">=</span> unregister_op_loader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">.</span>init <span class=\"token operator\">=</span> init_tm2_serializer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">.</span>release <span class=\"token operator\">=</span> release_tm2_serializer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">.</span>loader_list <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>2. <code>register_all_tm2_ops()</code>  函数用于注册所有算子的加载工具。不同的算子参数不同，数据不同，需要注册不同的加载函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">register_all_tm2_ops</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">register_tm2_concat_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">register_tm2_conv_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">register_tm2_crop_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以卷积算子为例， <code>register_tm2_conv_op()</code>  函数的内容是：调用前述静态结构体 <code>tm2_serializer</code>  的 <code>register_op_loader()</code>  函数，将卷积算子的加载函数 <code>tm2_load_conv</code>  注册进去，用于模型中卷积节点的加载。</p>\n<h2 id=\"3注册设备register_all_devices\"><a class=\"anchor\" href=\"#3注册设备register_all_devices\">#</a> 3. 注册设备：register_all_devices ()</h2>\n<p>作为支持多平台设备的推理引擎，设备管理也必不可少。编译阶段需要指定目标设备，我们以 CPU 为例，该函数将调用 <code>register_cpu_device()</code>  来注册 CPU 设备。</p>\n<p><code>cpu_device</code>  是个静态结构体，其包含了接口 <code>interface</code> 、分配器 <code>allocator</code> 、优化器 <code>optimizer</code> 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">cpu_device</span> cpu_dev <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span>base <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> CPU_DEVICE_NAME<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">.</span>interface <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>cpu_interface<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">.</span>allocator <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>cpu_allocator<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">.</span>optimizer <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>cpu_optimizer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">.</span>scheduler <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">.</span>privacy <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">.</span>master_cpu <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">.</span>cpu_model <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>着重看一下 CPU 设备的接口，接口 <code>cpu_interface</code>  也是一个静态结构体：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">interface</span> cpu_interface <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span>init <span class=\"token operator\">=</span> init_cpu<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span>pre_run <span class=\"token operator\">=</span> prerun<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">.</span>run <span class=\"token operator\">=</span> run<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span>post_run <span class=\"token operator\">=</span> postrun<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span>async_run <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">.</span>async_wait <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">.</span>release_graph <span class=\"token operator\">=</span> cpu_dev_release_exec_graph<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">.</span>release_device <span class=\"token operator\">=</span> release_cpu<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接口包含 CPU 设备初始化 <code>init</code> 、预运行 <code>pre_run</code> 、运行 <code>run</code> 、后运行 <code>post_run</code> 。</p>\n<p>当前会调用 CPU 设备初始化 <code>init</code> ，其余的会在后续调用到。</p>\n<p>CPU 设备初始化函数 <code>init_cpu</code>  会调用 <code>register_all_cpu_ops()</code>  函数，来注册所有 CPU 算子实现。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">register_all_cpu_ops</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">register_concat_ref_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">register_conv_ref_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">register_conv_dw_hcl_x86_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">register_conv_hcl_x86_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token function\">register_crop_ref_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从这段代码中看到，卷积算子的推理方式注册了三个。这是因为即使同一个设备的同一个算子，也可能有不同的实现方法，有些推理方法速度更快，但是有限制条件。所以具体使用哪个方法，会在后续流程中介绍。</p>\n<h1 id=\"create_graph\"><a class=\"anchor\" href=\"#create_graph\">#</a> Create_graph()</h1>\n<p><img loading=\"lazy\" data-src=\"1745496726346.jpg\" alt=\"Create_graph推理流程图\"></p>\n<p>该函数完成模型图结构的创建过程。</p>\n<h2 id=\"1创建上下文create_context\"><a class=\"anchor\" href=\"#1创建上下文create_context\">#</a> 1. 创建上下文：create_context ()</h2>\n<p>Context 是图执行的上下文，它会绑定调度器、设备等信息。这里不过多解释。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">context</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">scheduler</span><span class=\"token operator\">*</span> scheduler<span class=\"token punctuation\">;</span> <span class=\"token comment\">//!&lt; binding scheduler of this context</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">device</span><span class=\"token operator\">*</span> device<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//!&lt; binding device of this context</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> default_options<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//&lt;! default device options of this context</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> device_options<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//&lt;! device options of this context</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> ir_context_t<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"2创建图create_ir_graph\"><a class=\"anchor\" href=\"#2创建图create_ir_graph\">#</a> 2. 创建图：create_ir_graph ()</h2>\n<p>该函数主要创建一个新的图，并调用 <code>init_ir_graph()</code>  初始化一些信息，如图的节点数量、tensor 数量、输入输出等，做的事情相当有限。</p>\n<h2 id=\"3加载图结构load_mem\"><a class=\"anchor\" href=\"#3加载图结构load_mem\">#</a> 3. 加载图结构：load_mem ()</h2>\n<p>通过 <code>find_serializer_via_name()</code>  函数找到前述的序列化工具  <code>serializer</code> ，调用其<br>\n运行序列化工具的 <code>load_mem()</code>  函数，解析 tmfile 文件。其中 <code>load_graph</code>  函数会依次调用加载 tensor <code>load_graph_tensors()</code> 、加载节点 <code>load_graph_nodes()</code> 、加载输入输出节点 <code>load_graph_io_nodes()</code> 、加载子图信息 <code>load_graph_sub_info()</code> 。</p>\n<p>后半部分的流程介绍将在下一篇完成。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，并指明哪一篇博客，我看到一定及时回复！</p>\n",
            "tags": [
                "compiler"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2025/04/16/ncnn01/",
            "url": "https://forcheetah.github.io/2025/04/16/ncnn01/",
            "title": "【NCNN】学习ncnn模型转换",
            "date_published": "2025-04-16T13:23:06.055Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇通过代码介绍 NCNN 的模型转换过程。模型转换过程逻辑简单，所以本篇文章只对关键节点进行介绍。<a href=\"https://github.com/Tencent/ncnn\">NCNN 工程地址</a>。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>NCNN 是由 腾讯优图实验室 开发的 开源神经网络推理框架，专注于为 移动端和嵌入式设备 提供高效、轻量的深度学习模型部署解决方案。自 2017 年开源（基于 BSD 3-Clause 协议）以来，因其高性能、低功耗和跨平台特性，成为移动端 AI 推理的主流框架之一。</p>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>ncnn 编译部署方法，网络上很多，也可以参考工程中的 ：docs/how-to-build/how-to-build.md。编译时出现 Protoc 报错，可以参考工程中的 ：docs/how-to-use-and-FAQ/FAQ-ncnn-protobuf-problem.zh.md</p>\n<p>编译完成之后的使用命令，以 onnx 模型为例：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># onnx 模型转换为 ncnn 模型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./build/tools/onnx/onnx2ncnn  /home/user/yourpath/model.onnx /home/user/yourpath/model_ncnn.param /home/user/yourpath/model_ncnn.bin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 如果量化的话，需要构建一个校准数据集列表 imagelist.txt  linux 命令可方便的构建这个列表</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">find</span> yourpath/dataset/img/ <span class=\"token parameter variable\">-type</span> f <span class=\"token operator\">></span> imagelist.txt</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 量化步骤 1：生成 table 文件。tabel 文件记录根据校准数据集得到的量化因子</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>./build/tools/quantize/ncnn2table /home/user/yourpath/model_ncnn.param  /home/user/yourpath/model_ncnn.bin /home/user/yourpath/dataset/imagelist.txt /home/user/yourpath/model_ncnn.table <span class=\"token assign-left variable\">mean</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0,0</span>,0<span class=\"token punctuation\">]</span> <span class=\"token assign-left variable\">norm</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1,1</span>,1<span class=\"token punctuation\">]</span> <span class=\"token assign-left variable\">shape</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">224,224</span>,3<span class=\"token punctuation\">]</span>  <span class=\"token assign-left variable\">thread</span><span class=\"token operator\">=</span><span class=\"token number\">8</span> <span class=\"token assign-left variable\">method</span><span class=\"token operator\">=</span>kl <span class=\"token assign-left variable\">pixel</span><span class=\"token operator\">=</span>RGB</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 量化步骤 2：完成参数量化。根据 table 中的量化因子，将权重和参数量化为 int8</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>./build/tools/quantize/ncnn2int8 /home/user/yourpath/model_ncnn.param  /home/user/yourpath/model_ncnn.bin   /home/user/yourpath/model_ncnn_int8.param  /home/user/yourpath/model_ncnn_int8.bin  /home/user/yourpath/model_ncnn.table</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 执行。 执行例子在 example 文件夹下，可以参考这些运行例子自己写一个，调用编译好的模型，执行。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>./build/examples/simple_net /home/user/yourpath/dataset/img/img.jpg</pre></td></tr></table></figure><h1 id=\"模型\"><a class=\"anchor\" href=\"#模型\">#</a> 模型</h1>\n<p>构建模型的代码：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">modeltest</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inp_c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> istrain<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>modeltest<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>in_channels<span class=\"token operator\">=</span>inp_c<span class=\"token punctuation\">,</span> out_channels<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> groups<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>bn1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>relu1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        self<span class=\"token punctuation\">.</span>maxpool <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        self<span class=\"token punctuation\">.</span>conv2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>in_channels<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> out_channels<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> groups<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        self<span class=\"token punctuation\">.</span>bn2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        self<span class=\"token punctuation\">.</span>relu2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        self<span class=\"token punctuation\">.</span>avgpool <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>AdaptiveAvgPool2d<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        self<span class=\"token punctuation\">.</span>fc <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bn1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bn2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>avgpool<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>flatten<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>fc<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    x_ <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span>x_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    model <span class=\"token operator\">=</span> modeltest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    model<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    torch<span class=\"token punctuation\">.</span>onnx<span class=\"token punctuation\">.</span>export<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> <span class=\"token string\">\"models/simple.onnx\"</span><span class=\"token punctuation\">,</span> opset_version<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                      input_names<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> output_names<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><a href=\"https://netron.app/\">Netron</a> 支持多种神经网络模型的可视化，包括 onnx 和 ncnn 的 param。</p>\n<p>以该模型为例，展示 ncnn 的模型转换过程。</p>\n<p><img loading=\"lazy\" data-src=\"1744809573966.jpg\" alt=\"onnx模型和param模型\"></p>\n<h1 id=\"模型转换\"><a class=\"anchor\" href=\"#模型转换\">#</a> 模型转换</h1>\n<p>模型转换使用的是工具文件夹下的 onnx2ncnn，它的源文件位于  <code>tools/onnx/onnx2ncnn.cpp</code></p>\n<h3 id=\"解析onnx的辅助工具\"><a class=\"anchor\" href=\"#解析onnx的辅助工具\">#</a> 解析 onnx 的辅助工具</h3>\n<p>源文件中有大量 onnx 命名空间下的类和函数，如 <code>onnx::ModelProto</code> ， <code>onnx::TensorProto</code>  等。<a href=\"http://xn--buildonnx-4b6nk3cm5ay10aouap0d8yowov5l0btjgjtj9naf74zwyguu2bzvn7krp76dhuxan96a.pb.cc\">这些类和函数链接到 build 编译文件夹下自动生成的 onnx.pb.cc</a> 和 onnx.pb.h 源文件。</p>\n<p>它们是怎么来的呢？</p>\n<p>1.Protocol Buffers</p>\n<p>Protocol Buffers 是一种由 Google 开发的语言无关、平台无关、可扩展的序列化数据格式。它允许定义数据结构，然后使用特定的编译器（protoc）生成不同编程语言的代码，用于读写这些数据结构。</p>\n<p>2.onnx.proto 文件</p>\n<p>onnx.proto 文件使用 Protocol Buffers 语法来定义 ONNX 模型的各种数据结构和消息类型，这些就属于元数据。它们描述了 ONNX 模型各个组成部分的结构和关系。</p>\n<p>可以从 ONNX 官方的 GitHub 仓库（<a href=\"https://github.com/onnx/onnx\">https://github.com/onnx/onnx</a> ）克隆代码，onnx.proto 文件就在 onnx 目录下。</p>\n<p><a href=\"http://3.onnx.pb.cc\">3.onnx.pb.cc</a> 和 onnx.pb.h 文件</p>\n<p>有了 protoc 编译器和 onnx.proto 文件之后，就能使用 <code>protoc --cpp_out=. onnx/onnx.proto</code>  命令来生成 <a href=\"http://onnx.pb.cc\">onnx.pb.cc</a> 和 onnx.pb.h 文件</p>\n<p>而 NCNN 是通过 CmakeLists.txt 中通过 <code>protobuf_generate_cpp(ONNX_PROTO_SRCS ONNX_PROTO_HDRS onnx.proto)</code>  命令，实现 <a href=\"http://onnx.pb.cc\">onnx.pb.cc</a> 和 onnx.pb.h 文件的生成。</p>\n<p>4. 解析 onnx</p>\n<p>调用 <a href=\"http://onnx.pb.cc\">onnx.pb.cc</a> 和 onnx.pb.h 文件中的类来解析 onnx 模型。</p>\n<h3 id=\"转换结果\"><a class=\"anchor\" href=\"#转换结果\">#</a> 转换结果</h3>\n<p>直接看转换结果。转换过程很长，但无非是将 onnx 模型中的信息按照顺序取出来，重新构建成 ncnn 要求的样子。</p>\n<p>model_ncnn.param（未加密文件）可以以文本的方式直接打开。该文件存储了网络结构上的所有信息。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">7767517</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">9</span> <span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Input            data                     <span class=\"token number\">0</span> <span class=\"token number\">1</span> data</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Convolution      /conv1/Conv              <span class=\"token number\">1</span> <span class=\"token number\">1</span> data /conv1/Conv_output_0 <span class=\"token assign-left variable\">0</span><span class=\"token operator\">=</span><span class=\"token number\">4</span> <span class=\"token assign-left variable\">1</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">11</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">2</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">12</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">3</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">13</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">4</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">14</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">15</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">16</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">5</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">6</span><span class=\"token operator\">=</span><span class=\"token number\">108</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ReLU             /relu1/Relu              <span class=\"token number\">1</span> <span class=\"token number\">1</span> /conv1/Conv_output_0 /relu1/Relu_output_0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Pooling          /maxpool/MaxPool         <span class=\"token number\">1</span> <span class=\"token number\">1</span> /relu1/Relu_output_0 /maxpool/MaxPool_output_0 <span class=\"token assign-left variable\">0</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">1</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">11</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">2</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token assign-left variable\">12</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token assign-left variable\">3</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">13</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">14</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">15</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">5</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Convolution      /conv2/Conv              <span class=\"token number\">1</span> <span class=\"token number\">1</span> /maxpool/MaxPool_output_0 /conv2/Conv_output_0 <span class=\"token assign-left variable\">0</span><span class=\"token operator\">=</span><span class=\"token number\">5</span> <span class=\"token assign-left variable\">1</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">11</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">2</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">12</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">3</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">13</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">4</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">14</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">15</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">16</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">5</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">6</span><span class=\"token operator\">=</span><span class=\"token number\">180</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ReLU             /relu2/Relu              <span class=\"token number\">1</span> <span class=\"token number\">1</span> /conv2/Conv_output_0 /relu2/Relu_output_0</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Pooling          /avgpool/GlobalAveragePool <span class=\"token number\">1</span> <span class=\"token number\">1</span> /relu2/Relu_output_0 /avgpool/GlobalAveragePool_output_0 <span class=\"token assign-left variable\">0</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">4</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Flatten          /Flatten                 <span class=\"token number\">1</span> <span class=\"token number\">1</span> /avgpool/GlobalAveragePool_output_0 /Flatten_output_0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>InnerProduct     /fc/Gemm                 <span class=\"token number\">1</span> <span class=\"token number\">1</span> /Flatten_output_0 end <span class=\"token assign-left variable\">0</span><span class=\"token operator\">=</span><span class=\"token number\">10</span> <span class=\"token assign-left variable\">1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">2</span><span class=\"token operator\">=</span><span class=\"token number\">50</span></pre></td></tr></table></figure><p>第一行 “7767517” 是个用作校验的魔数。</p>\n<p>第二行 9 9 是 9 个节点（node） + 9 个输入输出 tensor（middle tensor）</p>\n<p>之后的 9 行是所有的节点及其拓扑信息。</p>\n<p>例如  <code>Input            data                     0 1 data</code>  ，节点类型为 Input（输入节点），名称为 data，有 0 个输入，1 个输出，输出 tensor 的名字叫做 data。<br>\n <code>Convolution      /conv1/Conv              1 1 data /conv1/Conv_output_0 0=4 1=3 11=3 2=1 12=1 3=1 13=1 4=0 14=0 15=0 16=0 5=1 6=108</code>   这一行，节点类型是 Convolution，名称为 /conv1/Conv，有一个输入 tensor，名称为 data，有一个输出 tensor，名称为 /conv1/Conv_output_0， 后续的键值对的具体含义可以查阅  <code>tools/onnx/onnx2ncnn.cpp</code> 。例如键 1 和 11 都代表 kernel 的宽和高。不同类型的节点，其相同的键也可能代表不同的意思。</p>\n<p>model_ncnn.param 文件包含了结构信息，剩下的权重偏置数据存储在 model_ncnn.bin 文件中。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，并指明哪一篇博客，我看到一定及时回复！</p>\n",
            "tags": [
                "compiler"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2025/03/28/compile03/",
            "url": "https://forcheetah.github.io/2025/03/28/compile03/",
            "title": "【编译器】使用llvm编译自定义语言【3】编译 object",
            "date_published": "2025-03-28T13:58:41.111Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇是使用 llvm 编译自定义语言的第三篇。第一篇<a href=\"https://forcheetah.github.io/2025/03/13/compile01/\">【编译器】使用 llvm 编译自定义语言【1】构建 AST</a> 文章自顶向下介绍了抽象语法树 AST 的构建过程，第二篇<a href=\"https://forcheetah.github.io/2025/03/20/compile02/\">【编译器】使用 llvm 编译自定义语言【2】转 llvm IR</a> 文章介绍将抽象语法树 AST 转化为 llvm IR 的过程。本篇将简单介绍，如何将前述得到的 llvm IR 编译成 Object 。所使用代码例子来自 LLVM 官方教程<a href=\"https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html\"> My First Language Frontend with LLVM Tutorial</a>。</p>\n<p>本篇介绍无法代替官方教程，感兴趣请参考<a href=\"https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html\"> My First Language Frontend with LLVM Tutorial</a>。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"目标\"><a class=\"anchor\" href=\"#目标\">#</a> 目标</h1>\n<p>再回忆一下顶级 Item 转换为 llvm IR 的过程，三种顶级 Item：函数 Function、外部函数 Extern、顶级表达式 TopLevelExpr。官方例子已经把这三种顶级 item 全部经过 Codegen 转换成 llvm IR 中的 Function。<br>\n<img loading=\"lazy\" data-src=\"1743170082464.jpg\" alt=\"Codegen层级\"></p>\n<p>函数 Function 自然是转换为  <code>llvm::Function</code> ，顶级表达式 TopLevelExpr 转换为匿名原型 prototype 的   <code>llvm::Function</code> ，外部函数 Extern 转换为没有表达式 body 的  <code>llvm::Function</code> 。总之，前述介绍将所有顶级 Item 转换为了  <code>llvm::Function</code> 。<br>\n所以本篇内容的目的是，介绍如何将  <code>llvm::Function</code>  编译成 Object，进而执行的过程。</p>\n<h1 id=\"编译-object\"><a class=\"anchor\" href=\"#编译-object\">#</a> 编译 Object</h1>\n<p>下面是一个将  <code>llvm::Function</code>  编译成 Object 的例子，实现 Hello World 的输出。前述流程已经到达 <code>llvm::Function</code>  这一步，为了避免复杂的 Lexer、AST、Codegen 的干扰而分散注意力，以下代码仅展示从 <code>llvm::Function</code>  开始编译成 Object 的流程。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/LLVMContext.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/Module.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/IRBuilder.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/Verifier.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Support/raw_ostream.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Support/TargetSelect.h\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Target/TargetMachine.h\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Target/TargetOptions.h\"</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/CodeGen/TargetPassConfig.h\"</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/MC/TargetRegistry.h\"</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/LegacyPassManager.h\"</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Linker/Linker.h\"</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Transforms/InstCombine/InstCombine.h\"</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Transforms/Scalar.h\"</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Transforms/Scalar/GVN.h\"</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;optional></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Support/FileSystem.h\"</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> llvm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 创建一个 LLVMContext 实例</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    LLVMContext Context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 创建一个 Module 实例，关联到 Context</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>Module<span class=\"token operator\">></span> M <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Module<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyModule\"</span><span class=\"token punctuation\">,</span> Context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 创建一个 IRBuilder 实例，关联到 Context</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    IRBuilder<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span> <span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 声明 puts 函数</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    FunctionType <span class=\"token operator\">*</span>PutsFT <span class=\"token operator\">=</span> <span class=\"token class-name\">FunctionType</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">IntegerType</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getInt32Ty</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">PointerType</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getUnqual</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntegerType</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getInt8Ty</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    Function <span class=\"token operator\">*</span>PutsF <span class=\"token operator\">=</span> <span class=\"token class-name\">Function</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>PutsFT<span class=\"token punctuation\">,</span> Function<span class=\"token double-colon punctuation\">::</span>ExternalLinkage<span class=\"token punctuation\">,</span> <span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 创建一个全局字符串常量 \"Hello, World\"</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    Constant <span class=\"token operator\">*</span>HelloStr <span class=\"token operator\">=</span> <span class=\"token class-name\">ConstantDataArray</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello, World\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    GlobalVariable <span class=\"token operator\">*</span>HelloGV <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">GlobalVariable</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token operator\">*</span>M<span class=\"token punctuation\">,</span> HelloStr<span class=\"token operator\">-></span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> GlobalValue<span class=\"token double-colon punctuation\">::</span>InternalLinkage<span class=\"token punctuation\">,</span> HelloStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// 获取字符串的地址</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    Constant <span class=\"token operator\">*</span>Zero <span class=\"token operator\">=</span> <span class=\"token class-name\">ConstantInt</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntegerType</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getInt32Ty</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Constant <span class=\"token operator\">*</span><span class=\"token operator\">></span> Indices <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>Zero<span class=\"token punctuation\">,</span> Zero<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    Constant <span class=\"token operator\">*</span>HelloPtr <span class=\"token operator\">=</span> <span class=\"token class-name\">ConstantExpr</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getGetElementPtr</span><span class=\"token punctuation\">(</span>HelloStr<span class=\"token operator\">-></span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> HelloGV<span class=\"token punctuation\">,</span> Indices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// 创建 main 函数类型</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    FunctionType <span class=\"token operator\">*</span>MainFT <span class=\"token operator\">=</span> <span class=\"token class-name\">FunctionType</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntegerType</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getInt32Ty</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    Function <span class=\"token operator\">*</span>MainF <span class=\"token operator\">=</span> <span class=\"token class-name\">Function</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>MainFT<span class=\"token punctuation\">,</span> Function<span class=\"token double-colon punctuation\">::</span>ExternalLinkage<span class=\"token punctuation\">,</span> <span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 创建一个基本块</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    BasicBlock <span class=\"token operator\">*</span>BB <span class=\"token operator\">=</span> <span class=\"token class-name\">BasicBlock</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"entry\"</span><span class=\"token punctuation\">,</span> MainF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">// 设置 IRBuilder 的插入位置</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    Builder<span class=\"token punctuation\">.</span><span class=\"token function\">SetInsertPoint</span><span class=\"token punctuation\">(</span>BB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">// 调用 puts 函数输出字符串</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    Builder<span class=\"token punctuation\">.</span><span class=\"token function\">CreateCall</span><span class=\"token punctuation\">(</span>PutsF<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>HelloPtr<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// 生成一个返回指令</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    Builder<span class=\"token punctuation\">.</span><span class=\"token function\">CreateRet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConstantInt</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntegerType</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getInt32Ty</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">// 验证模块</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">verifyModule</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>M<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Module verification failed!\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">// 初始化目标选择</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token function\">InitializeAllTargetInfos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token function\">InitializeAllTargets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token function\">InitializeAllTargetMCs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token function\">InitializeAllAsmParsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token function\">InitializeAllAsmPrinters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token comment\">// 获取目标信息</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string TargetTriple <span class=\"token operator\">=</span> <span class=\"token string\">\"x86_64-pc-linux-gnu\"</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    M<span class=\"token operator\">-></span><span class=\"token function\">setTargetTriple</span><span class=\"token punctuation\">(</span>TargetTriple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string Error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">const</span> Target <span class=\"token operator\">*</span>TheTarget <span class=\"token operator\">=</span> <span class=\"token class-name\">TargetRegistry</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">lookupTarget</span><span class=\"token punctuation\">(</span>TargetTriple<span class=\"token punctuation\">,</span> Error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>TheTarget<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> Error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token comment\">// 设置目标选项</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    TargetOptions Opts<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>optional<span class=\"token operator\">&lt;</span>Reloc<span class=\"token double-colon punctuation\">::</span>Model<span class=\"token operator\">></span> RM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    TargetMachine <span class=\"token operator\">*</span>TM <span class=\"token operator\">=</span> TheTarget<span class=\"token operator\">-></span><span class=\"token function\">createTargetMachine</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        TargetTriple<span class=\"token punctuation\">,</span> <span class=\"token string\">\"generic\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> Opts<span class=\"token punctuation\">,</span> RM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    M<span class=\"token operator\">-></span><span class=\"token function\">setDataLayout</span><span class=\"token punctuation\">(</span>TM<span class=\"token operator\">-></span><span class=\"token function\">createDataLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token comment\">// 创建文件输出流</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>error_code EC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    raw_fd_ostream <span class=\"token function\">dest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output.o\"</span><span class=\"token punctuation\">,</span> EC<span class=\"token punctuation\">,</span> sys<span class=\"token double-colon punctuation\">::</span>fs<span class=\"token double-colon punctuation\">::</span>OpenFlags<span class=\"token double-colon punctuation\">::</span>OF_None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>EC<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Could not open file: \"</span> <span class=\"token operator\">&lt;&lt;</span> EC<span class=\"token punctuation\">.</span><span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token comment\">// 创建一个传递管理器</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    legacy<span class=\"token double-colon punctuation\">::</span>PassManager PM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    PM<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">createInstructionCombiningPass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    PM<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">createReassociatePass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    PM<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">createGVNPass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    PM<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">createCFGSimplificationPass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token comment\">// 生成目标文件</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>TM<span class=\"token operator\">-></span><span class=\"token function\">addPassesToEmitFile</span><span class=\"token punctuation\">(</span>PM<span class=\"token punctuation\">,</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> CodeGenFileType<span class=\"token double-colon punctuation\">::</span>ObjectFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"TargetMachine can't emit a file of this type\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token comment\">// 运行传递管理器</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    PM<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    dest<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Object file generated: output.o\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行方式：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/home/user/your/path/of/llvm/bin/clang++ <span class=\"token parameter variable\">-std</span><span class=\"token operator\">=</span>c++17 <span class=\"token parameter variable\">-fPIE</span> HelloWorld.cpp <span class=\"token variable\"><span class=\"token variable\">`</span>/home/user/your/path/of/llvm/bin/llvm-config <span class=\"token parameter variable\">--cxxflags</span> <span class=\"token parameter variable\">--ldflags</span> --system-libs <span class=\"token parameter variable\">--libs</span> all<span class=\"token variable\">`</span></span> <span class=\"token parameter variable\">-o</span> generate_ir</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./generate_ir</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>clang++ output.o <span class=\"token parameter variable\">-o</span> run.x</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>./run.x</pre></td></tr></table></figure><p>通过以上命令编译代码，获取可执行文件 <code>generate_ir</code> 。执行可执行文件后输出编译结果 <code>output.o</code> ，最后编译和运行，能够输出 Hello, World！</p>\n<h1 id=\"代码解释\"><a class=\"anchor\" href=\"#代码解释\">#</a> 代码解释</h1>\n<p>代码的详细解释可以看代码注释。这里只增添一些其他信息。</p>\n<p>LLVMContext、Module 和 IRBuilder 是构建和操作 LLVM 中间表示（IR）的核心类。</p>\n<p>LLVMContext 是 LLVM 库中最基础的类，它代表了一个独立的 LLVM 执行环境，负责管理 LLVM IR 中所有类型、常量和其他元数据的内存。</p>\n<p>Module 表示一个完整的编译单元，类似于一个源文件编译后的结果。作为一个全局的容器，Module 包含了所有的全局变量、函数定义和声明。</p>\n<p>IRBuilder 是一个用于生成 LLVM IR 指令的辅助类。提供了一系列的方法来创建各种 LLVM IR 指令，如算术运算、控制流指令等。<br>\n代码中还有一个 BasicBlock（基本块）的概念，它在很多场景下都需要被创建。BasicBlock 是一组顺序执行的指令序列，具有单一的入口和单一的出口。这意味着基本块内的指令会按照顺序依次执行，不会有分支跳转到基本块内部的中间位置，并且基本块的末尾通常是一条跳转指令（如 br 指令），用于控制程序流的转移。</p>\n<p>什么时候需要创建基本块？</p>\n<p>1. 创建函数时</p>\n<p>当创建一个新的函数时，函数体需要由基本块组成。通常，函数至少需要一个入口基本块，用于开始执行函数的代码。比如代码中的 “main” 函数。</p>\n<p>2. 实现控制流时</p>\n<p>当程序中存在控制流语句（如 if-else、for 循环、while 循环等）时，需要创建多个基本块来表示不同的执行路径。</p>\n<p>比如下面是一个简单的 while 循环示例，实现一个变量从 0 递增到 10 的过程。总之，创建 BasicBlock 主要是为了组织函数的执行逻辑，处理控制流语句和循环结构。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建一个函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FunctionType <span class=\"token operator\">*</span>FT <span class=\"token operator\">=</span> <span class=\"token class-name\">FunctionType</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>Builder<span class=\"token punctuation\">.</span><span class=\"token function\">getInt32Ty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>Builder<span class=\"token punctuation\">.</span><span class=\"token function\">getInt32Ty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Function <span class=\"token operator\">*</span>F <span class=\"token operator\">=</span> <span class=\"token class-name\">Function</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>FT<span class=\"token punctuation\">,</span> Function<span class=\"token double-colon punctuation\">::</span>ExternalLinkage<span class=\"token punctuation\">,</span> <span class=\"token string\">\"test_if\"</span><span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Argument <span class=\"token operator\">*</span>Arg <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">*</span>F<span class=\"token operator\">-></span><span class=\"token function\">arg_begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 创建入口基本块</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>BasicBlock <span class=\"token operator\">*</span>EntryBB <span class=\"token operator\">=</span> <span class=\"token class-name\">BasicBlock</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"entry\"</span><span class=\"token punctuation\">,</span> F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 创建条件为真时执行的基本块</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>BasicBlock <span class=\"token operator\">*</span>TrueBB <span class=\"token operator\">=</span> <span class=\"token class-name\">BasicBlock</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span> F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 创建条件为假时执行的基本块</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>BasicBlock <span class=\"token operator\">*</span>FalseBB <span class=\"token operator\">=</span> <span class=\"token class-name\">BasicBlock</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">,</span> F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 创建合并基本块</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>BasicBlock <span class=\"token operator\">*</span>MergeBB <span class=\"token operator\">=</span> <span class=\"token class-name\">BasicBlock</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"merge\"</span><span class=\"token punctuation\">,</span> F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Builder<span class=\"token punctuation\">.</span><span class=\"token function\">SetInsertPoint</span><span class=\"token punctuation\">(</span>EntryBB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 比较操作</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Value <span class=\"token operator\">*</span>Cmp <span class=\"token operator\">=</span> Builder<span class=\"token punctuation\">.</span><span class=\"token function\">CreateICmpSGT</span><span class=\"token punctuation\">(</span>Arg<span class=\"token punctuation\">,</span> Builder<span class=\"token punctuation\">.</span><span class=\"token function\">getInt32</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 根据比较结果进行分支跳转</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Builder<span class=\"token punctuation\">.</span><span class=\"token function\">CreateCondBr</span><span class=\"token punctuation\">(</span>Cmp<span class=\"token punctuation\">,</span> TrueBB<span class=\"token punctuation\">,</span> FalseBB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 在 TrueBB 中插入指令</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Builder<span class=\"token punctuation\">.</span><span class=\"token function\">SetInsertPoint</span><span class=\"token punctuation\">(</span>TrueBB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Value <span class=\"token operator\">*</span>TrueResult <span class=\"token operator\">=</span> Builder<span class=\"token punctuation\">.</span><span class=\"token function\">getInt32</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Builder<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBr</span><span class=\"token punctuation\">(</span>MergeBB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 在 FalseBB 中插入指令</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Builder<span class=\"token punctuation\">.</span><span class=\"token function\">SetInsertPoint</span><span class=\"token punctuation\">(</span>FalseBB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Value <span class=\"token operator\">*</span>FalseResult <span class=\"token operator\">=</span> Builder<span class=\"token punctuation\">.</span><span class=\"token function\">getInt32</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>Builder<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBr</span><span class=\"token punctuation\">(</span>MergeBB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 在 MergeBB 中插入指令</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Builder<span class=\"token punctuation\">.</span><span class=\"token function\">SetInsertPoint</span><span class=\"token punctuation\">(</span>MergeBB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>PHINode <span class=\"token operator\">*</span>Phi <span class=\"token operator\">=</span> Builder<span class=\"token punctuation\">.</span><span class=\"token function\">CreatePHI</span><span class=\"token punctuation\">(</span>Builder<span class=\"token punctuation\">.</span><span class=\"token function\">getInt32Ty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>Phi<span class=\"token operator\">-></span><span class=\"token function\">addIncoming</span><span class=\"token punctuation\">(</span>TrueResult<span class=\"token punctuation\">,</span> TrueBB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>Phi<span class=\"token operator\">-></span><span class=\"token function\">addIncoming</span><span class=\"token punctuation\">(</span>FalseResult<span class=\"token punctuation\">,</span> FalseBB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>Builder<span class=\"token punctuation\">.</span><span class=\"token function\">CreateRet</span><span class=\"token punctuation\">(</span>Phi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"llvm-ir-的形式\"><a class=\"anchor\" href=\"#llvm-ir-的形式\">#</a> llvm IR 的形式</h1>\n<p>看了官方例子，也许你和我一样，也有这样的疑问：是不是所有的东西，转换为 llvm IR 之后，都是以函数  <code>llvm::Function</code>  的形式存在的？因为不仅是三种顶级 Item，还是 main 函数，都以 <code>llvm::Function</code>  的形式存在。</p>\n<p>实际上不是。 <code>llvm::Function</code>  是主要的存在形式，但是还有全局变量（Global Variable）、常量（Constant）、基本块（Basic Block）、指令（Instruction）、元数据（Metadata）等。</p>\n<p>想要真正了解 llvm IR 还得全面地学习。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，我看到一定及时回复！</p>\n",
            "tags": [
                "compiler"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2025/03/20/compile02/",
            "url": "https://forcheetah.github.io/2025/03/20/compile02/",
            "title": "【编译器】使用llvm编译自定义语言【2】转llvm IR",
            "date_published": "2025-03-20T11:41:57.286Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇是使用 llvm 编译自定义语言的第二篇。前一篇<a href=\"https://forcheetah.github.io/2025/03/13/compile01/\">【编译器】使用 llvm 编译自定义语言【1】</a>文章自顶向下介绍了抽象语法树 AST 的构建过程，本篇接续上一篇，介绍将抽象语法树 AST 转化为 llvm IR 的过程。所使用代码例子来自 LLVM 官方教程<a href=\"https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html\"> My First Language Frontend with LLVM Tutorial</a>。</p>\n<p>代码请于<a href=\"https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html\"> My First Language Frontend with LLVM Tutorial</a> 下载。本篇介绍无法代替官方教程，感兴趣请参考<a href=\"https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html\"> My First Language Frontend with LLVM Tutorial</a>。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"llvm-ir\"><a class=\"anchor\" href=\"#llvm-ir\">#</a> LLVM IR</h1>\n<p>将抽象语法树 AST 转换为 LLVM IR 之前，初始化了以下 LLVM 提供的类。先简单了解一下这些类。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>LLVMContext<span class=\"token operator\">></span> TheContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>Module<span class=\"token operator\">></span> TheModule<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>IRBuilder<span class=\"token operator\">&lt;</span><span class=\"token operator\">>></span> Builder<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> Value <span class=\"token operator\">*</span><span class=\"token operator\">></span> NamedValues<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>KaleidoscopeJIT<span class=\"token operator\">></span> TheJIT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>FunctionPassManager<span class=\"token operator\">></span> TheFPM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>LoopAnalysisManager<span class=\"token operator\">></span> TheLAM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>FunctionAnalysisManager<span class=\"token operator\">></span> TheFAM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>CGSCCAnalysisManager<span class=\"token operator\">></span> TheCGAM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>ModuleAnalysisManager<span class=\"token operator\">></span> TheMAM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>PassInstrumentationCallbacks<span class=\"token operator\">></span> ThePIC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>StandardInstrumentations<span class=\"token operator\">></span> TheSI<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>PrototypeAST<span class=\"token operator\">>></span> FunctionProtos<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>1. <code>LLVMContext</code>  是 LLVM 中最基础的类之一，它代表了一个 LLVM 的上下文环境。在 LLVM 里，所有的核心数据结构（像  <code>Module</code> 、 <code>Function</code> 、 <code>BasicBlock</code>  等）都和一个特定的  <code>LLVMContext</code>  相关联。 <code>LLVMContext</code>  负责管理内存分配、常量池以及一些全局的元数据。<br>\n2. <code>Module</code>  依赖于  <code>LLVMContext</code> ，它是一个编译单元的表示，是包含多个函数、全局变量和类型定义的容器。在自定义语言编译过程中，生成的中间表示（IR）代码都会被添加到  <code>Module</code>  中。<br>\n3. <code>IRBuilder</code>  是一个用于构建 LLVM 中间表示（IR）代码的辅助类。借助  <code>IRBuilder</code> ，能够方便地创建各种 LLVM 指令，像算术运算、函数调用、控制流语句等。<br>\n4. <code>KaleidoscopeJIT</code>  是 LLVM 官方为简单的万花筒自定义语言设计的一个即时编译器（JIT），用于将生成的 LLVM IR 代码即时编译成机器码并执行。代码位于 llvm 工程： llvm-src/examples/Kaleidoscope/include/KaleidoscopeJIT.h<br>\n5. <code>FunctionPassManager</code>  是一个用于管理和执行函数级别的优化和转换的类。在 LLVM 里，优化和转换操作是通过一系列的 “Pass” 来实现的。 <code>FunctionPassManager</code>  可以将多个 Pass 组合起来，对函数进行一系列的优化，例如常量折叠、死代码消除等。<br>\n6. <code>NamedValues</code>  和 <code>FunctionProtos</code>  两个 Map 是自定义的，用于暂存变量、原型的容器。<br>\n7. 剩下的 <code>LoopAnalysisManager</code>  等都是用于分析优化的管理器。</p>\n<h1 id=\"codegen-顶级item\"><a class=\"anchor\" href=\"#codegen-顶级item\">#</a> Codegen 顶级 Item</h1>\n<p>我们再看一下上一篇中的例子。例子中想要构建的三种顶级 Item：函数 Function、外部函数 Extern、顶级表达式 TopLevelExpr。</p>\n<p><img loading=\"lazy\" data-src=\"1742470613541.jpg\" alt=\"结构对照\"></p>\n<p>现在的任务就是将这三种 AST 结构转换为 LLVM IR。</p>\n<p>为了展示顶级 Item 的 Codegen 调用过程，我将调用过程划分为两个个层级，分别是高级 Codegen 和低级 Codegen，如图所示：</p>\n<p><img loading=\"lazy\" data-src=\"1742470659491.jpg\" alt=\"Codegen层级\"></p>\n<p>根据图先来简单分析一下：函数 Function 这类顶级 Item 自然是调用 <code>FunctionAST-&gt;Codegen</code>  方法。而顶级表达式 TopLevelExpr 已经构建成一个匿名 Function，所以它和函数 Function 的结构是相同的，只是 Proto 参数为空，所以顶级表达式 TopLevelExpr 也调用 <code>FunctionAST-&gt;Codegen</code>  方法。</p>\n<p><code>FunctionAST-&gt;Codegen</code>  在构建过程中，会调用 <code>PrototypeAST-&gt;Codegen</code>  和 <code>ExprAST-&gt;Codegen</code>  方法，非常好理解，因为 Function 就包含原型和表达式两个结构。</p>\n<p>外部函数 Extern 只有 Proto 结构，所以调用的是 <code>PrototypeAST-&gt;Codegen</code>  方法。</p>\n<p>高级 Codegen 中， <code>FunctionAST-&gt;Codegen</code>  只是在调用另外两个， <code>PrototypeAST-&gt;Codegen</code>  非常简单， <code>ExprAST-&gt;Codegen</code>  实际上是在递归地调用低级 Codegen，所以相对复杂。</p>\n<h2 id=\"function\"><a class=\"anchor\" href=\"#function\">#</a> Function</h2>\n<p>Function 的 Codegen 代码 (只保留了有助于理解的关键代码)：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Function <span class=\"token operator\">*</span><span class=\"token class-name\">FunctionAST</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// Transfer ownership of the prototype to the FunctionProtos map, but keep a</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// reference to it for use below.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>P <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>Proto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  FunctionProtos<span class=\"token punctuation\">[</span>Proto<span class=\"token operator\">-></span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>Proto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Function <span class=\"token operator\">*</span>TheFunction <span class=\"token operator\">=</span> <span class=\"token function\">getFunction</span><span class=\"token punctuation\">(</span>P<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 调用 PrototypeAST->Codegen () 获得函数的函数原型 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Value <span class=\"token operator\">*</span>RetVal <span class=\"token operator\">=</span> Body<span class=\"token operator\">-></span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 调用 ExprAst->Codegen () 获得表达式 IR</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// Finish off the function.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    Builder<span class=\"token operator\">-></span><span class=\"token function\">CreateRet</span><span class=\"token punctuation\">(</span>RetVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将表达式 IR RetVal 作为函数的返回值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> TheFunction<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>FunctionAST-&gt;Codegen</code>  调用 <code>Prototype-&gt;Codegen</code> ，获得一个配置了原型的 LLVM  <code>Function</code>  类。然后调用 <code>Body-&gt;codegen()</code>  将表达式转换为 llvm IR  <code>Value</code>  类 <code>RetVal</code> 。最后将 <code>RetVal</code>  设置为 <code>Function</code>  的返回值。</p>\n<h2 id=\"prototype\"><a class=\"anchor\" href=\"#prototype\">#</a> Prototype</h2>\n<p>Prototype 的 Codegen 代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Function <span class=\"token operator\">*</span><span class=\"token class-name\">PrototypeAST</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// Make the function type:  double(double,double) etc.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Type <span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token function\">Doubles</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Type</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDoubleTy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>TheContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置原型的参数数量及类型，在万花筒语言中所有类型都是 Double</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  FunctionType <span class=\"token operator\">*</span>FT <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token class-name\">FunctionType</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Type</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDoubleTy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>TheContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Doubles<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 配置返回类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  Function <span class=\"token operator\">*</span>F <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token class-name\">Function</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>FT<span class=\"token punctuation\">,</span> Function<span class=\"token double-colon punctuation\">::</span>ExternalLinkage<span class=\"token punctuation\">,</span> Name<span class=\"token punctuation\">,</span> TheModule<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建具有上述原型特征的函数 `Function`</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// Set names for all arguments.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> Idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>Arg <span class=\"token operator\">:</span> F<span class=\"token operator\">-></span><span class=\"token function\">args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Arg<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">[</span>Idx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置每个参数的名字（用于构建表达式的时候识别输入参数）</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">return</span> F<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>PrototypeAST-&gt;Codegen</code>  内容很简单，例如  <code>foo(x)</code>  这么一个原型，上述代码的过程就是 1. 声明一个参数 Double 2. 构建有一个 Double 返回值，并且名字为 foo 的函数 3. 设置参数的名字为 x</p>\n<p>最后是 <code>ExprAST-&gt;Codegen</code> ，将表达式转换为 llvm IR，相对复杂，由下一节讲解。</p>\n<h1 id=\"codegen-表达式\"><a class=\"anchor\" href=\"#codegen-表达式\">#</a> Codegen 表达式</h1>\n<p><img loading=\"lazy\" data-src=\"1742470659491.jpg\" alt=\"Codegen层级\"></p>\n<p>前述基本表达式有四种：数字表达式 NumberExpr 、二值表达式 BinaryExpr 、变量表达式 VariableExpr 、调用表达式 CallExpr 。所有的表达式都继承基类  <code>ExprAST</code> ，并重写了 <code>Codegen()</code>  函数。所以 <code>ExprAST-&gt;Codegen</code>  调用的是各个基本表达式的 <code>Codegen()</code>  函数。</p>\n<h2 id=\"numberexpr\"><a class=\"anchor\" href=\"#numberexpr\">#</a> NumberExpr</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Value <span class=\"token operator\">*</span><span class=\"token class-name\">NumberExprAST</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token class-name\">ConstantFP</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>TheContext<span class=\"token punctuation\">,</span> <span class=\"token function\">APFloat</span><span class=\"token punctuation\">(</span>Val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>NumberExprAST-&gt;codegen()</code>  将本类的 Double 成员 <code>Val</code>  转化为 llvm IR 浮点值。</p>\n<h2 id=\"binaryexpr\"><a class=\"anchor\" href=\"#binaryexpr\">#</a> BinaryExpr</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Value <span class=\"token operator\">*</span><span class=\"token class-name\">BinaryExprAST</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Value <span class=\"token operator\">*</span>L <span class=\"token operator\">=</span> LHS<span class=\"token operator\">-></span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 递归地构建左表达式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Value <span class=\"token operator\">*</span>R <span class=\"token operator\">=</span> RHS<span class=\"token operator\">-></span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 递归地构建右表达式</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>L <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>R<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>Op<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// 然后构建 OP   组合为二值表达式。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token char\">'+'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> Builder<span class=\"token operator\">-></span><span class=\"token function\">CreateFAdd</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">,</span> <span class=\"token string\">\"addtmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token char\">'-'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> Builder<span class=\"token operator\">-></span><span class=\"token function\">CreateFSub</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">,</span> <span class=\"token string\">\"subtmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token char\">'*'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> Builder<span class=\"token operator\">-></span><span class=\"token function\">CreateFMul</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">,</span> <span class=\"token string\">\"multmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token char\">'&lt;'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    L <span class=\"token operator\">=</span> Builder<span class=\"token operator\">-></span><span class=\"token function\">CreateFCmpULT</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">,</span> <span class=\"token string\">\"cmptmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// Convert bool 0/1 to double 0.0 or 1.0</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> Builder<span class=\"token operator\">-></span><span class=\"token function\">CreateUIToFP</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Type</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDoubleTy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>TheContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"booltmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">LogErrorV</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid binary operator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>BinaryExprAST 有三个成员，分别是左表达式 <code>LHS</code>  和右表达式 <code>RHS</code> ，以及算子 <code>OP</code> 。左右表达式通过调用 <code>ExprAST-&gt;codegen()</code>  递归地实现构建过程。然后和 <code>OP</code>  一起组成二值表达式。</p>\n<h2 id=\"callexpr\"><a class=\"anchor\" href=\"#callexpr\">#</a> CallExpr</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Value <span class=\"token operator\">*</span><span class=\"token class-name\">CallExprAST</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// Look up the name in the global module table.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Function <span class=\"token operator\">*</span>CalleeF <span class=\"token operator\">=</span> <span class=\"token function\">getFunction</span><span class=\"token punctuation\">(</span>Callee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 根据调用名称寻找已经定义的函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>CalleeF<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">LogErrorV</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown function referenced\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// If argument mismatch error.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CalleeF<span class=\"token operator\">-></span><span class=\"token function\">arg_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> Args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 检查参数数量是否匹配</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">LogErrorV</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Incorrect # arguments passed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Value <span class=\"token operator\">*</span><span class=\"token operator\">></span> ArgsV<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> e <span class=\"token operator\">=</span> Args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> e<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ArgsV<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 每个参数都是一个表达式，需要递归地构建</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ArgsV<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">return</span> Builder<span class=\"token operator\">-></span><span class=\"token function\">CreateCall</span><span class=\"token punctuation\">(</span>CalleeF<span class=\"token punctuation\">,</span> ArgsV<span class=\"token punctuation\">,</span> <span class=\"token string\">\"calltmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 组合起来</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>CallAST</code>  有两个成员，分别是调用名称 <code>Callee</code>  和参数 <code>Args</code> 。过程是 1. 根据调用名称寻找已经定义的函数。  2. 每个参数都是一个表达式，调用 <code>ExprAST-&gt;codegen()</code>  递归地实现构建过程，每个参数调用一次。  3. 组合起来，构建结束。</p>\n<p>讲到这里，可能会有细心的读者发现：上一章讲的四个基本表达式：数字表达式 <code>NumberExpr</code> 、二值表达式 <code>BinaryExpr</code> 、调用表达式 <code>CallExpr</code> ，对应的 Codegen 分别有三个。那个变量表达式 <code>VariableExpr</code>  的 Codegen () 去哪儿了？</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Value <span class=\"token operator\">*</span><span class=\"token class-name\">VariableExprAST</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// Look this variable up in the function.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Value <span class=\"token operator\">*</span>V <span class=\"token operator\">=</span> NamedValues<span class=\"token punctuation\">[</span>Name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 根据名字，将 Map 中存储的变量取出来。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>V<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">LogErrorV</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown variable name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> V<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在这里，但是这里没有构建任何 llvm IR。</p>\n<p>原因是在将 表达式转为 llvm IR 的过程中，没有任何新的变量需要创建，所需的变量在转换 Prototype 的时候就已经完成了。</p>\n<p>例如 <code>foo(x) x+2;</code>  这样一个函数，变量 <code>x</code>  在转换 <code>foo(x)</code>  这个原型的时候就已经创建好了，所以在转换 <code>x+2</code>  表达式的时候，只需要在已经创建好的  <code>NamedValues</code>  Map 中把它取出来。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，并指明哪一篇博客，我看到一定及时回复！</p>\n",
            "tags": [
                "compiler"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2025/03/13/compile01/",
            "url": "https://forcheetah.github.io/2025/03/13/compile01/",
            "title": "【编译器】使用llvm编译自定义语言【1】构建AST",
            "date_published": "2025-03-13T11:25:46.554Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇介绍如何使用 LLVM 编译自定义语言。使用的是 LLVM 官方例子<a href=\"https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html\"> My First Language Frontend with LLVM Tutorial</a>。官方例子采用自底向上的方式详细讲述了自定义万花筒语言通过 llvm 编译的过程，但是自底向上较难理解，过程较长。本篇将自上而下地、简要地介绍如何将自定义语言转换为 llvm IR，实现编译的。</p>\n<p>尽管官方用例非常详细，笔者在阅读的时候仍然感到内容多，较 “散”，难以把握。每当这时候我会选择从上而下，整理归类，最后发现知识就具象化了。本篇介绍无法代替官方教程，感兴趣请参考<a href=\"https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html\"> My First Language Frontend with LLVM Tutorial</a>。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"编译运行\"><a class=\"anchor\" href=\"#编译运行\">#</a> 编译运行</h1>\n<p>直接拷贝官方例子第四节代码：<a href=\"https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.html#full-code-listing\">官方代码</a></p>\n<p>这一章的代码，已经实现了将自定义万花筒语言编译称为一种即时编译的解释型语言，可以逐行读取并执行代码。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"../include/KaleidoscopeJIT.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/ADT/APFloat.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/ADT/STLExtras.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/BasicBlock.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/Constants.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/DerivedTypes.h\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/Function.h\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/IRBuilder.h\"</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/LLVMContext.h\"</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/Module.h\"</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/PassManager.h\"</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/Type.h\"</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/Verifier.h\"</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Passes/PassBuilder.h\"</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Passes/StandardInstrumentations.h\"</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Support/TargetSelect.h\"</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Target/TargetMachine.h\"</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Transforms/InstCombine/InstCombine.h\"</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Transforms/Scalar.h\"</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Transforms/Scalar/GVN.h\"</span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Transforms/Scalar/Reassociate.h\"</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Transforms/Scalar/SimplifyCFG.h\"</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cassert></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cctype></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdint></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> llvm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> llvm<span class=\"token double-colon punctuation\">::</span>orc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">//===----------------------------------------------------------------------===//</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// Lexer</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">//===----------------------------------------------------------------------===//</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// The lexer returns tokens [0-255] if it is an unknown character, otherwise one</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// of these for known things.</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Token</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  tok_eof <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token comment\">// commands</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  tok_def <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  tok_extern <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token comment\">// primary</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  tok_identifier <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  tok_number <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>string IdentifierStr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Filled in if tok_identifier</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> NumVal<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// Filled in if tok_number</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">/// gettok - Return the next token from standard input.</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">gettok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> LastChar <span class=\"token operator\">=</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token comment\">// Skip any whitespace.</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>LastChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    LastChar <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isalpha</span><span class=\"token punctuation\">(</span>LastChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// identifier: [a-zA-Z][a-zA-Z0-9]*</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    IdentifierStr <span class=\"token operator\">=</span> LastChar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isalnum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LastChar <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      IdentifierStr <span class=\"token operator\">+=</span> LastChar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IdentifierStr <span class=\"token operator\">==</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      <span class=\"token keyword\">return</span> tok_def<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IdentifierStr <span class=\"token operator\">==</span> <span class=\"token string\">\"extern\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      <span class=\"token keyword\">return</span> tok_extern<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">return</span> tok_identifier<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>LastChar<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> LastChar <span class=\"token operator\">==</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// Number: [0-9.]+</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string NumStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      NumStr <span class=\"token operator\">+=</span> LastChar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      LastChar <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>LastChar<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> LastChar <span class=\"token operator\">==</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    NumVal <span class=\"token operator\">=</span> <span class=\"token function\">strtod</span><span class=\"token punctuation\">(</span>NumStr<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">return</span> tok_number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LastChar <span class=\"token operator\">==</span> <span class=\"token char\">'#'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token comment\">// Comment until end of line.</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>      LastChar <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>LastChar <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span> <span class=\"token operator\">&amp;&amp;</span> LastChar <span class=\"token operator\">!=</span> <span class=\"token char\">'\\n'</span> <span class=\"token operator\">&amp;&amp;</span> LastChar <span class=\"token operator\">!=</span> <span class=\"token char\">'\\r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LastChar <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">gettok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  <span class=\"token comment\">// Check for end of file.  Don't eat the EOF.</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LastChar <span class=\"token operator\">==</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token keyword\">return</span> tok_eof<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token comment\">// Otherwise, just return the character as its ascii value.</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  <span class=\"token keyword\">int</span> ThisChar <span class=\"token operator\">=</span> LastChar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  LastChar <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  <span class=\"token keyword\">return</span> ThisChar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token comment\">//===----------------------------------------------------------------------===//</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token comment\">// Abstract Syntax Tree (aka Parse Tree)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token comment\">//===----------------------------------------------------------------------===//</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token comment\">/// ExprAST - Base class for all expression nodes.</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ExprAST</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ExprAST</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  <span class=\"token keyword\">virtual</span> Value <span class=\"token operator\">*</span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token comment\">/// NumberExprAST - Expression class for numeric literals like \"1.0\".</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">NumberExprAST</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ExprAST</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  <span class=\"token keyword\">double</span> Val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  <span class=\"token function\">NumberExprAST</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> Val<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Val</span><span class=\"token punctuation\">(</span>Val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  Value <span class=\"token operator\">*</span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token comment\">/// VariableExprAST - Expression class for referencing a variable, like \"a\".</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">VariableExprAST</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ExprAST</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>  <span class=\"token function\">VariableExprAST</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>Name<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Name</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  Value <span class=\"token operator\">*</span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre><span class=\"token comment\">/// BinaryExprAST - Expression class for a binary operator.</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryExprAST</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ExprAST</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>  <span class=\"token keyword\">char</span> Op<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>ExprAST<span class=\"token operator\">></span> LHS<span class=\"token punctuation\">,</span> RHS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>  <span class=\"token function\">BinaryExprAST</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> Op<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>ExprAST<span class=\"token operator\">></span> LHS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>                std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>ExprAST<span class=\"token operator\">></span> RHS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>      <span class=\"token operator\">:</span> <span class=\"token function\">Op</span><span class=\"token punctuation\">(</span>Op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">LHS</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>LHS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">RHS</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>RHS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>  Value <span class=\"token operator\">*</span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre><span class=\"token comment\">/// CallExprAST - Expression class for function calls.</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CallExprAST</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ExprAST</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string Callee<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>ExprAST<span class=\"token operator\">>></span> Args<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre></pre></td></tr><tr><td data-num=\"161\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>  <span class=\"token function\">CallExprAST</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>Callee<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>              std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>ExprAST<span class=\"token operator\">>></span> Args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>      <span class=\"token operator\">:</span> <span class=\"token function\">Callee</span><span class=\"token punctuation\">(</span>Callee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Args</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>  Value <span class=\"token operator\">*</span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre></pre></td></tr><tr><td data-num=\"169\"></td><td><pre><span class=\"token comment\">/// PrototypeAST - This class represents the \"prototype\" for a function,</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre><span class=\"token comment\">/// which captures its name, and its argument names (thus implicitly the number</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre><span class=\"token comment\">/// of arguments the function takes).</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PrototypeAST</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> Args<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre></pre></td></tr><tr><td data-num=\"176\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>  <span class=\"token function\">PrototypeAST</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>Name<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> Args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>      <span class=\"token operator\">:</span> <span class=\"token function\">Name</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Args</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>  Function <span class=\"token operator\">*</span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>  <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> Name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre></pre></td></tr><tr><td data-num=\"184\"></td><td><pre><span class=\"token comment\">/// FunctionAST - This class represents a function definition itself.</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FunctionAST</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>PrototypeAST<span class=\"token operator\">></span> Proto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>ExprAST<span class=\"token operator\">></span> Body<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre></pre></td></tr><tr><td data-num=\"189\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>  <span class=\"token function\">FunctionAST</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>PrototypeAST<span class=\"token operator\">></span> Proto<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>              std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>ExprAST<span class=\"token operator\">></span> Body<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>      <span class=\"token operator\">:</span> <span class=\"token function\">Proto</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>Proto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Body</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>  Function <span class=\"token operator\">*</span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre></pre></td></tr><tr><td data-num=\"197\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// end anonymous namespace</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre></pre></td></tr><tr><td data-num=\"199\"></td><td><pre><span class=\"token comment\">//===----------------------------------------------------------------------===//</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre><span class=\"token comment\">// Parser</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre><span class=\"token comment\">//===----------------------------------------------------------------------===//</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre></pre></td></tr><tr><td data-num=\"203\"></td><td><pre><span class=\"token comment\">/// CurTok/getNextToken - Provide a simple token buffer.  CurTok is the current</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre><span class=\"token comment\">/// token the parser is looking at.  getNextToken reads another token from the</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre><span class=\"token comment\">/// lexer and updates CurTok with its results.</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> CurTok<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> CurTok <span class=\"token operator\">=</span> <span class=\"token function\">gettok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre></pre></td></tr><tr><td data-num=\"209\"></td><td><pre><span class=\"token comment\">/// BinopPrecedence - This holds the precedence for each binary operator that is</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre><span class=\"token comment\">/// defined.</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> BinopPrecedence<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre></pre></td></tr><tr><td data-num=\"213\"></td><td><pre><span class=\"token comment\">/// GetTokPrecedence - Get the precedence of the pending binary operator token.</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">GetTokPrecedence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isascii</span><span class=\"token punctuation\">(</span>CurTok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>  <span class=\"token comment\">// Make sure it's a declared binop.</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>  <span class=\"token keyword\">int</span> TokPrec <span class=\"token operator\">=</span> BinopPrecedence<span class=\"token punctuation\">[</span>CurTok<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>TokPrec <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>  <span class=\"token keyword\">return</span> TokPrec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre></pre></td></tr><tr><td data-num=\"225\"></td><td><pre><span class=\"token comment\">/// LogError* - These are little helper functions for error handling.</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>ExprAST<span class=\"token operator\">></span> <span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>Str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Error: %s\\n\"</span><span class=\"token punctuation\">,</span> Str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>PrototypeAST<span class=\"token operator\">></span> <span class=\"token function\">LogErrorP</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>Str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>  <span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span>Str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre></pre></td></tr><tr><td data-num=\"236\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>ExprAST<span class=\"token operator\">></span> <span class=\"token function\">ParseExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre></pre></td></tr><tr><td data-num=\"238\"></td><td><pre><span class=\"token comment\">/// numberexpr ::= number</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>ExprAST<span class=\"token operator\">></span> <span class=\"token function\">ParseNumberExpr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>  <span class=\"token keyword\">auto</span> Result <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>NumberExprAST<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>NumVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>  <span class=\"token function\">getNextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// consume the number</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>  <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>Result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre></pre></td></tr><tr><td data-num=\"245\"></td><td><pre><span class=\"token comment\">/// parenexpr ::= '(' expression ')'</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>ExprAST<span class=\"token operator\">></span> <span class=\"token function\">ParseParenExpr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>  <span class=\"token function\">getNextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eat (.</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>  <span class=\"token keyword\">auto</span> V <span class=\"token operator\">=</span> <span class=\"token function\">ParseExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>V<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CurTok <span class=\"token operator\">!=</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"expected ')'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>  <span class=\"token function\">getNextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eat ).</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>  <span class=\"token keyword\">return</span> V<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre></pre></td></tr><tr><td data-num=\"258\"></td><td><pre><span class=\"token comment\">/// identifierexpr</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre><span class=\"token comment\">///   ::= identifier</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre><span class=\"token comment\">///   ::= identifier '(' expression* ')'</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>ExprAST<span class=\"token operator\">></span> <span class=\"token function\">ParseIdentifierExpr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string IdName <span class=\"token operator\">=</span> IdentifierStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>  <span class=\"token function\">getNextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eat identifier.</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CurTok <span class=\"token operator\">!=</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Simple variable ref.</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>    <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>VariableExprAST<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>IdName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>  <span class=\"token comment\">// Call.</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>  <span class=\"token function\">getNextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eat (</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>ExprAST<span class=\"token operator\">>></span> Args<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CurTok <span class=\"token operator\">!=</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> Arg <span class=\"token operator\">=</span> <span class=\"token function\">ParseExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>        Args<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>Arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>      <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CurTok <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CurTok <span class=\"token operator\">!=</span> <span class=\"token char\">','</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Expected ')' or ',' in argument list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>      <span class=\"token function\">getNextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>  <span class=\"token comment\">// Eat the ')'.</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>  <span class=\"token function\">getNextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>  <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CallExprAST<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>IdName<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre></pre></td></tr><tr><td data-num=\"294\"></td><td><pre><span class=\"token comment\">/// primary</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre><span class=\"token comment\">///   ::= identifierexpr</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre><span class=\"token comment\">///   ::= numberexpr</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre><span class=\"token comment\">///   ::= parenexpr</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>ExprAST<span class=\"token operator\">></span> <span class=\"token function\">ParsePrimary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>CurTok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unknown token when expecting an expression\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>  <span class=\"token keyword\">case</span> tok_identifier<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">ParseIdentifierExpr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>  <span class=\"token keyword\">case</span> tok_number<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">ParseNumberExpr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token char\">'('</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">ParseParenExpr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre></pre></td></tr><tr><td data-num=\"311\"></td><td><pre><span class=\"token comment\">/// binoprhs</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre><span class=\"token comment\">///   ::= ('+' primary)*</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>ExprAST<span class=\"token operator\">></span> <span class=\"token function\">ParseBinOpRHS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ExprPrec<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"314\"></td><td><pre>                                              std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>ExprAST<span class=\"token operator\">></span> LHS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre>  <span class=\"token comment\">// If this is a binop, find its precedence.</span></pre></td></tr><tr><td data-num=\"316\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>    <span class=\"token keyword\">int</span> TokPrec <span class=\"token operator\">=</span> <span class=\"token function\">GetTokPrecedence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>    <span class=\"token comment\">// If this is a binop that binds at least as tightly as the current binop,</span></pre></td></tr><tr><td data-num=\"320\"></td><td><pre>    <span class=\"token comment\">// consume it, otherwise we are done.</span></pre></td></tr><tr><td data-num=\"321\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>TokPrec <span class=\"token operator\">&lt;</span> ExprPrec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"322\"></td><td><pre>      <span class=\"token keyword\">return</span> LHS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"323\"></td><td><pre></pre></td></tr><tr><td data-num=\"324\"></td><td><pre>    <span class=\"token comment\">// Okay, we know this is a binop.</span></pre></td></tr><tr><td data-num=\"325\"></td><td><pre>    <span class=\"token keyword\">int</span> BinOp <span class=\"token operator\">=</span> CurTok<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"326\"></td><td><pre>    <span class=\"token function\">getNextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eat binop</span></pre></td></tr><tr><td data-num=\"327\"></td><td><pre></pre></td></tr><tr><td data-num=\"328\"></td><td><pre>    <span class=\"token comment\">// Parse the primary expression after the binary operator.</span></pre></td></tr><tr><td data-num=\"329\"></td><td><pre>    <span class=\"token keyword\">auto</span> RHS <span class=\"token operator\">=</span> <span class=\"token function\">ParsePrimary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"330\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>RHS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"331\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"332\"></td><td><pre></pre></td></tr><tr><td data-num=\"333\"></td><td><pre>    <span class=\"token comment\">// If BinOp binds less tightly with RHS than the operator after RHS, let</span></pre></td></tr><tr><td data-num=\"334\"></td><td><pre>    <span class=\"token comment\">// the pending operator take RHS as its LHS.</span></pre></td></tr><tr><td data-num=\"335\"></td><td><pre>    <span class=\"token keyword\">int</span> NextPrec <span class=\"token operator\">=</span> <span class=\"token function\">GetTokPrecedence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"336\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>TokPrec <span class=\"token operator\">&lt;</span> NextPrec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"337\"></td><td><pre>      RHS <span class=\"token operator\">=</span> <span class=\"token function\">ParseBinOpRHS</span><span class=\"token punctuation\">(</span>TokPrec <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>RHS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"338\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>RHS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"339\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"340\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"341\"></td><td><pre></pre></td></tr><tr><td data-num=\"342\"></td><td><pre>    <span class=\"token comment\">// Merge LHS/RHS.</span></pre></td></tr><tr><td data-num=\"343\"></td><td><pre>    LHS <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"344\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>BinaryExprAST<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>BinOp<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>LHS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>RHS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"345\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"346\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"347\"></td><td><pre></pre></td></tr><tr><td data-num=\"348\"></td><td><pre><span class=\"token comment\">/// expression</span></pre></td></tr><tr><td data-num=\"349\"></td><td><pre><span class=\"token comment\">///   ::= primary binoprhs</span></pre></td></tr><tr><td data-num=\"350\"></td><td><pre><span class=\"token comment\">///</span></pre></td></tr><tr><td data-num=\"351\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>ExprAST<span class=\"token operator\">></span> <span class=\"token function\">ParseExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"352\"></td><td><pre>  <span class=\"token keyword\">auto</span> LHS <span class=\"token operator\">=</span> <span class=\"token function\">ParsePrimary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"353\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>LHS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"354\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"355\"></td><td><pre></pre></td></tr><tr><td data-num=\"356\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">ParseBinOpRHS</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>LHS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"357\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"358\"></td><td><pre></pre></td></tr><tr><td data-num=\"359\"></td><td><pre><span class=\"token comment\">/// prototype</span></pre></td></tr><tr><td data-num=\"360\"></td><td><pre><span class=\"token comment\">///   ::= id '(' id* ')'</span></pre></td></tr><tr><td data-num=\"361\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>PrototypeAST<span class=\"token operator\">></span> <span class=\"token function\">ParsePrototype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"362\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CurTok <span class=\"token operator\">!=</span> tok_identifier<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"363\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">LogErrorP</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Expected function name in prototype\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"364\"></td><td><pre></pre></td></tr><tr><td data-num=\"365\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string FnName <span class=\"token operator\">=</span> IdentifierStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"366\"></td><td><pre>  <span class=\"token function\">getNextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"367\"></td><td><pre></pre></td></tr><tr><td data-num=\"368\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CurTok <span class=\"token operator\">!=</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"369\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">LogErrorP</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Expected '(' in prototype\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"370\"></td><td><pre></pre></td></tr><tr><td data-num=\"371\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span> ArgNames<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"372\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getNextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> tok_identifier<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"373\"></td><td><pre>    ArgNames<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>IdentifierStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"374\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CurTok <span class=\"token operator\">!=</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"375\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">LogErrorP</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Expected ')' in prototype\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"376\"></td><td><pre></pre></td></tr><tr><td data-num=\"377\"></td><td><pre>  <span class=\"token comment\">// success.</span></pre></td></tr><tr><td data-num=\"378\"></td><td><pre>  <span class=\"token function\">getNextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eat ')'.</span></pre></td></tr><tr><td data-num=\"379\"></td><td><pre></pre></td></tr><tr><td data-num=\"380\"></td><td><pre>  <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>PrototypeAST<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>FnName<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ArgNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"381\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"382\"></td><td><pre></pre></td></tr><tr><td data-num=\"383\"></td><td><pre><span class=\"token comment\">/// definition ::= 'def' prototype expression</span></pre></td></tr><tr><td data-num=\"384\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>FunctionAST<span class=\"token operator\">></span> <span class=\"token function\">ParseDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"385\"></td><td><pre>  <span class=\"token function\">getNextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eat def.</span></pre></td></tr><tr><td data-num=\"386\"></td><td><pre>  <span class=\"token keyword\">auto</span> Proto <span class=\"token operator\">=</span> <span class=\"token function\">ParsePrototype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"387\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Proto<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"388\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"389\"></td><td><pre></pre></td></tr><tr><td data-num=\"390\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> E <span class=\"token operator\">=</span> <span class=\"token function\">ParseExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"391\"></td><td><pre>    <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>FunctionAST<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>Proto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"392\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"393\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"394\"></td><td><pre></pre></td></tr><tr><td data-num=\"395\"></td><td><pre><span class=\"token comment\">/// toplevelexpr ::= expression</span></pre></td></tr><tr><td data-num=\"396\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>FunctionAST<span class=\"token operator\">></span> <span class=\"token function\">ParseTopLevelExpr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"397\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> E <span class=\"token operator\">=</span> <span class=\"token function\">ParseExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"398\"></td><td><pre>    <span class=\"token comment\">// Make an anonymous proto.</span></pre></td></tr><tr><td data-num=\"399\"></td><td><pre>    <span class=\"token keyword\">auto</span> Proto <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>PrototypeAST<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"__anon_expr\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"400\"></td><td><pre>                                                 std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"401\"></td><td><pre>    <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>FunctionAST<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>Proto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"402\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"403\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"404\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"405\"></td><td><pre></pre></td></tr><tr><td data-num=\"406\"></td><td><pre><span class=\"token comment\">/// external ::= 'extern' prototype</span></pre></td></tr><tr><td data-num=\"407\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>PrototypeAST<span class=\"token operator\">></span> <span class=\"token function\">ParseExtern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"408\"></td><td><pre>  <span class=\"token function\">getNextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eat extern.</span></pre></td></tr><tr><td data-num=\"409\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">ParsePrototype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"410\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"411\"></td><td><pre></pre></td></tr><tr><td data-num=\"412\"></td><td><pre><span class=\"token comment\">//===----------------------------------------------------------------------===//</span></pre></td></tr><tr><td data-num=\"413\"></td><td><pre><span class=\"token comment\">// Code Generation</span></pre></td></tr><tr><td data-num=\"414\"></td><td><pre><span class=\"token comment\">//===----------------------------------------------------------------------===//</span></pre></td></tr><tr><td data-num=\"415\"></td><td><pre></pre></td></tr><tr><td data-num=\"416\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>LLVMContext<span class=\"token operator\">></span> TheContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"417\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>Module<span class=\"token operator\">></span> TheModule<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"418\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>IRBuilder<span class=\"token operator\">&lt;</span><span class=\"token operator\">>></span> Builder<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"419\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> Value <span class=\"token operator\">*</span><span class=\"token operator\">></span> NamedValues<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"420\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>KaleidoscopeJIT<span class=\"token operator\">></span> TheJIT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"421\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>FunctionPassManager<span class=\"token operator\">></span> TheFPM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"422\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>LoopAnalysisManager<span class=\"token operator\">></span> TheLAM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"423\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>FunctionAnalysisManager<span class=\"token operator\">></span> TheFAM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"424\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>CGSCCAnalysisManager<span class=\"token operator\">></span> TheCGAM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"425\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>ModuleAnalysisManager<span class=\"token operator\">></span> TheMAM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"426\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>PassInstrumentationCallbacks<span class=\"token operator\">></span> ThePIC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"427\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>StandardInstrumentations<span class=\"token operator\">></span> TheSI<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"428\"></td><td><pre><span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>PrototypeAST<span class=\"token operator\">>></span> FunctionProtos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"429\"></td><td><pre><span class=\"token keyword\">static</span> ExitOnError ExitOnErr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"430\"></td><td><pre></pre></td></tr><tr><td data-num=\"431\"></td><td><pre>Value <span class=\"token operator\">*</span><span class=\"token function\">LogErrorV</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>Str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"432\"></td><td><pre>  <span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span>Str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"433\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"434\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"435\"></td><td><pre></pre></td></tr><tr><td data-num=\"436\"></td><td><pre>Function <span class=\"token operator\">*</span><span class=\"token function\">getFunction</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string Name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"437\"></td><td><pre>  <span class=\"token comment\">// First, see if the function has already been added to the current module.</span></pre></td></tr><tr><td data-num=\"438\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">*</span>F <span class=\"token operator\">=</span> TheModule<span class=\"token operator\">-></span><span class=\"token function\">getFunction</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"439\"></td><td><pre>    <span class=\"token keyword\">return</span> F<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"440\"></td><td><pre></pre></td></tr><tr><td data-num=\"441\"></td><td><pre>  <span class=\"token comment\">// If not, check whether we can codegen the declaration from some existing</span></pre></td></tr><tr><td data-num=\"442\"></td><td><pre>  <span class=\"token comment\">// prototype.</span></pre></td></tr><tr><td data-num=\"443\"></td><td><pre>  <span class=\"token keyword\">auto</span> FI <span class=\"token operator\">=</span> FunctionProtos<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"444\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>FI <span class=\"token operator\">!=</span> FunctionProtos<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"445\"></td><td><pre>    <span class=\"token keyword\">return</span> FI<span class=\"token operator\">-></span>second<span class=\"token operator\">-></span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"446\"></td><td><pre></pre></td></tr><tr><td data-num=\"447\"></td><td><pre>  <span class=\"token comment\">// If no existing prototype exists, return null.</span></pre></td></tr><tr><td data-num=\"448\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"449\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"450\"></td><td><pre></pre></td></tr><tr><td data-num=\"451\"></td><td><pre>Value <span class=\"token operator\">*</span><span class=\"token class-name\">NumberExprAST</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"452\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token class-name\">ConstantFP</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>TheContext<span class=\"token punctuation\">,</span> <span class=\"token function\">APFloat</span><span class=\"token punctuation\">(</span>Val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"453\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"454\"></td><td><pre></pre></td></tr><tr><td data-num=\"455\"></td><td><pre>Value <span class=\"token operator\">*</span><span class=\"token class-name\">VariableExprAST</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"456\"></td><td><pre>  <span class=\"token comment\">// Look this variable up in the function.</span></pre></td></tr><tr><td data-num=\"457\"></td><td><pre>  Value <span class=\"token operator\">*</span>V <span class=\"token operator\">=</span> NamedValues<span class=\"token punctuation\">[</span>Name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"458\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>V<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"459\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">LogErrorV</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown variable name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"460\"></td><td><pre>  <span class=\"token keyword\">return</span> V<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"461\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"462\"></td><td><pre></pre></td></tr><tr><td data-num=\"463\"></td><td><pre>Value <span class=\"token operator\">*</span><span class=\"token class-name\">BinaryExprAST</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"464\"></td><td><pre>  Value <span class=\"token operator\">*</span>L <span class=\"token operator\">=</span> LHS<span class=\"token operator\">-></span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"465\"></td><td><pre>  Value <span class=\"token operator\">*</span>R <span class=\"token operator\">=</span> RHS<span class=\"token operator\">-></span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"466\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>L <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>R<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"467\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"468\"></td><td><pre></pre></td></tr><tr><td data-num=\"469\"></td><td><pre>  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>Op<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"470\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token char\">'+'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"471\"></td><td><pre>    <span class=\"token keyword\">return</span> Builder<span class=\"token operator\">-></span><span class=\"token function\">CreateFAdd</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">,</span> <span class=\"token string\">\"addtmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"472\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token char\">'-'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"473\"></td><td><pre>    <span class=\"token keyword\">return</span> Builder<span class=\"token operator\">-></span><span class=\"token function\">CreateFSub</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">,</span> <span class=\"token string\">\"subtmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"474\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token char\">'*'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"475\"></td><td><pre>    <span class=\"token keyword\">return</span> Builder<span class=\"token operator\">-></span><span class=\"token function\">CreateFMul</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">,</span> <span class=\"token string\">\"multmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"476\"></td><td><pre>  <span class=\"token keyword\">case</span> <span class=\"token char\">'&lt;'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"477\"></td><td><pre>    L <span class=\"token operator\">=</span> Builder<span class=\"token operator\">-></span><span class=\"token function\">CreateFCmpULT</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">,</span> <span class=\"token string\">\"cmptmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"478\"></td><td><pre>    <span class=\"token comment\">// Convert bool 0/1 to double 0.0 or 1.0</span></pre></td></tr><tr><td data-num=\"479\"></td><td><pre>    <span class=\"token keyword\">return</span> Builder<span class=\"token operator\">-></span><span class=\"token function\">CreateUIToFP</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Type</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDoubleTy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>TheContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"booltmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"480\"></td><td><pre>  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"481\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">LogErrorV</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid binary operator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"482\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"483\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"484\"></td><td><pre></pre></td></tr><tr><td data-num=\"485\"></td><td><pre>Value <span class=\"token operator\">*</span><span class=\"token class-name\">CallExprAST</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"486\"></td><td><pre>  <span class=\"token comment\">// Look up the name in the global module table.</span></pre></td></tr><tr><td data-num=\"487\"></td><td><pre>  Function <span class=\"token operator\">*</span>CalleeF <span class=\"token operator\">=</span> <span class=\"token function\">getFunction</span><span class=\"token punctuation\">(</span>Callee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"488\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>CalleeF<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"489\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">LogErrorV</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown function referenced\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"490\"></td><td><pre></pre></td></tr><tr><td data-num=\"491\"></td><td><pre>  <span class=\"token comment\">// If argument mismatch error.</span></pre></td></tr><tr><td data-num=\"492\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CalleeF<span class=\"token operator\">-></span><span class=\"token function\">arg_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> Args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"493\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">LogErrorV</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Incorrect # arguments passed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"494\"></td><td><pre></pre></td></tr><tr><td data-num=\"495\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Value <span class=\"token operator\">*</span><span class=\"token operator\">></span> ArgsV<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"496\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> e <span class=\"token operator\">=</span> Args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> e<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"497\"></td><td><pre>    ArgsV<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"498\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ArgsV<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"499\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"500\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"501\"></td><td><pre></pre></td></tr><tr><td data-num=\"502\"></td><td><pre>  <span class=\"token keyword\">return</span> Builder<span class=\"token operator\">-></span><span class=\"token function\">CreateCall</span><span class=\"token punctuation\">(</span>CalleeF<span class=\"token punctuation\">,</span> ArgsV<span class=\"token punctuation\">,</span> <span class=\"token string\">\"calltmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"503\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"504\"></td><td><pre></pre></td></tr><tr><td data-num=\"505\"></td><td><pre>Function <span class=\"token operator\">*</span><span class=\"token class-name\">PrototypeAST</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"506\"></td><td><pre>  <span class=\"token comment\">// Make the function type:  double(double,double) etc.</span></pre></td></tr><tr><td data-num=\"507\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Type <span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token function\">Doubles</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Type</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDoubleTy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>TheContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"508\"></td><td><pre>  FunctionType <span class=\"token operator\">*</span>FT <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"509\"></td><td><pre>      <span class=\"token class-name\">FunctionType</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Type</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getDoubleTy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>TheContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Doubles<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"510\"></td><td><pre></pre></td></tr><tr><td data-num=\"511\"></td><td><pre>  Function <span class=\"token operator\">*</span>F <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"512\"></td><td><pre>      <span class=\"token class-name\">Function</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>FT<span class=\"token punctuation\">,</span> Function<span class=\"token double-colon punctuation\">::</span>ExternalLinkage<span class=\"token punctuation\">,</span> Name<span class=\"token punctuation\">,</span> TheModule<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"513\"></td><td><pre></pre></td></tr><tr><td data-num=\"514\"></td><td><pre>  <span class=\"token comment\">// Set names for all arguments.</span></pre></td></tr><tr><td data-num=\"515\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> Idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"516\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>Arg <span class=\"token operator\">:</span> F<span class=\"token operator\">-></span><span class=\"token function\">args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"517\"></td><td><pre>    Arg<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">[</span>Idx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"518\"></td><td><pre></pre></td></tr><tr><td data-num=\"519\"></td><td><pre>  <span class=\"token keyword\">return</span> F<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"520\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"521\"></td><td><pre></pre></td></tr><tr><td data-num=\"522\"></td><td><pre>Function <span class=\"token operator\">*</span><span class=\"token class-name\">FunctionAST</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"523\"></td><td><pre>  <span class=\"token comment\">// Transfer ownership of the prototype to the FunctionProtos map, but keep a</span></pre></td></tr><tr><td data-num=\"524\"></td><td><pre>  <span class=\"token comment\">// reference to it for use below.</span></pre></td></tr><tr><td data-num=\"525\"></td><td><pre>  <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>P <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>Proto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"526\"></td><td><pre>  FunctionProtos<span class=\"token punctuation\">[</span>Proto<span class=\"token operator\">-></span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>Proto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"527\"></td><td><pre>  Function <span class=\"token operator\">*</span>TheFunction <span class=\"token operator\">=</span> <span class=\"token function\">getFunction</span><span class=\"token punctuation\">(</span>P<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"528\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>TheFunction<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"529\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"530\"></td><td><pre></pre></td></tr><tr><td data-num=\"531\"></td><td><pre>  <span class=\"token comment\">// Create a new basic block to start insertion into.</span></pre></td></tr><tr><td data-num=\"532\"></td><td><pre>  BasicBlock <span class=\"token operator\">*</span>BB <span class=\"token operator\">=</span> <span class=\"token class-name\">BasicBlock</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>TheContext<span class=\"token punctuation\">,</span> <span class=\"token string\">\"entry\"</span><span class=\"token punctuation\">,</span> TheFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"533\"></td><td><pre>  Builder<span class=\"token operator\">-></span><span class=\"token function\">SetInsertPoint</span><span class=\"token punctuation\">(</span>BB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"534\"></td><td><pre></pre></td></tr><tr><td data-num=\"535\"></td><td><pre>  <span class=\"token comment\">// Record the function arguments in the NamedValues map.</span></pre></td></tr><tr><td data-num=\"536\"></td><td><pre>  NamedValues<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"537\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>Arg <span class=\"token operator\">:</span> TheFunction<span class=\"token operator\">-></span><span class=\"token function\">args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"538\"></td><td><pre>    NamedValues<span class=\"token punctuation\">[</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>Arg<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"539\"></td><td><pre></pre></td></tr><tr><td data-num=\"540\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Value <span class=\"token operator\">*</span>RetVal <span class=\"token operator\">=</span> Body<span class=\"token operator\">-></span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"541\"></td><td><pre>    <span class=\"token comment\">// Finish off the function.</span></pre></td></tr><tr><td data-num=\"542\"></td><td><pre>    Builder<span class=\"token operator\">-></span><span class=\"token function\">CreateRet</span><span class=\"token punctuation\">(</span>RetVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"543\"></td><td><pre></pre></td></tr><tr><td data-num=\"544\"></td><td><pre>    <span class=\"token comment\">// Validate the generated code, checking for consistency.</span></pre></td></tr><tr><td data-num=\"545\"></td><td><pre>    <span class=\"token function\">verifyFunction</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>TheFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"546\"></td><td><pre></pre></td></tr><tr><td data-num=\"547\"></td><td><pre>    <span class=\"token comment\">// Run the optimizer on the function.</span></pre></td></tr><tr><td data-num=\"548\"></td><td><pre>    TheFPM<span class=\"token operator\">-></span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>TheFunction<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>TheFAM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"549\"></td><td><pre></pre></td></tr><tr><td data-num=\"550\"></td><td><pre>    <span class=\"token keyword\">return</span> TheFunction<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"551\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"552\"></td><td><pre></pre></td></tr><tr><td data-num=\"553\"></td><td><pre>  <span class=\"token comment\">// Error reading body, remove function.</span></pre></td></tr><tr><td data-num=\"554\"></td><td><pre>  TheFunction<span class=\"token operator\">-></span><span class=\"token function\">eraseFromParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"555\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"556\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"557\"></td><td><pre></pre></td></tr><tr><td data-num=\"558\"></td><td><pre><span class=\"token comment\">//===----------------------------------------------------------------------===//</span></pre></td></tr><tr><td data-num=\"559\"></td><td><pre><span class=\"token comment\">// Top-Level parsing and JIT Driver</span></pre></td></tr><tr><td data-num=\"560\"></td><td><pre><span class=\"token comment\">//===----------------------------------------------------------------------===//</span></pre></td></tr><tr><td data-num=\"561\"></td><td><pre></pre></td></tr><tr><td data-num=\"562\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">InitializeModuleAndManagers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"563\"></td><td><pre>  <span class=\"token comment\">// Open a new context and module.</span></pre></td></tr><tr><td data-num=\"564\"></td><td><pre>  TheContext <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>LLVMContext<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"565\"></td><td><pre>  TheModule <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Module<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"KaleidoscopeJIT\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>TheContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"566\"></td><td><pre>  TheModule<span class=\"token operator\">-></span><span class=\"token function\">setDataLayout</span><span class=\"token punctuation\">(</span>TheJIT<span class=\"token operator\">-></span><span class=\"token function\">getDataLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"567\"></td><td><pre></pre></td></tr><tr><td data-num=\"568\"></td><td><pre>  <span class=\"token comment\">// Create a new builder for the module.</span></pre></td></tr><tr><td data-num=\"569\"></td><td><pre>  Builder <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>IRBuilder<span class=\"token operator\">&lt;</span><span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>TheContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"570\"></td><td><pre></pre></td></tr><tr><td data-num=\"571\"></td><td><pre>  <span class=\"token comment\">// Create new pass and analysis managers.</span></pre></td></tr><tr><td data-num=\"572\"></td><td><pre>  TheFPM <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>FunctionPassManager<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"573\"></td><td><pre>  TheLAM <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>LoopAnalysisManager<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"574\"></td><td><pre>  TheFAM <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>FunctionAnalysisManager<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"575\"></td><td><pre>  TheCGAM <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CGSCCAnalysisManager<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"576\"></td><td><pre>  TheMAM <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ModuleAnalysisManager<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"577\"></td><td><pre>  ThePIC <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>PassInstrumentationCallbacks<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"578\"></td><td><pre>  TheSI <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>StandardInstrumentations<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>TheContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"579\"></td><td><pre>                                                     <span class=\"token comment\">/*DebugLogging*/</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"580\"></td><td><pre>  TheSI<span class=\"token operator\">-></span><span class=\"token function\">registerCallbacks</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ThePIC<span class=\"token punctuation\">,</span> TheMAM<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"581\"></td><td><pre></pre></td></tr><tr><td data-num=\"582\"></td><td><pre>  <span class=\"token comment\">// Add transform passes.</span></pre></td></tr><tr><td data-num=\"583\"></td><td><pre>  <span class=\"token comment\">// Do simple \"peephole\" optimizations and bit-twiddling optzns.</span></pre></td></tr><tr><td data-num=\"584\"></td><td><pre>  TheFPM<span class=\"token operator\">-></span><span class=\"token function\">addPass</span><span class=\"token punctuation\">(</span><span class=\"token function\">InstCombinePass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"585\"></td><td><pre>  <span class=\"token comment\">// Reassociate expressions.</span></pre></td></tr><tr><td data-num=\"586\"></td><td><pre>  TheFPM<span class=\"token operator\">-></span><span class=\"token function\">addPass</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReassociatePass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"587\"></td><td><pre>  <span class=\"token comment\">// Eliminate Common SubExpressions.</span></pre></td></tr><tr><td data-num=\"588\"></td><td><pre>  TheFPM<span class=\"token operator\">-></span><span class=\"token function\">addPass</span><span class=\"token punctuation\">(</span><span class=\"token function\">GVNPass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"589\"></td><td><pre>  <span class=\"token comment\">// Simplify the control flow graph (deleting unreachable blocks, etc).</span></pre></td></tr><tr><td data-num=\"590\"></td><td><pre>  TheFPM<span class=\"token operator\">-></span><span class=\"token function\">addPass</span><span class=\"token punctuation\">(</span><span class=\"token function\">SimplifyCFGPass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"591\"></td><td><pre></pre></td></tr><tr><td data-num=\"592\"></td><td><pre>  <span class=\"token comment\">// Register analysis passes used in these transform passes.</span></pre></td></tr><tr><td data-num=\"593\"></td><td><pre>  PassBuilder PB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"594\"></td><td><pre>  PB<span class=\"token punctuation\">.</span><span class=\"token function\">registerModuleAnalyses</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>TheMAM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"595\"></td><td><pre>  PB<span class=\"token punctuation\">.</span><span class=\"token function\">registerFunctionAnalyses</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>TheFAM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"596\"></td><td><pre>  PB<span class=\"token punctuation\">.</span><span class=\"token function\">crossRegisterProxies</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>TheLAM<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>TheFAM<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>TheCGAM<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>TheMAM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"597\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"598\"></td><td><pre></pre></td></tr><tr><td data-num=\"599\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">HandleDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"600\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> FnAST <span class=\"token operator\">=</span> <span class=\"token function\">ParseDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"601\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">*</span>FnIR <span class=\"token operator\">=</span> FnAST<span class=\"token operator\">-></span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"602\"></td><td><pre>      <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Read function definition:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"603\"></td><td><pre>      FnIR<span class=\"token operator\">-></span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"604\"></td><td><pre>      <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"605\"></td><td><pre>      <span class=\"token function\">ExitOnErr</span><span class=\"token punctuation\">(</span>TheJIT<span class=\"token operator\">-></span><span class=\"token function\">addModule</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"606\"></td><td><pre>          <span class=\"token function\">ThreadSafeModule</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>TheModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>TheContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"607\"></td><td><pre>      <span class=\"token function\">InitializeModuleAndManagers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"608\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"609\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"610\"></td><td><pre>    <span class=\"token comment\">// Skip token for error recovery.</span></pre></td></tr><tr><td data-num=\"611\"></td><td><pre>    <span class=\"token function\">getNextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"612\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"613\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"614\"></td><td><pre></pre></td></tr><tr><td data-num=\"615\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">HandleExtern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"616\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> ProtoAST <span class=\"token operator\">=</span> <span class=\"token function\">ParseExtern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"617\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">*</span>FnIR <span class=\"token operator\">=</span> ProtoAST<span class=\"token operator\">-></span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"618\"></td><td><pre>      <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Read extern: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"619\"></td><td><pre>      FnIR<span class=\"token operator\">-></span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"620\"></td><td><pre>      <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"621\"></td><td><pre>      FunctionProtos<span class=\"token punctuation\">[</span>ProtoAST<span class=\"token operator\">-></span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ProtoAST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"622\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"623\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"624\"></td><td><pre>    <span class=\"token comment\">// Skip token for error recovery.</span></pre></td></tr><tr><td data-num=\"625\"></td><td><pre>    <span class=\"token function\">getNextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"626\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"627\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"628\"></td><td><pre></pre></td></tr><tr><td data-num=\"629\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">HandleTopLevelExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"630\"></td><td><pre>  <span class=\"token comment\">// Evaluate a top-level expression into an anonymous function.</span></pre></td></tr><tr><td data-num=\"631\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> FnAST <span class=\"token operator\">=</span> <span class=\"token function\">ParseTopLevelExpr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"632\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>FnAST<span class=\"token operator\">-></span><span class=\"token function\">codegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"633\"></td><td><pre>      <span class=\"token comment\">// Create a ResourceTracker to track JIT'd memory allocated to our</span></pre></td></tr><tr><td data-num=\"634\"></td><td><pre>      <span class=\"token comment\">// anonymous expression -- that way we can free it after executing.</span></pre></td></tr><tr><td data-num=\"635\"></td><td><pre>      <span class=\"token keyword\">auto</span> RT <span class=\"token operator\">=</span> TheJIT<span class=\"token operator\">-></span><span class=\"token function\">getMainJITDylib</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createResourceTracker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"636\"></td><td><pre></pre></td></tr><tr><td data-num=\"637\"></td><td><pre>      <span class=\"token keyword\">auto</span> TSM <span class=\"token operator\">=</span> <span class=\"token function\">ThreadSafeModule</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>TheModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>TheContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"638\"></td><td><pre>      <span class=\"token function\">ExitOnErr</span><span class=\"token punctuation\">(</span>TheJIT<span class=\"token operator\">-></span><span class=\"token function\">addModule</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>TSM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> RT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"639\"></td><td><pre>      <span class=\"token function\">InitializeModuleAndManagers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"640\"></td><td><pre></pre></td></tr><tr><td data-num=\"641\"></td><td><pre>      <span class=\"token comment\">// Search the JIT for the __anon_expr symbol.</span></pre></td></tr><tr><td data-num=\"642\"></td><td><pre>      <span class=\"token keyword\">auto</span> ExprSymbol <span class=\"token operator\">=</span> <span class=\"token function\">ExitOnErr</span><span class=\"token punctuation\">(</span>TheJIT<span class=\"token operator\">-></span><span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"__anon_expr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"643\"></td><td><pre></pre></td></tr><tr><td data-num=\"644\"></td><td><pre>      <span class=\"token comment\">// Get the symbol's address and cast it to the right type (takes no</span></pre></td></tr><tr><td data-num=\"645\"></td><td><pre>      <span class=\"token comment\">// arguments, returns a double) so we can call it as a native function.</span></pre></td></tr><tr><td data-num=\"646\"></td><td><pre>      <span class=\"token keyword\">double</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>FP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> ExprSymbol<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">toPtr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"647\"></td><td><pre>      <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Evaluated to %f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">FP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"648\"></td><td><pre></pre></td></tr><tr><td data-num=\"649\"></td><td><pre>      <span class=\"token comment\">// Delete the anonymous expression module from the JIT.</span></pre></td></tr><tr><td data-num=\"650\"></td><td><pre>      <span class=\"token function\">ExitOnErr</span><span class=\"token punctuation\">(</span>RT<span class=\"token operator\">-></span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"651\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"652\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"653\"></td><td><pre>    <span class=\"token comment\">// Skip token for error recovery.</span></pre></td></tr><tr><td data-num=\"654\"></td><td><pre>    <span class=\"token function\">getNextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"655\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"656\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"657\"></td><td><pre></pre></td></tr><tr><td data-num=\"658\"></td><td><pre><span class=\"token comment\">/// top ::= definition | external | expression | ';'</span></pre></td></tr><tr><td data-num=\"659\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">MainLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"660\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"661\"></td><td><pre>    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ready> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"662\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>CurTok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"663\"></td><td><pre>    <span class=\"token keyword\">case</span> tok_eof<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"664\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"665\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token char\">';'</span><span class=\"token operator\">:</span> <span class=\"token comment\">// ignore top-level semicolons.</span></pre></td></tr><tr><td data-num=\"666\"></td><td><pre>      <span class=\"token function\">getNextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"667\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"668\"></td><td><pre>    <span class=\"token keyword\">case</span> tok_def<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"669\"></td><td><pre>      <span class=\"token function\">HandleDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"670\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"671\"></td><td><pre>    <span class=\"token keyword\">case</span> tok_extern<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"672\"></td><td><pre>      <span class=\"token function\">HandleExtern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"673\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"674\"></td><td><pre>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"675\"></td><td><pre>      <span class=\"token function\">HandleTopLevelExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"676\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"677\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"678\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"679\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"680\"></td><td><pre></pre></td></tr><tr><td data-num=\"681\"></td><td><pre><span class=\"token comment\">//===----------------------------------------------------------------------===//</span></pre></td></tr><tr><td data-num=\"682\"></td><td><pre><span class=\"token comment\">// \"Library\" functions that can be \"extern'd\" from user code.</span></pre></td></tr><tr><td data-num=\"683\"></td><td><pre><span class=\"token comment\">//===----------------------------------------------------------------------===//</span></pre></td></tr><tr><td data-num=\"684\"></td><td><pre></pre></td></tr><tr><td data-num=\"685\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">_WIN32</span></span></pre></td></tr><tr><td data-num=\"686\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DLLEXPORT</span> <span class=\"token expression\"><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>dllexport<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"687\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"688\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DLLEXPORT</span></span></pre></td></tr><tr><td data-num=\"689\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"690\"></td><td><pre></pre></td></tr><tr><td data-num=\"691\"></td><td><pre><span class=\"token comment\">/// putchard - putchar that takes a double and returns 0.</span></pre></td></tr><tr><td data-num=\"692\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> DLLEXPORT <span class=\"token keyword\">double</span> <span class=\"token function\">putchard</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> X<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"693\"></td><td><pre>  <span class=\"token function\">fputc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>X<span class=\"token punctuation\">,</span> <span class=\"token constant\">stderr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"694\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"695\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"696\"></td><td><pre></pre></td></tr><tr><td data-num=\"697\"></td><td><pre><span class=\"token comment\">/// printd - printf that takes a double prints it as \"%f\\n\", returning 0.</span></pre></td></tr><tr><td data-num=\"698\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> DLLEXPORT <span class=\"token keyword\">double</span> <span class=\"token function\">printd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> X<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"699\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%f\\n\"</span><span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"700\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"701\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"702\"></td><td><pre></pre></td></tr><tr><td data-num=\"703\"></td><td><pre><span class=\"token comment\">//===----------------------------------------------------------------------===//</span></pre></td></tr><tr><td data-num=\"704\"></td><td><pre><span class=\"token comment\">// Main driver code.</span></pre></td></tr><tr><td data-num=\"705\"></td><td><pre><span class=\"token comment\">//===----------------------------------------------------------------------===//</span></pre></td></tr><tr><td data-num=\"706\"></td><td><pre></pre></td></tr><tr><td data-num=\"707\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"708\"></td><td><pre>  <span class=\"token function\">InitializeNativeTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"709\"></td><td><pre>  <span class=\"token function\">InitializeNativeTargetAsmPrinter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"710\"></td><td><pre>  <span class=\"token function\">InitializeNativeTargetAsmParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"711\"></td><td><pre></pre></td></tr><tr><td data-num=\"712\"></td><td><pre>  <span class=\"token comment\">// Install standard binary operators.</span></pre></td></tr><tr><td data-num=\"713\"></td><td><pre>  <span class=\"token comment\">// 1 is lowest precedence.</span></pre></td></tr><tr><td data-num=\"714\"></td><td><pre>  BinopPrecedence<span class=\"token punctuation\">[</span><span class=\"token char\">'&lt;'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"715\"></td><td><pre>  BinopPrecedence<span class=\"token punctuation\">[</span><span class=\"token char\">'+'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"716\"></td><td><pre>  BinopPrecedence<span class=\"token punctuation\">[</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"717\"></td><td><pre>  BinopPrecedence<span class=\"token punctuation\">[</span><span class=\"token char\">'*'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// highest.</span></pre></td></tr><tr><td data-num=\"718\"></td><td><pre></pre></td></tr><tr><td data-num=\"719\"></td><td><pre>  <span class=\"token comment\">// Prime the first token.</span></pre></td></tr><tr><td data-num=\"720\"></td><td><pre>  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ready> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"721\"></td><td><pre>  <span class=\"token function\">getNextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"722\"></td><td><pre></pre></td></tr><tr><td data-num=\"723\"></td><td><pre>  TheJIT <span class=\"token operator\">=</span> <span class=\"token function\">ExitOnErr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KaleidoscopeJIT</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"724\"></td><td><pre></pre></td></tr><tr><td data-num=\"725\"></td><td><pre>  <span class=\"token function\">InitializeModuleAndManagers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"726\"></td><td><pre></pre></td></tr><tr><td data-num=\"727\"></td><td><pre>  <span class=\"token comment\">// Run the main \"interpreter loop\" now.</span></pre></td></tr><tr><td data-num=\"728\"></td><td><pre>  <span class=\"token function\">MainLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"729\"></td><td><pre></pre></td></tr><tr><td data-num=\"730\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"731\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编译这段代码需要 LLVM 3.7 及以上的版本，Ubuntu 上命令行默认安装的 llvm 大概不行。</p>\n<p>可以将新的 llvm 安装在指定的文件夹里，然后用如下命令编译和执行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/home/user/your/path/of/llvm/bin/clang++ <span class=\"token parameter variable\">-g</span> <span class=\"token parameter variable\">-O3</span> toy.cpp <span class=\"token variable\"><span class=\"token variable\">`</span>/home/user/your/path/of/llvm/bin/llvm-config <span class=\"token parameter variable\">--cxxflags</span> <span class=\"token parameter variable\">--ldflags</span> --system-libs <span class=\"token parameter variable\">--libs</span> core orcjit native<span class=\"token variable\">`</span></span> <span class=\"token parameter variable\">-o</span> toy.x</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./toy.x</pre></td></tr></table></figure><h1 id=\"运行示例\"><a class=\"anchor\" href=\"#运行示例\">#</a> 运行示例</h1>\n<p>当前编译器能够识别三种顶级 Item，分别是：顶级表达式、外部函数、函数定义。</p>\n<p>识别函数定义：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ready<span class=\"token operator\">></span> def foo<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> x + <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ready<span class=\"token operator\">></span> Read <span class=\"token keyword\">function</span> definition:define double @foo<span class=\"token punctuation\">(</span>double %x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>entry:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  %addtmp <span class=\"token operator\">=</span> fadd double %x, <span class=\"token number\">2</span>.000000e+00</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  ret double %addtmp</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>识别外部函数：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ready<span class=\"token operator\">></span> extern cos<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ready<span class=\"token operator\">></span> Read extern: <span class=\"token builtin class-name\">declare</span> double @cos<span class=\"token punctuation\">(</span>double<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>识别顶级表达式，并给出结果：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ready<span class=\"token operator\">></span> foo<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> + cos<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> +1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ready<span class=\"token operator\">></span> Read top-level expression:define double @<span class=\"token function-name function\">__anon_expr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>entry:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  %calltmp <span class=\"token operator\">=</span> call double @foo<span class=\"token punctuation\">(</span>double <span class=\"token number\">2</span>.000000e+00<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  %calltmp1 <span class=\"token operator\">=</span> call double @cos<span class=\"token punctuation\">(</span>double <span class=\"token number\">0</span>.000000e+00<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  %addtmp <span class=\"token operator\">=</span> fadd double %calltmp, <span class=\"token number\">1</span>.000000e+00</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  %addtmp2 <span class=\"token operator\">=</span> fadd double %addtmp, <span class=\"token number\">1</span>.000000e+00</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  ret double %addtmp2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Evaluated to <span class=\"token number\">6.000000</span></pre></td></tr></table></figure><h1 id=\"ast结构\"><a class=\"anchor\" href=\"#ast结构\">#</a> AST 结构</h1>\n<p>抽象语法树结构如图 1 所示</p>\n<p><img loading=\"lazy\" data-src=\"1741864707619.jpg\" alt=\"抽象语法树结构\"></p>\n<p>图中可以看到当前编译器识别的三种顶级 Item：函数、外部函数、顶级表达式。 经总结，抽象语法树可以分成三个层次。第一层就是顶级 Item：图中黄色表示的 Function (函数) 、 Extern (外部函数)、TopLevelExpr (顶级表达式)。</p>\n<p>第二层是顶级 Item 的结构：图中草绿色的 Proto (原型)、body (主体)。 函数包含原型和主体，外部函数只有原型，顶级表达式官方例子则给了个匿名原型和主体。</p>\n<p>前一小节中给了三个运行例子：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> x <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>extern cos<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>foo<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> cos<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>图 2 将这三个例子表示在抽象语法树结构中，大家可以和这三个例子的输出进行对照。</p>\n<p><img loading=\"lazy\" data-src=\"1741864893241.jpg\" alt=\"结构对照\"></p>\n<p>从这个图上就很容易理解抽象语法树的结构了。</p>\n<h1 id=\"表达式\"><a class=\"anchor\" href=\"#表达式\">#</a> 表达式</h1>\n<p>从上图看，抽象语法树就剩下一个难点：表达式。</p>\n<p>表达式的转换识别要比前述 AST 要复杂的多，它不是简单的顺序结构，而是较复杂的递归结构。假如我还记得词法分析、语法分析中的有限状态自动机、下推自动机，还可能理解的深一点，现在只能跟着官方代码勉强理解。（当年学习编译原理的时候，感觉处于一种腾空的状态，够不到，踩不着）</p>\n<p>为了便于把握，我也把它分成三个层次，如图 3 所示：</p>\n<p><img loading=\"lazy\" data-src=\"1741864930986.jpg\" alt=\"表达式层次结构\"></p>\n<p>三个层次用不同的颜色区分。</p>\n<h2 id=\"红色是顶层表达式解析函数\"><a class=\"anchor\" href=\"#红色是顶层表达式解析函数\">#</a> 红色是顶层表达式解析函数：</h2>\n<p>其中 <code>ParseExpress</code>  是 TopLevelExpr 表达式的入口，当然也是子表达式的入口。它认为所有表达式都是 <code>LHS OP RHS</code>  的结构（LHS 是左表达式，RHS 是右表达式），所以它会将 LHS 交给 <code>ParsePrimary</code>  处理， <code>OP RHS</code>  交给 <code>ParseBinOpRHS</code>  处理。</p>\n<p><code>ParseBinOpRHS</code>  用来递归地（它有个指向自身的箭头）识别 <code>OP+RHS</code>  结构（因为 <code>RHS</code>  中也可能包含 <code>OP+RHS</code> ）。它将 <code>OP</code>  直接构建为第三层的基本表达式 <code>BinaryExpr</code> ，将 <code>RHS</code>  丢给 <code>ParsePrimary</code>  处理。</p>\n<p><code>ParsePrimary</code>  收到的表达式只有三种结构：数字表达式、括号表达式、标识表达式。它将不同的表达式交给不同的解析函数。</p>\n<h2 id=\"黄色是中间表达式解析函数\"><a class=\"anchor\" href=\"#黄色是中间表达式解析函数\">#</a> 黄色是中间表达式解析函数：</h2>\n<p>数字表达式、括号表达式、标识表达式，按照其本身的特点设计解析函数：</p>\n<p><code>ParseNumberExpr</code>  为数字表达式解析函数，只有一个选择，直接构建基本表达式 <code>NumberExpr</code> 。</p>\n<p><code>ParseParenExpr</code>  为括号表达式解析函数，只有一个选择，将括号丢掉，解析括号中间的子表达式（调用顶层表达式解析函数 <code>ParseExpress</code> ）。</p>\n<p><code>ParseIdentifierExpr</code>  为标识表达式解析函数，有两种情况。如果是标识 <code>Identifier</code> ，直接创建基本表达式 <code>VariableExpr</code> ；如果是 <code>Identifier '('expression')'</code>  的形式，这是一个调用 <code>Call</code> ，构建基本表达式 <code>CallExpr</code> 。</p>\n<h2 id=\"紫色是基本表达式\"><a class=\"anchor\" href=\"#紫色是基本表达式\">#</a> 紫色是基本表达式：</h2>\n<p>在 llvm 官方例子中，支持四种基本表达式，分别是：数字表达式 <code>NumberExpr</code> 、二值表达式 <code>BinaryExpr</code> 、变量表达式 <code>VariableExpr</code> 、调用表达式 <code>CallExpr</code> 。</p>\n<p>数字表达式 <code>NumberExpr</code> ：官方例子将所有数字都识别为 double 类型。</p>\n<p>二值表达式 <code>BinaryExpr</code> ：二值表达式是 <code>LHS OP RHS</code>  的，其中 <code>LHS</code>  和 <code>RHS</code>  已经深度递归地由顶层表达式 <code>ParsePrimary</code>  获得， <code>OP</code>  用 int 类型的 ASCII 表示。 <code>BinaryExpr</code>  将 <code>LHS</code> 、 <code>RHS</code>  和 <code>OP</code>  组合在一起。</p>\n<p>变量表达式 <code>VariableExpr</code> ：保存为 std::string 类型。</p>\n<p>调用表达式 <code>CallExpr</code> ：调用函数名 <code>Callee</code>  用 std::string 类型保存。至于调用参数，我先举几个例子： foo (2); foo (3*5，-1); foo (cos (1)+4); 这几个例子中，  <code>2</code>  是数字表达式， <code>3*5, -1</code>  是多个表达式， <code>cos(1)+4</code>  是调用表达式，总之，调用参数是一个或多个表达式。所以它会多次调用顶层表达式解析函数 <code>ParseExpress</code> ，形成 <code>vector&lt;Expr&gt;</code> 。</p>\n<h1 id=\"调用示例\"><a class=\"anchor\" href=\"#调用示例\">#</a> 调用示例</h1>\n<p>为了更好理解深度递归创建 AST 的过程，图 4 展示了 <code>4*(2+1)-cos(1);</code>  表达式的调用过程。</p>\n<p><img loading=\"lazy\" data-src=\"1741865107343.jpg\" alt=\"调用过程实例\"></p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，并指明哪一篇博客，我看到一定及时回复！</p>\n",
            "tags": [
                "compiler"
            ]
        }
    ]
}