{
    "version": "https://jsonfeed.org/version/1",
    "title": "Пусть этот камень будет более крепким, чем человек • All posts by \"conv\" tag",
    "description": "有自己的博客很帅，但是我很懒，要命！！！",
    "home_page_url": "https://forcheetah.github.io",
    "items": [
        {
            "id": "https://forcheetah.github.io/2025/01/03/quanti01/",
            "url": "https://forcheetah.github.io/2025/01/03/quanti01/",
            "title": "【量化】连续卷积层首尾量化的可行性",
            "date_published": "2025-01-03T13:12:09.420Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇文章探讨一下连续卷积层首尾量化的可行性。连续卷积指的是神经网络模型中接连出现若干个卷积 layer，中间没有 pooling、FC 等其他 layer；首尾量化指的是只在首端量化，仅在尾端反量化，中间不添加量化反量化操作。探索连续卷积层首尾量化的可行性，目的是试图降低每一层都进行繁杂的量化反量化运算的时间消耗。在上一篇文章<a href=\"https://forcheetah.github.io/2024/05/30/engine1/\">【推理引擎】NCNN 和 Tengine 量化推理逻辑对比</a> 中提到了这个想法，本篇文章将通过公式演算和代码仿真的方式探索其可行性。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"连续卷积层首尾量化\"><a class=\"anchor\" href=\"#连续卷积层首尾量化\">#</a> 连续卷积层首尾量化</h1>\n<p>借用上一篇文章<a href=\"https://forcheetah.github.io/2024/05/30/engine1/\">【推理引擎】NCNN 和 Tengine 量化推理逻辑对比</a> 中 NCNN 卷积量化计算流程图。流程显示：每一层卷积在计算前需要量化，在计算完成后需要反量化。</p>\n<p><img loading=\"lazy\" data-src=\"1735817961973.jpg\" alt=\"ncnn量化流程\"></p>\n<p>量化和反量化过程费时又费力，那么在连续卷积层的这种特殊情况下，能不能减少量化和反量化计算呢？</p>\n<p>连续卷积指的是神经网络模型中接连出现若干个卷积 layer，中间没有 pooling、FC 等其他 layer；首尾量化指的是只在首端量化，仅在尾端反量化，中间不添加量化反量化操作。</p>\n<p>假如这种做法可行，则可以减少中间层的量化、反量化计算。</p>\n<h1 id=\"公式演算\"><a class=\"anchor\" href=\"#公式演算\">#</a> 公式演算</h1>\n<p>首先从公式上推理计算流程。</p>\n<p>我们以三个连续的卷积层为例，下图是计算示意图。输入为 <code>input</code> ，经过三个卷积算子 <code>conv1</code> 、 <code>conv2</code> 、 <code>conv3</code>  得到输出 tensor  <code>output</code> 。三个卷积算子的权重用 <code>W*</code>  表示，偏置用 <code>B*</code>  表示。</p>\n<p><code>A</code>  表示输入输出 tensor 的量化因子 scale， <code>S</code>  表示权重 weight 的量化因子。<br>\n暂不考虑通常会在卷积层后面出现的激活层。（relu 激活不影响后续推理，但其他激活函数大概不行）</p>\n<p><img loading=\"lazy\" data-src=\"1735818104223.jpg\" alt=\"ncnn量化流程\"></p>\n<h2 id=\"float-推理\"><a class=\"anchor\" href=\"#float-推理\">#</a> float 推理：</h2>\n<p><img loading=\"lazy\" data-src=\"1735818152458.jpg\" alt=\"ncnn量化流程\"></p>\n<p><code>W</code>  代表权重， <code>B</code>  代表偏置。 <code>in</code>  代表输入 tensor，这里 <code>*</code>  代表卷积操作。</p>\n<p>上述公式便是一般情况下，连续计算三个卷积的流程。</p>\n<h2 id=\"量化推理\"><a class=\"anchor\" href=\"#量化推理\">#</a> 量化推理：</h2>\n<p><img loading=\"lazy\" data-src=\"1735818201772.jpg\" alt=\"ncnn量化流程\"></p>\n<p>将 float 推理流程改写为 NCNN 形式的量化流程。同时偏置的形式借鉴于 Tengine，也就是 int32 类型的 <code>B/(A*S)</code> 。</p>\n<p><code>A</code>  表示输入输出 tensor 的量化因子 scale， <code>S</code>  表示权重 weight 的量化因子。</p>\n<p><code>in/A1</code>  是将 float 的输入 tensor 量化为 int8， <code>W1/S1</code>  是将权重量化为 int8。输入 tensor 和权重的量化因子 <code>A1</code>  和 <code>S1</code>  确定后，偏置的量化因子和输出 tensor 的反量化因子就都确定了，是 <code>A1*S1</code> 。公式中 <code>*(A1S1)</code>  是反量化过程。</p>\n<p>重复三次（量化、卷积、反量化），上述公式的结果等价于 float 推理。</p>\n<h2 id=\"首尾量化推理\"><a class=\"anchor\" href=\"#首尾量化推理\">#</a> 首尾量化推理：</h2>\n<p>首尾量化公式整体是什么样子？全部写出来非常困难，所以我们可以先将其形式写出来，不确定的地方用符号代替。那么就是下方的第一个公式。公式中的方框代表量化因子，黑圈代表偏置，量化因子和偏置当前还没有确定。</p>\n<p>流程是这样的： <code>in/方框</code> 进行量化。 <code>*W1/S1+黑圈</code> 表示执行一次卷积，连续执行三次卷积。最后 <code>*方框</code> 进行反量化。</p>\n<p>这个公式只在首尾进行量化和反量化。</p>\n<p>权重 <code>W</code>  的量化因子 <code>S</code>  是固定的，因为权重在模型中是固定的，其对应的量化因子 <code>S</code>  不会改变，于前述公式中相同。</p>\n<p><img loading=\"lazy\" data-src=\"1735818262776.jpg\" alt=\"ncnn量化流程\"></p>\n<p>接下来是填充方框和黑圈中的数据。填充结果为第二个公式。</p>\n<p>填充规则首先是公式的等价性，公式要等价于 “量化推理” 和 “float 推理”。从前往后依次填充，结果如上，不再细讲。</p>\n<p>直观来看，整个公式没有问题，理论上可行。难道真的可以节省连续卷积层中间的量化和反量化时间？马不停蹄开始代码仿真。</p>\n<h1 id=\"代码仿真\"><a class=\"anchor\" href=\"#代码仿真\">#</a> 代码仿真</h1>\n<p>仿真代码如下所示：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"stdlib.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"math.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_info</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">float</span> weight<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">float</span> bias<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> weight_int8<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> bias_int<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">float</span> scale<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span>conv_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor_info</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">float</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> data_int8<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">float</span> scale<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span>tensor_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//  tensor 初始化</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">init_tensor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor_info</span><span class=\"token operator\">*</span> tensor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        tensor<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//  卷积 初始化</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">init_conv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_info</span><span class=\"token operator\">*</span> conv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> weight<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> bias<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        conv<span class=\"token operator\">-></span>weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        conv<span class=\"token operator\">-></span>bias<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bias<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//  卷积 计算量化因子</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">CalculateConvScale</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_info</span><span class=\"token operator\">*</span> conv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">float</span> abs_max<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> conv<span class=\"token operator\">-></span>weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span>abs_max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            abs_max <span class=\"token operator\">=</span> <span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    conv<span class=\"token operator\">-></span>scale <span class=\"token operator\">=</span> abs_max<span class=\"token operator\">/</span><span class=\"token number\">127.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token function\">round</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>conv<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        conv<span class=\"token operator\">-></span>weight_int8<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">//  卷积 计算 bias int8</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ClaculateConvBiasInt8</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_info</span><span class=\"token operator\">*</span> conv<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor_info</span><span class=\"token operator\">*</span> tensor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token function\">round</span><span class=\"token punctuation\">(</span>conv<span class=\"token operator\">-></span>bias<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>conv<span class=\"token operator\">-></span>scale<span class=\"token operator\">*</span>tensor<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        conv<span class=\"token operator\">-></span>bias_int<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">//  tensor 计算量化因子</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">CalculateTensorScale</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor_info</span><span class=\"token operator\">*</span> tensor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">float</span> abs_max<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> tensor<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span>abs_max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            abs_max <span class=\"token operator\">=</span> <span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    tensor<span class=\"token operator\">-></span>scale <span class=\"token operator\">=</span> abs_max<span class=\"token operator\">/</span><span class=\"token number\">127.0</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">//  卷积运算  float</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ConvFloat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor_info</span><span class=\"token operator\">*</span> input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_info</span><span class=\"token operator\">*</span> conv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor_info</span><span class=\"token operator\">*</span> output<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        output<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>conv<span class=\"token operator\">-></span>weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>conv<span class=\"token operator\">-></span>bias<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token comment\">//  卷积运算  int</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ConvInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor_info</span><span class=\"token operator\">*</span> input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_info</span><span class=\"token operator\">*</span> conv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor_info</span><span class=\"token operator\">*</span> output<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token comment\">// 量化</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">int</span> input_int8 <span class=\"token operator\">=</span> <span class=\"token function\">round</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> input<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token comment\">// 卷积</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">int</span> out_int8 <span class=\"token operator\">=</span> input_int8 <span class=\"token operator\">*</span> conv<span class=\"token operator\">-></span>weight_int8<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">// 偏置</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">int</span> out_bias_int8 <span class=\"token operator\">=</span> out_int8 <span class=\"token operator\">+</span> conv<span class=\"token operator\">-></span>bias_int<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token comment\">// 反量化</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        output<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> out_bias_int8 <span class=\"token operator\">*</span> input<span class=\"token operator\">-></span>scale <span class=\"token operator\">*</span> conv<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token comment\">//  首尾量化 更新 bias</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">updateBiasInt8</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_info</span><span class=\"token operator\">*</span> conv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> scale<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token function\">round</span><span class=\"token punctuation\">(</span>conv<span class=\"token operator\">-></span>bias<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        conv<span class=\"token operator\">-></span>bias_int<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token comment\">//  卷积运算  首尾</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ConvFrontTial</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor_info</span><span class=\"token operator\">*</span> input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_info</span><span class=\"token operator\">*</span> conv1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_info</span><span class=\"token operator\">*</span> conv2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_info</span><span class=\"token operator\">*</span> conv3<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor_info</span><span class=\"token operator\">*</span> output<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token comment\">//  初次量化</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">int</span> input_int <span class=\"token operator\">=</span> <span class=\"token function\">round</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> input<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token comment\">//  第一步卷积</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token keyword\">int</span> input_int_1 <span class=\"token operator\">=</span> input_int <span class=\"token operator\">*</span> conv1<span class=\"token operator\">-></span>weight_int8<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> conv1<span class=\"token operator\">-></span>bias_int<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token comment\">//  第二步卷积</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token keyword\">int</span> input_int_2 <span class=\"token operator\">=</span> input_int_1 <span class=\"token operator\">*</span> conv2<span class=\"token operator\">-></span>weight_int8<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> conv2<span class=\"token operator\">-></span>bias_int<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token comment\">//  第三步卷积</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">int</span> input_int_3 <span class=\"token operator\">=</span> input_int_2 <span class=\"token operator\">*</span> conv3<span class=\"token operator\">-></span>weight_int8<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> conv3<span class=\"token operator\">-></span>bias_int<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token comment\">//  反量化</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        output<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input_int_3 <span class=\"token operator\">*</span> input<span class=\"token operator\">-></span>scale <span class=\"token operator\">*</span> conv1<span class=\"token operator\">-></span>scale <span class=\"token operator\">*</span> conv2<span class=\"token operator\">-></span>scale <span class=\"token operator\">*</span> conv3<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token comment\">//  *********************************  基本信息及初始化  ************************************</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    tensor_info<span class=\"token operator\">*</span> input <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tensor_info<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tensor_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token keyword\">float</span> input_data<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0.24</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.08</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.16</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.61</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token function\">init_tensor</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> input_data<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    conv_info<span class=\"token operator\">*</span> conv1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>conv_info<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>conv_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token keyword\">float</span> weight_data1<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0.02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.04</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">float</span> bias1<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">11.4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">6.3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">57.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.48</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token function\">init_conv</span><span class=\"token punctuation\">(</span>conv1<span class=\"token punctuation\">,</span> weight_data1<span class=\"token punctuation\">,</span> bias1<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    conv_info<span class=\"token operator\">*</span> conv2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>conv_info<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>conv_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token keyword\">float</span> weight_data2<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.25</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.69</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token keyword\">float</span> bias2<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10.4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">6.3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">31.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.48</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token function\">init_conv</span><span class=\"token punctuation\">(</span>conv2<span class=\"token punctuation\">,</span> weight_data2<span class=\"token punctuation\">,</span> bias2<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    conv_info<span class=\"token operator\">*</span> conv3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>conv_info<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>conv_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token keyword\">float</span> weight_data3<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">2.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.69</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token keyword\">float</span> bias3<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">5.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.24</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token function\">init_conv</span><span class=\"token punctuation\">(</span>conv3<span class=\"token punctuation\">,</span> weight_data3<span class=\"token punctuation\">,</span> bias3<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token comment\">//  *********************************  float 推理  ************************************</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n 1  ********   float 推理   ********  \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    tensor_info<span class=\"token operator\">*</span> middle1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tensor_info<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tensor_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    tensor_info<span class=\"token operator\">*</span> middle2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tensor_info<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tensor_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    tensor_info<span class=\"token operator\">*</span> output_res <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tensor_info<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tensor_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token function\">ConvFloat</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> conv1<span class=\"token punctuation\">,</span> middle1<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token function\">ConvFloat</span><span class=\"token punctuation\">(</span>middle1<span class=\"token punctuation\">,</span> conv2<span class=\"token punctuation\">,</span> middle2<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token function\">ConvFloat</span><span class=\"token punctuation\">(</span>middle2<span class=\"token punctuation\">,</span> conv3<span class=\"token punctuation\">,</span> output_res<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  %f \"</span><span class=\"token punctuation\">,</span> output_res<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token comment\">//  *********************************  量化推理  ************************************</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n 2 ********   量化推理   ********  \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token function\">CalculateConvScale</span><span class=\"token punctuation\">(</span>conv1<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token function\">CalculateConvScale</span><span class=\"token punctuation\">(</span>conv2<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token function\">CalculateConvScale</span><span class=\"token punctuation\">(</span>conv3<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token function\">CalculateTensorScale</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token function\">CalculateTensorScale</span><span class=\"token punctuation\">(</span>middle1<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token function\">CalculateTensorScale</span><span class=\"token punctuation\">(</span>middle2<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    <span class=\"token function\">ClaculateConvBiasInt8</span><span class=\"token punctuation\">(</span>conv1<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token function\">ClaculateConvBiasInt8</span><span class=\"token punctuation\">(</span>conv2<span class=\"token punctuation\">,</span> middle1<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    <span class=\"token function\">ClaculateConvBiasInt8</span><span class=\"token punctuation\">(</span>conv3<span class=\"token punctuation\">,</span> middle2<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token function\">ConvInt</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> conv1<span class=\"token punctuation\">,</span> middle1<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token function\">ConvInt</span><span class=\"token punctuation\">(</span>middle1<span class=\"token punctuation\">,</span> conv2<span class=\"token punctuation\">,</span> middle2<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token function\">ConvInt</span><span class=\"token punctuation\">(</span>middle2<span class=\"token punctuation\">,</span> conv3<span class=\"token punctuation\">,</span> output_res<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  %f \"</span><span class=\"token punctuation\">,</span> output_res<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"169\"></td><td><pre><span class=\"token comment\">//  *********************************  量化推理  ************************************</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n 3 ********   首尾量化推理   ********  \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    <span class=\"token function\">updateBiasInt8</span><span class=\"token punctuation\">(</span>conv1<span class=\"token punctuation\">,</span> input<span class=\"token operator\">-></span>scale<span class=\"token operator\">*</span>conv1<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>    <span class=\"token function\">updateBiasInt8</span><span class=\"token punctuation\">(</span>conv2<span class=\"token punctuation\">,</span> input<span class=\"token operator\">-></span>scale<span class=\"token operator\">*</span>conv1<span class=\"token operator\">-></span>scale<span class=\"token operator\">*</span>conv2<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    <span class=\"token function\">updateBiasInt8</span><span class=\"token punctuation\">(</span>conv3<span class=\"token punctuation\">,</span> input<span class=\"token operator\">-></span>scale<span class=\"token operator\">*</span>conv1<span class=\"token operator\">-></span>scale<span class=\"token operator\">*</span>conv2<span class=\"token operator\">-></span>scale<span class=\"token operator\">*</span>conv3<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    <span class=\"token function\">ConvFrontTial</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> conv1<span class=\"token punctuation\">,</span> conv2<span class=\"token punctuation\">,</span> conv3<span class=\"token punctuation\">,</span> output_res<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  %f \"</span><span class=\"token punctuation\">,</span> output_res<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"180\"></td><td><pre>    <span class=\"token comment\">//  信息打印</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n【第一个卷积】  输入scale：%f   权重scale：%f  \\n\"</span><span class=\"token punctuation\">,</span> input<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">,</span> conv1<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"weight_scaled(int8):%d  bias_scaled(int32):%d  \"</span><span class=\"token punctuation\">,</span>conv1<span class=\"token operator\">-></span>weight_int8<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> conv1<span class=\"token operator\">-></span>bias_int<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n【第二个卷积】  输入scale：%f   权重scale：%f  \\n\"</span><span class=\"token punctuation\">,</span> middle1<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">,</span> conv2<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"weight_scaled(int8):%d  bias_scaled(int32):%d  \"</span><span class=\"token punctuation\">,</span>conv2<span class=\"token operator\">-></span>weight_int8<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> conv2<span class=\"token operator\">-></span>bias_int<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n【第三个卷积】  输入scale：%f   权重scale：%f  \\n\"</span><span class=\"token punctuation\">,</span> middle2<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">,</span> conv3<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"weight_scaled(int8):%d  bias_scaled(int32):%d  \"</span><span class=\"token punctuation\">,</span>conv3<span class=\"token operator\">-></span>weight_int8<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> conv3<span class=\"token operator\">-></span>bias_int<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>仿真包含 float 推理、量化推理、首尾量化推理三部分。</p>\n<p>卷积运算简化为乘运算  <code>input-&gt;data[i]*conv-&gt;weight[i]+conv-&gt;bias[i];</code> ，这种简化不影响结果判断。</p>\n<p>输入 tensor 和权重 tensor 均简化为一个长度为 4 的向量。同样不影响结果判断。</p>\n<p>代码中给出了三种推理方式的计算流程。</p>\n<p><img loading=\"lazy\" data-src=\"1735909708546.jpg\" alt=\"计算结果\"></p>\n<p>分别打印三种推理方式的计算结果，如上图所示<br>\n。<br>\n首先是 float 推理的结果，一行四个数分别是 <code>-46.782913   -43.201283   21.810884   9.627323</code> ，可以作为正确与否的评判标准。</p>\n<p>量化推理的结果位于第二行，与 float 推理结果相同，证明量化推理没有问题。</p>\n<p>惊讶地发现首尾量化推理的结果出错？公式演算和算法仿真都没有问题，那么结果为什么不对呢？</p>\n<p>打印一下首尾量化推理的相关数据：<br>\n量化后的 int8 类型的权重 weight 都没有问题，范围在 - 127 到 127 之间。<br>\n但是量化后的 int32 类型的 bias 为什么这么大？想来 bias 确实很大，量化因子普遍在 10E-3，因此第一个卷积的量化 bias ( <code>B1/(A1S1)</code> ) 已经达到 10 的六次方级别，第二个卷积的时候部分量化偏置出现溢出，第三个卷积的量化偏置已经普遍溢出。上图中打印的数字也证明了这一点： <code>-214748364</code>  这个数据已经溢出。</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>连续卷积层首尾量化不具有可行性，因为连两层卷积都会出现偏置溢出现象，导致结果计算错误。</p>\n<p>那么</p>\n<ul>\n<li>\n<ol>\n<li>将偏置 bias 改用 int64 存储？偏置大小呈指数上升，int64 也无法保证三层卷积首尾量化不溢出，收益不高。</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>将偏置 bias 改用 float 保存？  浮点数无法精确的表示很大的整数。</li>\n</ol>\n</li>\n</ul>\n<p>总之，连续首尾量化无法实用。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "conv",
                "quantize"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/12/24/conv6/",
            "url": "https://forcheetah.github.io/2024/12/24/conv6/",
            "title": "【Gemm】内存对齐",
            "date_published": "2024-12-24T12:44:31.294Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇文章梳理内存对齐的相关概念和知识，并借上一篇文章<a href=\"https://forcheetah.github.io/2024/12/20/conv5/\">《【Gemm】Gemm 计算加速》</a> 来简单探讨一下内存排布对计算加速的重要作用。</p>\n<p>本篇文章参考和引用了 <a href=\"https://github.com/Tencent/ncnn\">《nihui 大佬的 ncnn 工程》</a>，<a href=\"https://zhuanlan.zhihu.com/p/336359747?utm_id=0\">《ncnn 初探二：图解 ncnn::Mat 的内存排布》</a>，<a href=\"https://github.com/Tencent/ncnn/issues/334\">关于 mat 中 data 的内存排列问题</a>，<a href=\"https://zhuanlan.zhihu.com/p/632640984\">《Linux 内核：内存管理 —— 内存对齐》</a>等，并询问过大语言模型通义千问、文心一言等。如有不清楚的地方可以点击链接查阅。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"处理器的对齐访问\"><a class=\"anchor\" href=\"#处理器的对齐访问\">#</a> 处理器的对齐访问</h1>\n<p>对齐访问的定义：对齐访问是指处理器在访问内存时，要求访问的起始地址是某个特定数值（通常是 2 的幂）的整数倍。这种对齐方式有助于简化内存访问的电路设计和提高访问效率。</p>\n<p>例如某处理器读取 int 类型数据时，内存读取粒度为 4，只能从 0x10000， 0x10004 这种 4 的整数倍地址为起始地址读取内存。当该 int 类型数据恰好存储在这样的地址时，称为自然对齐。</p>\n<p>那么，处理器只能进行对齐访问吗？大语言模型给出这样解答：</p>\n<pre><code>一、处理器在访问内存时，并不总是只能进行对齐访问，这取决于处理器的具体架构和设计。\n    1.某些处理器要求对齐访问：\n例如，一些ARM架构的处理器在访问内存时要求对齐。如果访问的起始地址不满足对齐要求，处理器可能会产生异常或错误。\n    2.复杂指令集处理器（如x86架构）的灵活性：\nx86架构的处理器通常能够处理非对齐的内存访问。虽然它们可能不是一次性读出所需的数据，而是采取多次读取对齐的内存并进行数据拼接的方式来实现非对齐数据访问，但这仍然表明x86处理器在处理非对齐访问方面具有一定的灵活性。\n\n二、处理器单次访问的对齐要求\n    为了保持硬件设计的简单性和高效性，单次内存访问确实要求是对齐的。这是因为对齐访问可以确保数据在内存中的布局与处理器的数据路径相匹配，从而避免额外的处理步骤和性能损失。\n\n</code></pre>\n<p>从上面来看，处理器单次内存访问是要求对齐访问的，所谓支持的非对齐访问也是由多次对齐访问，再加上舍弃和拼接实现的。</p>\n<h1 id=\"内存对齐\"><a class=\"anchor\" href=\"#内存对齐\">#</a> 内存对齐</h1>\n<p>内存对齐：如果一个变量的内存地址刚好位于它本身长度的整数倍，他就被称做自然对齐。</p>\n<p>这里比较一下内存对齐 和 内存没有对齐的情况下， 处理器内存访问效率。</p>\n<p><img loading=\"lazy\" data-src=\"1735043896070.jpg\" alt=\"图1\"></p>\n<p>假设现在需要将四个字节的 float 数据搬到寄存器，上图的 float 数据自然对齐，位于 0x1000，那么将该 float 数据搬到寄存器只需要访问一次内存。</p>\n<p>下图 float 数据没有自然对齐，位于 0x1002，那么需要将 0x1000 到 0x1003 的数据取出，留下 0x1002 到 0x1003 两个字节。再将 0x1004 到 0x1007 的数据取出，留下 0x1004 到 0x1005 两个字节，最终拼成需要的 float 数据。</p>\n<p>在没有自然对齐的情况下，需要两次内存访问，还要消耗数据拼接等指令的时间。</p>\n<h1 id=\"编译器内存对齐\"><a class=\"anchor\" href=\"#编译器内存对齐\">#</a> 编译器内存对齐</h1>\n<p>为实现高效的内存访问，编译器有一套内存对齐的规则。</p>\n<p>例如下面的代码，在 64 位系统中，char 类型占 1 个字节，double 类型占 8 个字节。但是下面的结构体占用内存并不是 9 个字节，而是 16 个字节。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">double</span> ff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> struct_elem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    struct_elem sclass<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>struct_elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addr_char:%p   addr_double:%p  \\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sclass<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sclass<span class=\"token punctuation\">.</span>ff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>16\naddr_char:0x7ffc631cdd70   addr_double:0x7ffc631cdd78 \n</code></pre>\n<p>打印结果如上所示，char 数据的地址是 <code>0x7ffc631cdd70</code> ，为了让 double 数据也能自然对齐，char 数据后面空出来 7 个字节，直到第 8 个字节，也就是 <code>0x7ffc631cdd78</code>  才开始存储 double。</p>\n<p><img loading=\"lazy\" data-src=\"1735044044909.jpg\" alt=\"图2\"></p>\n<p>那么，如果将上述结构体中的 char 和 double 数据调换一下位置，是不是结构体的内存占用就变成 9 字节了呢？也不是，仍然是 16 字节。这就设计到下面的结构体内存分配规则了，这里不做讨论。</p>\n<pre><code>1.第一个成员在结构体变量偏移量为0 的地址处，也就是第一个成员必须从头开始。\n2.以后每个成员相对于结构体首地址的 offset 都是该成员大小的整数倍，如有需要编译器会在成员之间加上填充字节。\n3.结构体的总大小为 最大对齐数的整数倍（每个成员变量都有自己的对齐数），如有需要编译器会在最末一个成员之后加上填充字节。\n4.如果嵌套结构体，嵌套的结构体对齐到自己的最大对齐数的整数倍处，结构体的整体大小就是所有最大对齐数（包含嵌套结构体的对齐数）的整数倍。\n</code></pre>\n<h1 id=\"ncnn-内存对齐\"><a class=\"anchor\" href=\"#ncnn-内存对齐\">#</a> ncnn 内存对齐</h1>\n<p>既然编译器帮助我们实现了内存对齐，程序员是不是就不需要再关注内存对齐了呢？</p>\n<p>肯定是不行的，编译器只保证了基本自然对齐，在高性能计算、图形处理等方面，还需要程序员手动内存对齐。这里学习一下 NCNN 工程的矩阵排布方式：</p>\n<p>下面是 ncnn 源码中构建三维矩阵（c,h,w），也就是通道、高度、宽度三个维度，的内存开辟函数。</p>\n<p>变量的意义，来自<a href=\"https://zhuanlan.zhihu.com/p/336359747?utm_id=0\">《ncnn 初探二：图解 ncnn::Mat 的内存排布》</a></p>\n<pre><code>data: 表示Mat分配的内存的头地址, 是一个指针类型\nrefcount: 表示Mat的引用计数, 是一个指针类型\nallocator: 本章我们不太关系这个变量可以认为它的值始终为0, 是一个指针类型\ndims: 表示数据的维度, 是一个整数类型\nw: 表示数据的width, 是一个整数类型\nh: 表示数据的height, 是一个整数类型\nc: 表示数据的channel, 是一个整数类型\nelempack: 表示有多少个数据打包在一起, 是一个整数类型\nelemsize: 表示打包在一起的数据占的字节数, 是一个整数类型\ncstep: 表示channel step, 即走一个channel跨过的元素个数, 是一个整数类型\n</code></pre>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建 三维矩阵（c,h,w）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Mat</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> _w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _c<span class=\"token punctuation\">,</span> size_t _elemsize<span class=\"token punctuation\">,</span> Allocator<span class=\"token operator\">*</span> _allocator<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dims <span class=\"token operator\">==</span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span> w <span class=\"token operator\">==</span> _w <span class=\"token operator\">&amp;&amp;</span> h <span class=\"token operator\">==</span> _h <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">==</span> _c <span class=\"token operator\">&amp;&amp;</span> elemsize <span class=\"token operator\">==</span> _elemsize <span class=\"token operator\">&amp;&amp;</span> elempack <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> allocator <span class=\"token operator\">==</span> _allocator<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    elemsize <span class=\"token operator\">=</span> _elemsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    elempack <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    allocator <span class=\"token operator\">=</span> _allocator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    dims <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    w <span class=\"token operator\">=</span> _w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    h <span class=\"token operator\">=</span> _h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    d <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    c <span class=\"token operator\">=</span> _c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cstep <span class=\"token operator\">=</span> <span class=\"token function\">alignSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>w <span class=\"token operator\">*</span> h <span class=\"token operator\">*</span> elemsize<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> elemsize<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//w*h 16 字节对齐</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    size_t totalsize <span class=\"token operator\">=</span> <span class=\"token function\">alignSize</span><span class=\"token punctuation\">(</span><span class=\"token function\">total</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> elemsize<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//c*cstep 4 字节对齐</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>totalsize <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>allocator<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            data <span class=\"token operator\">=</span> allocator<span class=\"token operator\">-></span><span class=\"token function\">fastMalloc</span><span class=\"token punctuation\">(</span>totalsize <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>refcount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            data <span class=\"token operator\">=</span> <span class=\"token function\">fastMalloc</span><span class=\"token punctuation\">(</span>totalsize <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>refcount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        refcount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> totalsize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 连接计数器，放在了 data 最后</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token operator\">*</span>refcount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>再看一下  <code>alignSize</code>  函数：其用于返回不小于 <code>sz</code>  的 <code>n</code>  的最小倍数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">alignSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>sz <span class=\"token operator\">+</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>那么上述创建 三维矩阵（c,h,w）</p>\n<p>我们以（c,h,w）：（4,2,3）为例，通道为 4，高为 2，宽为 3，开辟的内存及数据存放如下图所示：</p>\n<pre><code>   0        1        2         3          4        5        6       7\nc0h0w0    c0h0w1    c0h0w2    c0h1w0    c0h1w1    c0h1w2    pad    pad\nc1h0w0    c1h0w1    c1h0w2    c1h1w0    c1h1w1    c1h1w2    pad    pad\nc2h0w0    c2h0w1    c2h0w2    c2h1w0    c2h1w1    c2h1w2    pad    pad\nc3h0w0    c3h0w1    c3h0w2    c3h1w0    c3h1w1    c3h1w2    pad    pad\n</code></pre>\n<p>高乘宽 h<em>w，长度为 6， <code>alignSize((size_t)w * h * elemsize, 16) / elemsize;</code>  按照 16 字节对齐，会分配 8 个元素的空间，当前 h</em>w 只占了六个元素的空间，其余两个空间 pad 补零。  <code>cstep</code>  为 8，而不是 6。</p>\n<p>访问：</p>\n<pre><code>mat.data -&gt; address of c0h0w0\nmat.row(1) -&gt; address of c0h1w0\nmat.channel(0).row(1) -&gt; address of c0h1w0\nmat.channel(1).row(1) -&gt; address of c1h1w0\n\n</code></pre>\n<p>所以 ncnn 的 16 字节对齐是每个通道 16 字节对齐。<br>\n访问每一个通道时，mat.channel (0)，所有 16 字节的数据，也就是 128bit 数据，能够一次内存访问加载到 SSE2 等 128 位寄存器中。</p>\n<p>采用 16 字节对齐有哪些优势呢？大语言模型的回答：</p>\n<ol>\n<li>提高数据访问效率</li>\n</ol>\n<ul>\n<li>SIMD 指令集优化：现代 CPU 支持单指令多数据（SIMD）指令集，如 SSE、AVX 等。这些指令可以在一个周期内处理多个数据点，但要求操作数在内存中是连续且对齐的。16 字节对齐确保了当使用 128 位宽的 SIMD 寄存器（例如 SSE 指令）时，数据可以直接加载到寄存器中而无需额外调整，从而提高了指令执行速度。</li>\n<li>缓存行利用：大多数 CPU 的缓存行大小为 64 字节或更大，16 字节对齐有助于更好地匹配缓存行边界，减少缓存未命中率，进而提升内存访问效率。</li>\n</ul>\n<ol start=\"2\">\n<li>减少内存访问延迟</li>\n</ol>\n<ul>\n<li>避免跨页访问：如果数据跨越了不同的内存页面，操作系统需要额外的时间来处理页面错误和更新页表。通过保持 16 字节对齐，可以降低这种跨页访问的可能性，特别是在处理大量小型数据结构时。</li>\n</ul>\n<h1 id=\"gemm内存对齐的好处\"><a class=\"anchor\" href=\"#gemm内存对齐的好处\">#</a> gemm 内存对齐的好处</h1>\n<p>以<a href=\"https://forcheetah.github.io/2024/12/20/conv5/\">《【Gemm】Gemm 计算加速》</a> 中的 《6. 使用 SIMD 指令》为例，如果矩阵 B（K*N）在宽度 N 方向进行 16 字节对齐（将 N pad 到 16 字节的倍数），那么算法最内存循环中的 <code>__m128 b_reg = _mm_loadu_ps(&amp;B(p, 0));</code> ，将会避免非对齐访问问题，在任何情况下读取的 16 字节数据都是自然对齐的。同时也避免了算法在矩阵 B 中的越界问题。</p>\n<p><img loading=\"lazy\" data-src=\"1735044231568.jpg\" alt=\"3333\"></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;emmintrin.h></span> <span class=\"token comment\">// SSE2</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">A</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>lda <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">B</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldb <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">C</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/* Routine for computing C = A * B + C */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AddDot4x4_SSE2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/* Point to the current elements in the four rows of A */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_0p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_1p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_2p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_3p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    __m128 c_p0_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    __m128 c_p1_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    __m128 c_p2_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    __m128 c_p3_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">register</span> <span class=\"token keyword\">float</span> a_0p_reg<span class=\"token punctuation\">,</span> a_1p_reg<span class=\"token punctuation\">,</span> a_2p_reg<span class=\"token punctuation\">,</span> a_3p_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        __m128 b_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 没有 16 字节对齐的情况下，可能会出现非对齐访问</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        a_0p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_0p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        a_1p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_1p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        a_2p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_2p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        a_3p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_3p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        __m128 a_0p_vec <span class=\"token operator\">=</span> <span class=\"token function\">_mm_set_ps1</span><span class=\"token punctuation\">(</span>a_0p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        __m128 a_1p_vec <span class=\"token operator\">=</span> <span class=\"token function\">_mm_set_ps1</span><span class=\"token punctuation\">(</span>a_1p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        __m128 a_2p_vec <span class=\"token operator\">=</span> <span class=\"token function\">_mm_set_ps1</span><span class=\"token punctuation\">(</span>a_2p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        __m128 a_3p_vec <span class=\"token operator\">=</span> <span class=\"token function\">_mm_set_ps1</span><span class=\"token punctuation\">(</span>a_3p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        c_p0_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_p0_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> a_0p_vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        c_p1_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_p1_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> a_1p_vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        c_p2_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_p2_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> a_2p_vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        c_p3_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_p3_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> a_3p_vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c_pntr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    __m128 c_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_p0_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_p1_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_p2_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_p3_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MY_MMult_4x4_10</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the columns of C, unrolled by 4 */</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">/* Loop over the rows of C */</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token function\">AddDot4x4_SSE2</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GemmAccelerateSimd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        MatriA<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        MatriB<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token function\">MY_MMult_4x4_10</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriA<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriB<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>MatriC<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "conv",
                "gemm"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/12/20/conv5/",
            "url": "https://forcheetah.github.io/2024/12/20/conv5/",
            "title": "【gemm】Gemm计算加速",
            "date_published": "2024-12-20T14:06:41.237Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇文章简单介绍矩阵乘的加速方法，以学习算子加速需要注意的方面。想要学习更多内容可以参考<a href=\"https://zhuanlan.zhihu.com/p/65436463\">《OpenBLAS gemm 从零入门》</a>，<a href=\"https://github.com/flame/blislab\">《BLISlab: A Sandbox for Optimizing GEMM》</a>，<a href=\"https://mp.weixin.qq.com/s/w0YCm8TEPxFg0CR6g4A28w\">道阻且长_再探矩阵乘法优化</a>，<a href=\"https://github.com/BBuf/how-to-optimize-gemm\">《How To Optimize GEMM》</a>等项目或文章。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"1基准算法\"><a class=\"anchor\" href=\"#1基准算法\">#</a> 1. 基准算法</h1>\n<p><img loading=\"lazy\" data-src=\"1734702937283.jpg\" alt=\"1.基准算法\"></p>\n<p>矩阵乘运算的基准算法，未经过任何优化。矩阵以行主序进行排布， 针对 X86 平台。矩阵 C= A * B，A 矩阵为 (M,K)， B 矩阵为 (K,N)。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">A</span><span class=\"token expression\"><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span> j <span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>lda <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">B</span><span class=\"token expression\"><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span> j <span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldb <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">C</span><span class=\"token expression\"><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span> j <span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// gemm C = A * B + C</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MatrixMultiply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">&lt;</span>k<span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GemmAccelerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        MatriA<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        MatriB<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">MatrixMultiply</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriA<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriB<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>MatriC<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"循环展开\"><a class=\"anchor\" href=\"#循环展开\">#</a> 循环展开</h1>\n<p><img loading=\"lazy\" data-src=\"1734703129387.jpg\" alt=\"2.循环展开\"></p>\n<p>引入循环展开（Loop Unrolling）  ，每次 A 矩阵一行和 B 四列进行计算，得到四个结果。<br>\n可以减少循环控制开销：减少了循环条件检查和更新的频率，因为现在每四个元素作为一个批次处理，理论上减少了 75% 的循环控制指令。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">A</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>lda <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">B</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldb <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">C</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">Y</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> y<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>incx <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AddDot</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> incx<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>gamma <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> p<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">&lt;</span>k<span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token operator\">*</span>gamma <span class=\"token operator\">+=</span> x<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token function\">Y</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MY_MMult2</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">+=</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the columns of C, unrolled by 4 */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the rows of C */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token function\">AddDot</span><span class=\"token punctuation\">(</span> k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span>j <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token function\">AddDot</span><span class=\"token punctuation\">(</span> k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token function\">AddDot</span><span class=\"token punctuation\">(</span> k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token function\">AddDot</span><span class=\"token punctuation\">(</span> k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">3</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GemmAccelerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        MatriA<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        MatriB<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">MY_MMult2</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriA<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriB<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>MatriC<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"3使用寄存器\"><a class=\"anchor\" href=\"#3使用寄存器\">#</a> 3. 使用寄存器</h1>\n<p>中间计算结果使用寄存器存储，可以减少内存访问次数，可以显著提升性能，因为寄存器访问速度远快于内存访问。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">A</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>lda <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">B</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldb <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">C</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* Routine for computing C = A * B + C */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AddDot1x4</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">register</span> <span class=\"token keyword\">float</span>    c_00_reg<span class=\"token punctuation\">,</span>   c_01_reg<span class=\"token punctuation\">,</span>   c_02_reg<span class=\"token punctuation\">,</span>   c_03_reg<span class=\"token punctuation\">,</span>  a_0p_reg<span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  c_00_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  c_01_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  c_02_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  c_03_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> p<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">&lt;</span>k<span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    a_0p_reg <span class=\"token operator\">=</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> p <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    c_00_reg <span class=\"token operator\">+=</span> a_0p_reg <span class=\"token operator\">*</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    c_01_reg <span class=\"token operator\">+=</span> a_0p_reg <span class=\"token operator\">*</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    c_02_reg <span class=\"token operator\">+=</span> a_0p_reg <span class=\"token operator\">*</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    c_03_reg <span class=\"token operator\">+=</span> a_0p_reg <span class=\"token operator\">*</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_00_reg<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_01_reg<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_02_reg<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_03_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MY_MMult_1x4_6</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">+=</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the columns of C, unrolled by 4 */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the rows of C */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token function\">AddDot1x4</span><span class=\"token punctuation\">(</span> k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span>j <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GemmAccelerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        MatriA<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        MatriB<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token function\">MY_MMult_1x4_6</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriA<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriB<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>MatriC<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"4避免乘法\"><a class=\"anchor\" href=\"#4避免乘法\">#</a> 4. 避免乘法</h1>\n<p><img loading=\"lazy\" data-src=\"1734703236955.jpg\" alt=\"4.避免乘法\"></p>\n<p>本次算法相对上一个，调整了循环展开的矩阵（从矩阵 B 变成了矩阵 A）。最内层循环中的  <code>c_00_reg += a_0p_reg * B( p, 0 );</code>  变成  <code> c_00_reg += b_0p_reg * *ap0_pntr++;</code> ，即用指针的累加替换了原来的 <code>B( p, 0 )</code> ，使得最内层循环减少了 4 个乘法。</p>\n<p>调整循环展开矩阵的原因是 行主序，矩阵 A 在内存中是连续的。</p>\n<p>避免乘法： 通常来讲乘法消耗的时间长于加法，效率差异取决于具体的硬件平台。减少乘法计算量可以提高算法效率。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">A</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>lda <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">B</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldb <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">C</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* Routine for computing C = A * B + C */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AddDot1x4</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">register</span> <span class=\"token keyword\">float</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre> c_00_reg<span class=\"token punctuation\">,</span>   c_01_reg<span class=\"token punctuation\">,</span>   c_02_reg<span class=\"token punctuation\">,</span>   c_03_reg<span class=\"token punctuation\">,</span>  b_0p_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">float</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token operator\">*</span>ap0_pntr<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ap1_pntr<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ap2_pntr<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ap3_pntr<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  ap0_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  ap1_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  ap2_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  ap3_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  c_00_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  c_01_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  c_02_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  c_03_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> p<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">&lt;</span>k<span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    b_0p_reg <span class=\"token operator\">=</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    c_00_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap0_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    c_01_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap1_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    c_02_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap2_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    c_03_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap3_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_00_reg<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_01_reg<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_02_reg<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_03_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MY_MMult_1x4_7</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">+=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the columns of C, unrolled by 4 */</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the rows of C */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token function\">AddDot1x4</span><span class=\"token punctuation\">(</span> k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span>j <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GemmAccelerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        MatriA<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        MatriB<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">MY_MMult_1x4_7</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriA<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriB<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>MatriC<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"5进一步循环展开\"><a class=\"anchor\" href=\"#5进一步循环展开\">#</a> 5. 进一步循环展开</h1>\n<p>将最内部的循环也展开，即原本的 <code>for ( p=0; p&lt;k; p++ )</code>  变成  <code> for ( p=0; p&lt;k; p+=4 )</code> ，内部计算的内容变成原来的四倍。当然也开辟了更多的寄存器。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">A</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>lda <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">B</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldb <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">C</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* Routine for computing C = A * B + C */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AddDot1x4</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">register</span> <span class=\"token keyword\">float</span>   c_00_reg<span class=\"token punctuation\">,</span>   c_01_reg<span class=\"token punctuation\">,</span>   c_02_reg<span class=\"token punctuation\">,</span>   c_03_reg<span class=\"token punctuation\">,</span>  b_0p_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">float</span>  <span class=\"token operator\">*</span>ap0_pntr<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ap1_pntr<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ap2_pntr<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ap3_pntr<span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  ap0_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  ap1_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  ap2_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  ap3_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  c_00_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  c_01_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  c_02_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  c_03_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> p<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">&lt;</span>k<span class=\"token punctuation\">;</span> p<span class=\"token operator\">+=</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    b_0p_reg <span class=\"token operator\">=</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    c_00_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap0_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    c_01_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap1_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    c_02_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap2_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    c_03_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap3_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    b_0p_reg <span class=\"token operator\">=</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span> p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    c_00_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap0_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    c_01_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap1_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    c_02_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap2_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    c_03_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap3_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    b_0p_reg <span class=\"token operator\">=</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span> p<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    c_00_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap0_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    c_01_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap1_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    c_02_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap2_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    c_03_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap3_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    b_0p_reg <span class=\"token operator\">=</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span> p<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    c_00_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap0_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    c_01_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap1_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    c_02_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap2_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    c_03_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap3_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_00_reg<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_01_reg<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_02_reg<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_03_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MY_MMult_1x4_8</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">+=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the columns of C, unrolled by 4 */</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the rows of C */</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token function\">AddDot1x4</span><span class=\"token punctuation\">(</span> k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span>j <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GemmAccelerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        MatriA<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        MatriB<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token function\">MY_MMult_1x4_8</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriA<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriB<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>MatriC<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"6使用simd指令\"><a class=\"anchor\" href=\"#6使用simd指令\">#</a> 6. 使用 SIMD 指令</h1>\n<p><img loading=\"lazy\" data-src=\"1734703349079.jpg\" alt=\"6.使用指令\"></p>\n<p>SIMD 指令是单指令多数据，以 X86 平台的 SSE2 为例，其支持 128 的寄存器，一次性可以计算 4 个 float 或 int 数据，能够提高算法的并行度。</p>\n<p>代码中的 SSE 指令  <code>_mm_setzero_ps</code> ：将寄存器置零， <code>_mm_loadu_ps</code> ：读取指定位置的数据到寄存器， <code>_mm_mul_ps</code> ：乘运算， <code>_mm_add_ps</code> ：加运算， <code>_mm_storeu_ps</code> ：将寄存器的数据存储会内存， <code>_mm_set_ps1 </code> ：将给定地址的一个数复制 4 份到寄存器。</p>\n<p>以下代码在 M 和 N 两个方向循环展开（和 5 不同），一次性计算 16 个数据。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;emmintrin.h></span> <span class=\"token comment\">// SSE2</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">A</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>lda <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">B</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldb <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">C</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/* Routine for computing C = A * B + C */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AddDot4x4_SSE2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/* Point to the current elements in the four rows of A */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_0p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_1p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_2p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_3p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    __m128 c_p0_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    __m128 c_p1_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    __m128 c_p2_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    __m128 c_p3_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">register</span> <span class=\"token keyword\">float</span> a_0p_reg<span class=\"token punctuation\">,</span> a_1p_reg<span class=\"token punctuation\">,</span> a_2p_reg<span class=\"token punctuation\">,</span> a_3p_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        __m128 b_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        a_0p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_0p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        a_1p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_1p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        a_2p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_2p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        a_3p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_3p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        __m128 a_0p_vec <span class=\"token operator\">=</span> <span class=\"token function\">_mm_set_ps1</span><span class=\"token punctuation\">(</span>a_0p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        __m128 a_1p_vec <span class=\"token operator\">=</span> <span class=\"token function\">_mm_set_ps1</span><span class=\"token punctuation\">(</span>a_1p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        __m128 a_2p_vec <span class=\"token operator\">=</span> <span class=\"token function\">_mm_set_ps1</span><span class=\"token punctuation\">(</span>a_2p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        __m128 a_3p_vec <span class=\"token operator\">=</span> <span class=\"token function\">_mm_set_ps1</span><span class=\"token punctuation\">(</span>a_3p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        c_p0_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_p0_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> a_0p_vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        c_p1_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_p1_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> a_1p_vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        c_p2_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_p2_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> a_2p_vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        c_p3_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_p3_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> a_3p_vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c_pntr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    __m128 c_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_p0_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_p1_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_p2_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_p3_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MY_MMult_4x4_10</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the columns of C, unrolled by 4 */</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">/* Loop over the rows of C */</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token function\">AddDot4x4_SSE2</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GemmAccelerateSimd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        MatriA<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        MatriB<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token function\">MY_MMult_4x4_10</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriA<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriB<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>MatriC<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"7矩阵分块\"><a class=\"anchor\" href=\"#7矩阵分块\">#</a> 7. 矩阵分块</h1>\n<p><img loading=\"lazy\" data-src=\"1734703427993.jpg\" alt=\"7.矩阵分块\"></p>\n<p>分块技术（blocking）是一种常用的优化策略，旨在改善缓存命中率和数据局部性，进而提升计算密集型操作（如矩阵乘法）的性能。通过将大矩阵分割成较小的子矩阵（即 “块”），可以更好地利用 CPU 缓存，并减少内存访问延迟。</p>\n<p>以下代码中， <code>mc</code>  (Macro for m-block Count)：定义了处理矩阵行方向上的块大小 ， <code>kc</code>  (Macro for k-block Count)：定义了处理矩阵列方向上的块大小。在整个代码中被用作循环边界或参数，用于控制矩阵分块的尺寸。他们将矩阵 A 分割乘 256<em>128 的小块，将矩阵 B 分割成 128</em>N 的小块，然后计算两个小块的矩阵乘运算。至于如何得到最终结果，可以参考《线性代数》知识：分块矩阵乘。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;emmintrin.h></span> <span class=\"token comment\">// SSE2</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;smmintrin.h></span> <span class=\"token comment\">// SSE4.1, for _mm_dp_ps if needed</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* Block sizes */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">mc</span> <span class=\"token expression\"><span class=\"token number\">256</span> </span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">kc</span> <span class=\"token expression\"><span class=\"token number\">128</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/* Create macros so that the matrices are stored in row-major order */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">A</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>lda <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">B</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldb <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">C</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">min</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/* Routine for computing C = A * B + C */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AddDot4x4_SSE</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">/* Point to the current elements in the four rows of A */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_0p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_1p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_2p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_3p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  __m128 c_0p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  __m128 c_1p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  __m128 c_2p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  __m128 c_3p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    __m128 b_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">float</span> a_0p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_0p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">float</span> a_1p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_1p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">float</span> a_2p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_2p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">float</span> a_3p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_3p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    c_0p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_0p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_set1_ps</span><span class=\"token punctuation\">(</span>a_0p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    c_1p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_1p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_set1_ps</span><span class=\"token punctuation\">(</span>a_1p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    c_2p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_2p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_set1_ps</span><span class=\"token punctuation\">(</span>a_2p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    c_3p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_3p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_set1_ps</span><span class=\"token punctuation\">(</span>a_3p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token comment\">// Store results back into C matrix</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    __m128 c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_0p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_1p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_2p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_3p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">InnerKernel_SSE</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">+=</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the columns of C, unrolled by 4 */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the rows of C */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token function\">AddDot4x4_SSE</span><span class=\"token punctuation\">(</span> k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span>j <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MY_MMult_4x4_11_SSE</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> p <span class=\"token operator\">+=</span> kc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">int</span> pb <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">-</span> p<span class=\"token punctuation\">,</span> kc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> mc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      <span class=\"token keyword\">int</span> ib <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">-</span> i<span class=\"token punctuation\">,</span> mc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      <span class=\"token function\">InnerKernel_SSE</span><span class=\"token punctuation\">(</span>ib<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> pb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GemmAccelerateSimd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        MatriA<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        MatriB<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token function\">MY_MMult_4x4_11_SSE</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriA<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriB<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>MatriC<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"8-数据pack\"><a class=\"anchor\" href=\"#8-数据pack\">#</a> 8. 数据 Pack</h1>\n<p>在上面的优化中可以发现，在矩阵乘法的计算中，无论是行主序还是列主序，始终有一个矩阵的内存是没办法连续访问的。为了改善这个情况，可以执行数据 Pack，使矩阵 A 和矩阵 B 的内存变成连续的。</p>\n<p>下面代码，在矩阵运算之前将矩阵 B 按照访问顺序重新排布，存储在 <code>packedB</code>  中。</p>\n<p>是否有速度提升，需要在目标平台上实测，因为算法提升了矩阵运算效率，但是增加了 pack 时间。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;emmintrin.h></span> <span class=\"token comment\">// SSE2</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;smmintrin.h></span> <span class=\"token comment\">// SSE4.1, for _mm_dp_ps if needed</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* Block sizes */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">mc</span> <span class=\"token expression\"><span class=\"token number\">256</span> </span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">kc</span> <span class=\"token expression\"><span class=\"token number\">128</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/* Create macros so that the matrices are stored in row-major order */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">A</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>lda <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">B</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldb <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">C</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">min</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/* Routine for computing C = A * B + C */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PackMatrixB_SSE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b_to<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b_ij_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token operator\">*</span>b_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> b_ij_pntr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token operator\">*</span>b_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> b_ij_pntr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token operator\">*</span>b_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> b_ij_pntr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token operator\">*</span>b_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> b_ij_pntr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AddDot4x4_SSE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">/* Point to the current elements in the four rows of A */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_0p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_1p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_2p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_3p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  __m128 c_0p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  __m128 c_1p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  __m128 c_2p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  __m128 c_3p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    __m128 b_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Load 4 floats from b</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    b <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">float</span> a_0p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_0p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">float</span> a_1p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_1p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">float</span> a_2p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_2p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">float</span> a_3p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_3p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    c_0p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_0p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_set1_ps</span><span class=\"token punctuation\">(</span>a_0p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    c_1p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_1p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_set1_ps</span><span class=\"token punctuation\">(</span>a_1p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    c_2p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_2p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_set1_ps</span><span class=\"token punctuation\">(</span>a_2p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    c_3p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_3p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_set1_ps</span><span class=\"token punctuation\">(</span>a_3p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token comment\">// Store results back into C matrix</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    __m128 c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_0p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_1p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_2p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_3p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">InnerKernel_SSE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token keyword\">float</span> packedB<span class=\"token punctuation\">[</span>k <span class=\"token operator\">*</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* Loop over the columns of C, unrolled by 4 */</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token function\">PackMatrixB_SSE</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>packedB<span class=\"token punctuation\">[</span>j <span class=\"token operator\">*</span> k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* Loop over the rows of C */</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      <span class=\"token function\">AddDot4x4_SSE</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>packedB<span class=\"token punctuation\">[</span>j <span class=\"token operator\">*</span> k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MY_MMult_4x4_12_SSE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> pb<span class=\"token punctuation\">,</span> ib<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> p <span class=\"token operator\">+=</span> kc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    pb <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">-</span> p<span class=\"token punctuation\">,</span> kc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> mc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>      ib <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">-</span> i<span class=\"token punctuation\">,</span> mc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>      <span class=\"token function\">InnerKernel_SSE</span><span class=\"token punctuation\">(</span>ib<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> pb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GemmAccelerateSimd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        MatriA<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        MatriB<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token function\">MY_MMult_4x4_12_SSE</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriA<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriB<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>MatriC<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>#9. 进一步 pack</p>\n<p>将 A 和 B 两个矩阵都进行 pack。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;emmintrin.h></span> <span class=\"token comment\">// SSE2</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;smmintrin.h></span> <span class=\"token comment\">// SSE4.1, for _mm_dp_ps if needed</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* Block sizes */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">mc</span> <span class=\"token expression\"><span class=\"token number\">256</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">kc</span> <span class=\"token expression\"><span class=\"token number\">128</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/* Create macros so that the matrices are stored in row-major order */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">A</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>lda <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">B</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldb <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">C</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">min</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/* Routine for computing C = A * B + C */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PackMatrixB_SSE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b_to<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b_ij_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token operator\">*</span>b_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> b_ij_pntr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token operator\">*</span>b_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> b_ij_pntr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token operator\">*</span>b_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> b_ij_pntr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token operator\">*</span>b_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> b_ij_pntr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PackMatrixA_SSE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_to<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token operator\">*</span>a_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token operator\">*</span>a_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token operator\">*</span>a_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token operator\">*</span>a_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AddDot4x4_SSE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  __m128 c_0p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  __m128 c_1p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  __m128 c_2p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  __m128 c_3p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    __m128 b_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Load 4 floats from b</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    b <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    __m128 a_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Load 4 floats from a</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    a <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    c_0p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_0p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_shuffle_ps</span><span class=\"token punctuation\">(</span>a_reg<span class=\"token punctuation\">,</span> a_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_MM_SHUFFLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    c_1p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_1p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_shuffle_ps</span><span class=\"token punctuation\">(</span>a_reg<span class=\"token punctuation\">,</span> a_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_MM_SHUFFLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    c_2p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_2p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_shuffle_ps</span><span class=\"token punctuation\">(</span>a_reg<span class=\"token punctuation\">,</span> a_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_MM_SHUFFLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    c_3p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_3p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_shuffle_ps</span><span class=\"token punctuation\">(</span>a_reg<span class=\"token punctuation\">,</span> a_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_MM_SHUFFLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token comment\">// Store results back into C matrix</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    __m128 c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_0p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_1p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_2p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_3p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">InnerKernel_SSE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token keyword\">float</span> packedA<span class=\"token punctuation\">[</span>m <span class=\"token operator\">*</span> k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token keyword\">float</span> packedB<span class=\"token punctuation\">[</span>k <span class=\"token operator\">*</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* Loop over the columns of C, unrolled by 4 */</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token function\">PackMatrixB_SSE</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> packedB <span class=\"token operator\">+</span> j <span class=\"token operator\">*</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* Loop over the rows of C */</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token function\">PackMatrixA_SSE</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> packedA <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      <span class=\"token function\">AddDot4x4_SSE</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> packedA <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> k<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> packedB <span class=\"token operator\">+</span> j <span class=\"token operator\">*</span> k<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MY_MMult_4x4_13_SSE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> pb<span class=\"token punctuation\">,</span> ib<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> p <span class=\"token operator\">+=</span> kc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    pb <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">-</span> p<span class=\"token punctuation\">,</span> kc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> mc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>      ib <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">-</span> i<span class=\"token punctuation\">,</span> mc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>      <span class=\"token function\">InnerKernel_SSE</span><span class=\"token punctuation\">(</span>ib<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> pb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GemmAccelerateSimd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        MatriA<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        MatriB<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token function\">MY_MMult_4x4_13_SSE</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriA<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriB<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>MatriC<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "conv",
                "gemm"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/07/07/conv4/",
            "url": "https://forcheetah.github.io/2024/07/07/conv4/",
            "title": "【Winograd】卷积加速算法原理及实现",
            "date_published": "2024-07-07T12:57:48.314Z",
            "content_html": "<h1 id=\"算法原理\"><a class=\"anchor\" href=\"#算法原理\">#</a> 算法原理</h1>\n<p>算法原理还没写，预计将来补上。可以在网络上搜索算法原理。</p>\n<h1 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h1>\n<p>可以在 github 项目 <a href=\"https://github.com/ForCheetah/ConvAccelerate\">卷积加速算法实现</a> 中下载代码实现，运行其中的测试函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>winograd 算法   F (2*2, 3*3)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>仅用于 3*3 卷积，stride=1, dilation=1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>推荐   w&lt;120 h&lt;120 in_c>16 out_c>16</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>现已支持 pad   之后添加 dilation</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*/</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">TestWinogradF23ConvLayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>winograd 算法  nchw   F (6*6, 3*3)    8*8  3*3  ->  6*6</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>仅用于 3*3 卷积，stride=1, dilation=1</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>推荐   w&lt;120 h&lt;120 in_c>16 out_c>16</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>现已支持 pad   之后添加 dilation</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>*/</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">TestWinogradF63ConvLayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>；</pre></td></tr></table></figure><p>两个函数分别测试了基于 F (2*2,3*3) 以及 F (6*6,3*3) 的 winograd 卷积算法。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "accelerate",
                "conv"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/05/30/engine1/",
            "url": "https://forcheetah.github.io/2024/05/30/engine1/",
            "title": "【推理引擎】NCNN和Tengine量化推理逻辑对比",
            "date_published": "2024-05-30T13:44:20.534Z",
            "content_html": "<p>本文讨论了 ncnn 和 tengine 两个框架在量化推理上的逻辑，并比较了它们之间的区别与联系，以及一点自己的思考。</p>\n<blockquote>\n<p>风雨送春归，飞雪迎春到。<br>\n已是悬崖百丈冰，犹有花枝俏。  ---- 教员<br>\n ------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<h1 id=\"量化\"><a class=\"anchor\" href=\"#量化\">#</a> 量化</h1>\n<p>这里仅简单介绍一下量化，不会展开，有机会再详细写一下量化算法。</p>\n<h2 id=\"什么是量化\"><a class=\"anchor\" href=\"#什么是量化\">#</a> 什么是量化</h2>\n<p>量化的核心思想是将连续的浮点数域映射到一个更小的、离散的整数集合上。这通过将浮点数值舍入或映射到最近的整数值来实现，同时保持整个模型表示的动态范围。例如，一个原本使用 32 位浮点数表示的权重值，在量化后可能会被转换为 8 位的整数，这样每个权重只需占用更少的存储空间，并且计算时可以利用专门针对整数优化的硬件加速器，从而提高推理速度并降低能耗。</p>\n<h2 id=\"量化的分类\"><a class=\"anchor\" href=\"#量化的分类\">#</a> 量化的分类</h2>\n<p><img loading=\"lazy\" data-src=\"1717075166684.jpg\" alt=\"分类\"></p>\n<p>tensorflow 官网上的这张图详细的解释了量化的种类和区别：</p>\n<ul>\n<li>基本的 float32 模型：      tensorflow 导出的 TFlite models</li>\n<li>训练后 float16 模型 ：        量化为 float16，仍然是浮点数模型，精度损失较小</li>\n<li>量化感知训练：           在训练过程中就引入量化操作，使模型有机会适应量化带来的误差，通常能获得比单纯训练后量化更好的性能。</li>\n<li>训练后动态范围量化：        对固定参数进行量化，但是权重，但是层的输入输出没有进行量化。  不需要校准数据集</li>\n<li>训练后整形量化：            全整形量化，固定参数和层的输入输出都进行了量化，需要校准数据集</li>\n<li>训练后整形量化 int16 的激活：        激活层采用 int16 量化，其余 int8</li>\n</ul>\n<p>下面介绍和对比的 NCNN 和 Tengine 仅仅指的是运行再 CPU 上是采用的 Int8 量化策略，都属于训练后整形量化。</p>\n<h1 id=\"ncnn-量化推理逻辑\"><a class=\"anchor\" href=\"#ncnn-量化推理逻辑\">#</a> NCNN 量化推理逻辑</h1>\n<h2 id=\"ncnn\"><a class=\"anchor\" href=\"#ncnn\">#</a> ncnn</h2>\n<p><img loading=\"lazy\" data-src=\"1717075407294.jpg\" alt=\"ncnn\"></p>\n<p><a href=\"https://github.com/Tencent/ncnn\">腾讯 NCNN</a><br>\nncnn 是一个为手机端极致优化的高性能神经网络前向计算框架。 ncnn 从设计之初深刻考虑手机端的部署和使用。 无第三方依赖，跨平台，手机端 cpu 的速度快于目前所有已知的开源框架。 基于 ncnn，开发者能够将深度学习算法轻松移植到手机端高效执行， 开发出人工智能 APP，将 AI 带到你的指尖。 ncnn 目前已在腾讯多款应用中使用，如：QQ，Qzone，微信，天天 P 图等。</p>\n<h2 id=\"量化逻辑\"><a class=\"anchor\" href=\"#量化逻辑\">#</a> 量化逻辑</h2>\n<p>一、ncnn 仅对两个部分进行了量化</p>\n<ul>\n<li>i. 权重部分 ： 卷积、深度可分离卷积、全连接 三种算子的 权重，量化因子数量等于权重通道数。</li>\n<li>ii. 输入输出 tensor 部分： 卷积、深度可分离卷积、全连接 三种算子 的输入 tensor，量化因子数量为 1.</li>\n<li>iii. 卷积、深度可分离卷积、全连接算子的 bias 部分维持 float 不变</li>\n</ul>\n<p>这也就是说，只有卷积、深度可分离卷积、全连接三种算子采用量化的 int8 推理，其余算子仍然采用 float 推理。这样的方式是合理的，因为很多算子因为运算效率和精度的原因，不适合量化推理，所以分成量化的和非量化的算子是同行的做法。地平线公司生产的征程系列芯片对算子是否采用量化推理作出了更精细的分类（主动量化、被动量化、手动量化），感兴趣的可以学习一下地平线的量化逻辑。</p>\n<p><img loading=\"lazy\" data-src=\"1717075507282.jpg\" alt=\"结果\"></p>\n<p>上图是一个简单的神经网络模型经 ncnn 量化之后的结果。<br>\n这个模型有两个卷积层 + 一个全连接层，外加一些激活、BN、维度变换层。这里可以看到：</p>\n<ul>\n<li>1. 前三行是权重的量化，后三行是输入输出 tensor 的量化</li>\n<li>2. 第一行是卷积 conv1 权重量化，该卷积有 4 个卷积核，因此量化因子有 4 个 （ncnn 的量化因子之所以这么大，是因为 ncnn 存储的是量化因子的倒数）</li>\n<li>3. 第二行是卷积 conv2 权重量化，该卷积有 8 个卷积核，因此量化因子有 8 个</li>\n<li>4. 第三行是全连接层的权重量化</li>\n<li>5. 后三行是对应算子的输入 tensor 的量化因子，都只有 1 个</li>\n</ul>\n<p>Tengine 框架就不专门介绍算子量化因子的数量了，因为都是一样的。</p>\n<p><img loading=\"lazy\" data-src=\"1717075577838.jpg\" alt=\"ncnn流程\"></p>\n<p>上图是 ncnn 的量化模型在卷积推理时的逻辑，先忽略掉图中的红线流程，只看蓝线部分的一般流程：</p>\n<ul>\n<li>1.ncnn 的基本思路是 float 类型输入，float 类型输出</li>\n<li>2. 跟随蓝线，输入 Input 为 float 类型，经判断不是 int8，将 input 量化为 int8</li>\n<li>3.int8 类型的 input 于 int8 类型的权重进行卷积运算，运算结果是 int32</li>\n<li>4. 判断是否需要转 int8，True 还是 Flase 后面再讲，一般流程中为 False，然后将 int32 反量化为 float</li>\n<li>5.float 经过加偏置 Bias（float 类型）和激活操作之后，得到输出 Output</li>\n</ul>\n<p>一般流程中，卷积、深度可分离卷积和全连接这些算子都要进行 量化 - 计算 - 反量化过程，其他算子仍然采用 float 推理。为了减少量化和反量化的计算，ncnn 对特殊情况做了优化，也就是红线流程：</p>\n<ul>\n<li>1. 当神经网络中存在以下两种情况时走红线流程：1）两个卷积层相邻  conv -&gt; conv   2) 两个卷积层中间夹个 split  conv-&gt; split -&gt; conv</li>\n<li>2. 判断 input 输入是否为 int8，是的话无须量化操作</li>\n<li>3. 权重和 int8 的输入进行卷积计算之后得到 int32 的输出</li>\n<li>4. 再以上两种情况下，to Int8 判断为 True，直接将 int32 强转为 int8</li>\n<li>5. 输出 int8</li>\n</ul>\n<p>这种情况下减少了量化 和反量化的操作，一定程度上提高了运行效率。但是在实际测试中似乎效果不好，原因在于，现在的神经网络在卷积层和卷积层之间，基本上会有偏置、BN、激活等操作，很难会有两个卷积层相连的情况。</p>\n<p>下面是 ncnn 卷积算子的量化推理的简单抽象：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// f: float  I:int8   Scale:量化因子  in: input  w:weight  out:output   bias:偏置</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>f_in <span class=\"token operator\">=</span> I_in * Scale_in    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>f_w  <span class=\"token operator\">=</span> I_w  * Scale_w      </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>f_out <span class=\"token operator\">=</span> f_in * f_w + f_bias</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">=</span> I_in * I_w  * <span class=\"token punctuation\">(</span>Scale_in * Scale_w<span class=\"token punctuation\">)</span> + f_bias</pre></td></tr></table></figure><p>第一行对符号进行了注释。</p>\n<p>第二行和第三行是量化的基本等式</p>\n<p>最后 输出的是  <code>f_out</code> ，反量化因子是  <code>(Scale_in * Scale_w)</code>   ，还要加上 float 类型的 偏置  <code>f_bias</code></p>\n<h1 id=\"tengine量化推理逻辑\"><a class=\"anchor\" href=\"#tengine量化推理逻辑\">#</a> Tengine 量化推理逻辑</h1>\n<h2 id=\"tengine\"><a class=\"anchor\" href=\"#tengine\">#</a> Tengine</h2>\n<p><img loading=\"lazy\" data-src=\"1717075777490.jpg\" alt=\"tengine\"></p>\n<p><a href=\"https://github.com/OAID/Tengine\">Open AI Lib Tengine</a></p>\n<p>Tengine 由 OPEN AI LAB 主导开发，该项目实现了深度学习神经网络模型在嵌入式设备上的快速、高效部署需求。为实现在众多 AIoT 应用中的跨平台部署，本项目使用 C 语言进行核心模块开发，针对嵌入式设备资源有限的特点进行了深度框架裁剪。同时采用了完全分离的前后端设计，有利于 CPU、GPU、NPU 等异构计算单元的快速移植和部署，降低评估、迁移成本。</p>\n<p>尽管 Tengine 已经挺久不再维护了，但是作为一个完全使用 C 语言承担推理部分工作的框架，tengine 还是有轻量、框架结构清晰、易于拓展、容易学习、部署简单等优势，还是非常值得学习的。</p>\n<h2 id=\"量化逻辑-2\"><a class=\"anchor\" href=\"#量化逻辑-2\">#</a> 量化逻辑</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// f: float  int8:int8  int32:int32  Scale:量化因子  in: input  w:weight  out:output   bias:偏置</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 一般性等价关系</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>f_w <span class=\"token operator\">=</span> int8_w * scale_w    f_out <span class=\"token operator\">=</span> int8_out * scale_out    f_in <span class=\"token operator\">=</span> int8_in * scale_in</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>f_out <span class=\"token operator\">=</span> f_w * f_in + int32_bias</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># tengine 等一些推理引擎  直接将 bias 的量化因子定为：</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>f_bias <span class=\"token operator\">=</span> int32_bias * <span class=\"token punctuation\">(</span>scale_w * scale_in<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># float 类型输出等式</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>f_out     <span class=\"token operator\">=</span> f_w * f_in + f_bias</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token operator\">=</span> int8_w * scale_w  *  int8_in * scale_in   + f_bias</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token operator\">=</span> int8_w * int8_in * <span class=\"token punctuation\">(</span>scale_w  * scale_in<span class=\"token punctuation\">)</span>  + int32_bias * <span class=\"token punctuation\">(</span>scale_w * scale_in<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int8_w * int8_in + int32_bias<span class=\"token punctuation\">)</span> * <span class=\"token punctuation\">(</span>scale_w * scale_in<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>int8_out * scale_out <span class=\"token operator\">=</span>    <span class=\"token punctuation\">(</span>int8_w * int8_in + int32_bias<span class=\"token punctuation\">)</span> * <span class=\"token punctuation\">(</span>scale_w  * scale_in<span class=\"token punctuation\">)</span>                                     </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>int8_out <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int8_w * int8_in + int32_bias<span class=\"token punctuation\">)</span> * <span class=\"token punctuation\">(</span>scale_w  * scale_in / scale_out<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>为了能讲清楚 Tengine 的量化推理逻辑，需要先看懂上面的等式推理。</p>\n<p>尽管行数较多，但实际上很简单，只有最基本的多项式推导。首先记一下第一行符号代表的意思，挺直观就不过多介绍了。</p>\n<ul>\n<li>1.tengine 每个算子都是严格的 int8 输入 int8 输出</li>\n<li>2. 一般性等价关系中展示了 float 类型和 其 int8 类型的关系</li>\n<li>3. 第 8 行中，tengine (还有其他一些引擎，如地平线) 对卷积的偏置进行了量化。量化因子直接指定为当前层的 <code>(scale_w * scale_in)</code> 。量化后的模型，偏置为 int32 类型。注意肯定不能是 int8 类型，因为其量化因子是 <code>(scale_w * scale_in)</code> ，采用 int8 绝对会溢出。</li>\n<li>4. 我们先来看第 11 行，float 类型的输出，将等式  <code>f_out   = f_w * f_in + f_bias</code>  中右边的 float 类型全部转为 int 类型，这个等式很直观。此时你也应该看到了将 bias 的量化因子直接定为 <code>(scale_w * scale_in)</code>  的好处了。</li>\n<li>5. 继续推理等式，第 16 行，将 11 行的等式左边也换成 int8 类型。（ tengine 输入输出都是 int8）</li>\n<li>6.17 行，int8_out ，也就是 int8 类型的输出，等价于 数据运算  <code>int8_w * int8_in + int32_bias</code>  乘上量化因子  <code>scale_w  * scale_in / scale_out</code></li>\n</ul>\n<p>从上面的推理来看，把  <code>scale_w  * scale_in / scale_out</code>  作为一个整体，每个卷积算子只需要进行一次量化运算就行了，和 ncnn (每个卷积算子都需要 量化 反量化 两次计算) 相比，足足减少了一半的量化运算。</p>\n<p>但是上面的推理忽略了一个问题，激活。基本上每个卷积层后面都跟着激活层，<strong>激活层能不能在量化形式下（整形状态）进行</strong>呢，这又是一个值得讨论的问题。</p>\n<p>tengine 没有去讨论这个问题，将上面的推理分成两步去做，先通过 <code> * scale_w  * scale_in</code>  反量化为 float 类型，做激活，然后再通过   <code>/ scale_out </code>  量化为 int8 类型，具体过程看下图：</p>\n<p><img loading=\"lazy\" data-src=\"1717075907713.jpg\" alt=\"运行逻辑\"></p>\n<p>再简单介绍一下过程，这个过程在前面的公式推理中已经基本提到了。</p>\n<ul>\n<li>1. 从图中可以看到，输入输出都是 int8</li>\n<li>2.int8 类型的 输入和权重 经过卷积层 得到的输出是 int32 类型，再于 int32 类型的 bias 相加</li>\n<li>3. 为了在 float 形式下进行激活操作， <code> * scale_w  * scale_in</code>  反量化为 float 类型</li>\n<li>4. 激活</li>\n<li>5. 通过 <code>/ scale_out </code>  量化为 int8 类型</li>\n</ul>\n<h1 id=\"量化讨论和疑问留存\"><a class=\"anchor\" href=\"#量化讨论和疑问留存\">#</a> 量化讨论和疑问留存</h1>\n<h2 id=\"简单比较\"><a class=\"anchor\" href=\"#简单比较\">#</a> 简单比较</h2>\n<p><img loading=\"lazy\" data-src=\"1717075973433.jpg\" alt=\"其他算子\"></p>\n<ul>\n<li>a.tengine 和 ncnn 都是将权重量化为 int8，ncnn 将 bias 保留 float 形式，tengine 将 bias 量化为 int32。float 和 int32 所占字节相同，模型量化前后的空间占用上，两者是相当的。</li>\n<li>b. 前面提到 ncnn 仅有 3 个算子采用量化推理，这是合理的，ncnn 主要在手机等设备上运行，效率很高；专门设计的 NPU 芯片支持十几个甚至更多 的算子量化推理；而 tengine 在架构上没有区分量化运行的算子和非量化运行的算子，所有算子一股脑全部采用量化推理，至少直到不再维护后的<a href=\"https://github.com/OAID/Tengine\">最后一个版本</a>都是这样。笔者认为这个设计很失败，因为大量不支持量化推理的算子，不得不先反量化，然后进行 float 运算，再量化，徒徒增加了时间、空间，还降低了精度。</li>\n<li>c. 讨论一下 《Tengine 量化推理逻辑》一节中提到的 <strong>激活层能不能在量化形式下（整形状态）进行</strong> 这个问题。由于大多数卷积算子用到的激活函数 是 Relu，而我们用到的又是 int8 这种对称量化，在这些条件下，理论是可以直接在 整形条件下进行激活计算的。那么整个过程就从下图的左边变成了右边，减少了量化一半的计算量。笔者修改 Tengine 工程并验证了一下，从结果来区别不大。当然笔者没有进行大量测试，感兴趣的欢迎测试和交流。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"1717076022465.jpg\" alt=\"compare\"></p>\n<h2 id=\"疑问留存\"><a class=\"anchor\" href=\"#疑问留存\">#</a> 疑问留存</h2>\n<p>既然量化和反量化过程费时又费力 ，那么有没有一种可能，多个连续的卷积层条件下，<strong>只在首尾进行量化和反量化</strong>呢？</p>\n<p>本博客将在不久后，通过公式、仿真的形式探讨一下其可能性及条件。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "accelerate",
                "conv",
                "tengine",
                "ncnn"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/05/24/tvm1/",
            "url": "https://forcheetah.github.io/2024/05/24/tvm1/",
            "title": "【TVM】根据例子走通代码库",
            "date_published": "2024-05-24T14:49:36.319Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>最近开始学习 TVM。感觉 TVM 英文文档中 <a href=\"https://tvm.apache.org/docs/dev/tutorial/codebase_walkthrough.html\">TVM Codebase Walkthrough by Example</a>    一节对于理解 TVM 工程非常有用。本篇文章只是翻译，可以直接跳转查看英文全文。</p>\n<blockquote>\n<p>这个时代有这么多愿意开源并将技术介绍给我们的行业大牛，真是我们的荣幸，膜拜！<br>\n------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<h1 id=\"codebase-structure-overview\"><a class=\"anchor\" href=\"#codebase-structure-overview\">#</a> Codebase Structure Overview</h1>\n<p>在 TVM 存储库的根目录中，我们有以下子目录，它们共同构成了大部分代码库。</p>\n<ul>\n<li><strong>src</strong><br>\nC++ code for operator compilation and deployment runtimes.<br>\n 算子编译 、 runtime 部署 的 C++ 代码</li>\n<li><strong>src/relay</strong><br>\nImplementation of Relay, a new functional IR for deep learning framework.<br>\nRelay IR 的实现      算子的映射关系在 src/relay/op</li>\n<li><strong>python</strong><br>\nPython frontend that wraps C++ functions and objects implemented in src.<br>\npython 前端</li>\n<li><strong>src/topi</strong><br>\nCompute definitions and backend schedules for standard neural network operators.<br>\n 计算标准神经网络算子的定义和后端调度</li>\n</ul>\n<p>TVM 中 Python 和 C++ 的互操作性不是单向的。尽管在 TVM 中 C++ 完成繁重的内部执行工作，Python 完成用户接口， TVM 中也存在 C++ 调用 Python 的情况：For example, the convolution operator is implemented in Python, and its implementation is invoked from C++ code in Relay.（Relay 中的 C++ 调用 Python 实现的卷积算子）</p>\n<h1 id=\"vector-add-example\"><a class=\"anchor\" href=\"#vector-add-example\">#</a> Vector Add Example</h1>\n<p>使用 vector add 的例子来查看底层 TVM API.</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">1024</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>A <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>te<span class=\"token punctuation\">.</span>placeholder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>B <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>te<span class=\"token punctuation\">.</span>placeholder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>C <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>te<span class=\"token punctuation\">.</span>compute<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> i<span class=\"token punctuation\">:</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> B<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里面 A、B、C 都是  <code>tvm.tensor.Tensor</code>   其 Python 定义位于 <code>python/tvm/te/tensor.py</code> . 支撑的 C++ 定义位于 <code>include/tvm/te/tensor.h</code>  和 <code>src/te/tensor.cc</code>  所有的 Python 类型定义都能找到对应的相同名字的 C++ 定义。</p>\n<p>Python 对 C++ 的包装位于  <code>python/tvm/_ffi/</code> 。</p>\n<p>一个 Tensor 包含一个 Operation 类，定义于 python/tvm/te/tensor.py，对应的 C++ 实现位于 <code>include/tvm/te/operation.h</code>  和 <code>src/tvm/te/operation</code>  。 <code>Tensor</code>  是  <code>Operation</code>  类的输出。</p>\n<p>我们将输出张量 C 对应的操作传递给 <code>tvm.te.create_schedule()</code>  函数 （来自于 <code>python/tvm/te/schedule.py</code> 。）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>te<span class=\"token punctuation\">.</span>create_schedule<span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">.</span>op<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这个函数映射到 C++ 函数 <code>include/tvm/schedule.h</code> 。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>inline Schedule create_schedule<span class=\"token punctuation\">(</span>Array<span class=\"token operator\">&lt;</span>Operation<span class=\"token operator\">></span> ops<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> Schedule<span class=\"token punctuation\">(</span>ops<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>Schedule</code>  包含 <code>Stage</code>  输出  <code>Operation</code>  的集合。</p>\n<p><code>Stage</code>  对应于一个操作 <code>Operation</code> 。上面的 vector add 操作中有两个 placeholder ops 和一个 compute op. 所以 <code>Schedule s</code>  有三个状态  <code>Stage</code> ，每个 <code>Stage</code>  持有以下信息： 循环嵌套结构、每个循环的类型（ <code>Parallel，Vectorized，Unrolled</code> ）、以及在下一个循环嵌套 <code>Stage</code>  中在哪里执行它自己的计算。</p>\n<p><code>Schedule</code>  和 <code>Stage</code>  本身定义在 <code>tvm/python/te/schedule.py</code> ，  <code>include/tvm/te/schedule.h</code> ， 和 <code>src/te/schedule/schedule_ops.cc</code> 。</p>\n<p>为简单起见，我们使用 <code>tvm.build(...)</code>  处理上方 <code>create_schedule()</code>  函数创建的默认 <code>Schedule s</code>  和 &lt;em&gt;。我们必须添加必要的线程绑定，来使得其能在 GPU 上运行：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>target <span class=\"token operator\">=</span> <span class=\"token string\">\"cuda\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bx<span class=\"token punctuation\">,</span> tx <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">.</span>op<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> factor<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span>bx<span class=\"token punctuation\">,</span> tvm<span class=\"token punctuation\">.</span>te<span class=\"token punctuation\">.</span>thread_axis<span class=\"token punctuation\">(</span><span class=\"token string\">\"blockIdx.x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span> tvm<span class=\"token punctuation\">.</span>te<span class=\"token punctuation\">.</span>thread_axis<span class=\"token punctuation\">(</span><span class=\"token string\">\"threadIdx.x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fadd <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>tvm.build(...)</code> ，定义在 <code>python/tvm/driver/build_module.py</code> ， 需要输入一个 <code>Schedule</code> ;  <code>input</code> , <code>output Tensor</code> ; 以及一个 <code>target</code> 。返回一个 <code>tvm.runtime.Module</code> 。</p>\n<p>整个 <code>tvm.build(...)</code>  过程可以分成两步：</p>\n<ul>\n<li>\n<p>i. 降级 高级的、初始的循环嵌套结构被转换为 最终的、低级的 IR</p>\n</li>\n<li>\n<p>ii. 代码生成 low level IR 生成目标机器码</p>\n</li>\n</ul>\n<p>降级是通过 <code>tvm.lower()</code>  函数完成的，它定义在 <code>python/tvm/build\\_module.py</code> 。第一，指定绑定推理，一个最初的循环嵌套结构就创建好了。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">lower</span><span class=\"token punctuation\">(</span>sch<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>          args<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>          name<span class=\"token operator\">=</span><span class=\"token string\">\"default_function\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          binds<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          simple_mode<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   bounds <span class=\"token operator\">=</span> schedule<span class=\"token punctuation\">.</span>InferBound<span class=\"token punctuation\">(</span>sch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   stmt <span class=\"token operator\">=</span> schedule<span class=\"token punctuation\">.</span>ScheduleOps<span class=\"token punctuation\">(</span>sch<span class=\"token punctuation\">,</span> bounds<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>边界推断是推断所有循环边界和中间缓冲区大小的过程。如果你的目标是 CUDA，且你用了 share memory，它需要的最小 size 在此处确定。绑定推理时在 <code>src/te/schedule/bound.cc，src/te/schedule/graph.cc </code>  和  <code>src/te/schedule/message\\_passing.cc</code>  中实现的。</p>\n<p><code>stmt</code> ， <code>ScheduleOps()</code>  的输出，表示一个初识的循环嵌套结构。如果在 schedule 中已经应用了 <code>reorder</code>  和 <code>split</code>  原语，那么初始的循环嵌套结构已经反映了这些变化。 <code>ScheduleOps()</code>  定义在 <code>rc/te/schedule/schedule_ops.cc</code> 。</p>\n<p>接下来应用一些 lowering passes to  <code>stmt</code>  . 这些 passes 在 <code>src/tir/pass</code>  子文件夹下实现。举个例子，如果在你的 <code>schedule</code>  中应用了 <code>vectorize</code>  或者 <code>unroll</code>  原语，他们会被应用到循环 vectorization 和 unrolling passes。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>stmt <span class=\"token operator\">=</span> ir_pass<span class=\"token punctuation\">.</span>VectorizeLoop<span class=\"token punctuation\">(</span>stmt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>stmt <span class=\"token operator\">=</span> ir_pass<span class=\"token punctuation\">.</span>UnrollLoop<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    stmt<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cfg<span class=\"token punctuation\">.</span>auto_unroll_max_step<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cfg<span class=\"token punctuation\">.</span>auto_unroll_max_depth<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cfg<span class=\"token punctuation\">.</span>auto_unroll_max_extent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cfg<span class=\"token punctuation\">.</span>unroll_explicit<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>在降级 lowering 结束后， <code>build()</code>  函数生成目标机器代码。如果你的设备是 X86, 这个代码可能包含 SSE 或者 AVX 指令；如果是 CUDA 设备，将包含 PTX 指令。 此外，除了目标特定的机器代码之外，TVM 还生成负责内存管理、内核启动等的主机端代码。</p>\n<p><code>build\\_module()</code>  函数完成代码生成，定义在 <code>python/tvm/target/codegen.py</code> 。在 C++ 端代码生成定义在 <code>src/target/codegen</code> 。 <code>build\\_module()</code>  Python 函数会搜索在 <code>src/target/codegen/codegen.cc</code>  中的 <code>build()</code>  函数。</p>\n<p><code>build()</code>  函数 <code>PackedFunc</code>  注册表中为目标设备查找代码生成器，并调用找到的函数。例如， <code>codegen.build\\_cuda</code>  函数注册在 <code>src/codegen/build_cuda_on.cc</code> ，就像这样：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>TVM_REGISTER_GLOBAL<span class=\"token punctuation\">(</span><span class=\"token string\">\"codegen.build_cuda\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span>set_body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> BuildCUDA<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上方的 <code>BuildCUDA()</code>  函数使用定义在 <code>src/codegen/codegen_cuda.cc</code>  的 <code>CodeGenCUDA</code>  类，从 lowered IR 生成 CUDA kernel source，并使用 NVRTC 编译 kernel。如果你的目标设备使用 LLVM，包括 X86、ARM、NVPTX 和 AMDGPU，代码可由定义在 <code>src/codegen/llvm/codegen_llvm.cc</code>  的 <code>CodeGenLLVM</code>  来生成。 <code>CodeGenLLVM</code>  将 TVM IR 转换成 LLVM IR，运行一些 LLVM 优化 passes，以及生成目标机器码。</p>\n<p>在 <code>src/codegen/codegen.cc</code>  中的 <code>Build()</code>  函数会返回一个 <code>runtime::Module</code>  类，它定义在 <code>include/tvm/runtime/module.h</code>  和 <code>src/runtime/module.cc</code> 。一个 <code>Module</code>  类是一个潜在目标 设备的特定 <code>ModuleNode</code>  的容器。</p>\n<p>每个后端都实现一个 <code>ModuleNode</code>  的子类，来添加目标特定的 runtime API 调用。 例如，CUDA 后端在 <code>src/runtime/cuda/cuda_module.cc</code>  实现 <code>CUDAModuleNode</code>  类，来管理 CUDA 驱动 API。上方的 <code>BuildCUDA()</code>  函数用 <code>runtime::Module</code>  包装了 <code>CUDAModuleNode</code> ，并包装到 Python 端。LLVM 后端在 <code>src/codegen/llvm/llvm_module.cc</code>  实现了 <code>LLVMModuleNode</code> ，处理了 JIT 执行和编译代码。其他对应各个后端的 <code>ModuleNode</code>  子类可以在 <code>src/runtime</code>  子文件夹找到。<br>\n返回的 <code>module</code> ，可以被认作编译函数和设备 API 的组合，可以被 TVM 的 NDArray objects 调用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dev <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>uniform<span class=\"token punctuation\">(</span>size<span class=\"token operator\">=</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dev<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>b <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>uniform<span class=\"token punctuation\">(</span>size<span class=\"token operator\">=</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dev<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>c <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>C<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dev<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fadd<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>output <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在幕后，TVM 会自动分配设备内存并管理内存传输。为了实现这个目标，每个后端都需要继承在 <code>include/tvm/runtime/device_api.h</code>  定义的 <code>DeviceAPI</code>  类，使用设备特定的 API 重写里面的内存管理方法。例如，CUDA 后端在 <code>src/runtime/cuda/cuda_device_api.cc</code>  使用 <code>cudaMalloc</code> 、 <code>cudaMemcpy</code>  实现了 <code>CUDADeviceAPI</code> .</p>\n<p>第一次使用 <code>fadd(a, b, c)</code>  调用编译后的模块时，会调用  <code>ModuleNode</code>  的  <code>GetFunction()</code>  方法来获取可用于内核调用的  <code>PackedFunc</code> 。例如，在 <code>src/runtime/cuda/cuda_module.cc</code>  CUDA 后端实现了 <code>CUDAModuleNode::GetFunction()</code>  函数如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PackedFunc CUDAModuleNode<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>GetFunction<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      const std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      const std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>shared_ptr<span class=\"token operator\">&lt;</span>ModuleNode<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> sptr_to_self<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  auto it <span class=\"token operator\">=</span> fmap_<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  const FunctionInfo<span class=\"token operator\">&amp;</span> info <span class=\"token operator\">=</span> it<span class=\"token operator\">-</span><span class=\"token operator\">></span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  CUDAWrappedFunc f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  f<span class=\"token punctuation\">.</span>Init<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">,</span> sptr_to_self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>arg_types<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>launch_param_tags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> PackFuncVoidAddr<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>arg_types<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>PackedFunc</code>  的重载函数 <code>operator()</code>  会被调用。从而会调用定义在 <code>src/runtime/cuda/cuda_module.cc</code>  的 <code>CUDAWrappedFunc</code>  的 <code>operator()</code>  函数，最终我们会看到 <code>cuLaunchKernel</code>  驱动会调用：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CUDAWrappedFunc</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                  TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                  <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> void_args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> device_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">CUDA_CALL</span><span class=\"token punctuation\">(</span><span class=\"token function\">cudaGetDevice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>device_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fcache_<span class=\"token punctuation\">[</span>device_id<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      fcache_<span class=\"token punctuation\">[</span>device_id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> m_<span class=\"token operator\">-></span><span class=\"token function\">GetFunc</span><span class=\"token punctuation\">(</span>device_id<span class=\"token punctuation\">,</span> func_name_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    CUstream strm <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CUstream<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CUDAThreadEntry</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ThreadLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    ThreadWorkLoad wl <span class=\"token operator\">=</span> launch_param_config_<span class=\"token punctuation\">.</span><span class=\"token function\">Extract</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    CUresult result <span class=\"token operator\">=</span> <span class=\"token function\">cuLaunchKernel</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        fcache_<span class=\"token punctuation\">[</span>device_id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        wl<span class=\"token punctuation\">.</span><span class=\"token function\">grid_dim</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        wl<span class=\"token punctuation\">.</span><span class=\"token function\">grid_dim</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        wl<span class=\"token punctuation\">.</span><span class=\"token function\">grid_dim</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        wl<span class=\"token punctuation\">.</span><span class=\"token function\">block_dim</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        wl<span class=\"token punctuation\">.</span><span class=\"token function\">block_dim</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        wl<span class=\"token punctuation\">.</span><span class=\"token function\">block_dim</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> strm<span class=\"token punctuation\">,</span> void_args<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>本文概括了 TVM 如何编译和执行函数。 虽然本文没有详细说明 TOPI 或 Relay，但最终所有神经网络算子都会经历与上述相同的编译过程。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "accelerate",
                "conv",
                "tvm"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/05/24/category/",
            "url": "https://forcheetah.github.io/2024/05/24/category/",
            "title": "博客汇总目录",
            "date_published": "2024-05-24T13:25:53.973Z",
            "content_html": "<h1 id=\"暮冬z羡慕-的博客-文章汇总\"><a class=\"anchor\" href=\"#暮冬z羡慕-的博客-文章汇总\">#</a> 暮冬 Z 羡慕 的博客  文章汇总</h1>\n<h1 id=\"卷积加速算法\"><a class=\"anchor\" href=\"#卷积加速算法\">#</a> 卷积加速算法</h1>\n<ul>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/05/23/conv1/\">【Im2Col】卷积加速算法【1】 NCHW</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/05/23/conv2/\">【Im2Col】卷积加速算法【2】NHWC</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/06/27/conv3/\">【im2col】昇腾卷积加速算法</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/07/07/conv4/\">【Winograd】卷积加速算法原理及实现</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/12/20/conv5/\">【gemm】Gemm 计算加速</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/12/24/conv6/\">【gemm】内存对齐</a></p>\n</li>\n<li>\n<p>[【conv 加速】NVDLA 卷积加速算法]</p>\n</li>\n</ul>\n<h1 id=\"ai推理引擎\"><a class=\"anchor\" href=\"#ai推理引擎\">#</a> AI 推理引擎</h1>\n<ul>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/06/16/engine2/\">【推理引擎】常见推理引擎</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/05/30/engine1/\">【推理引擎】NCNN 和 Tengine 量化推理逻辑对比</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2025/01/03/quanti01/\">【量化】连续卷积层首尾量化的可行性</a></p>\n</li>\n<li>\n<p>[【推理引擎】Tengine 框架结构介绍]</p>\n</li>\n</ul>\n<h1 id=\"ai编译器\"><a class=\"anchor\" href=\"#ai编译器\">#</a> AI 编译器</h1>\n<ul>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/06/10/deployTVM/\">【TVM】C++ 部署运行 TVM</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/06/18/deployTVMPython/\">【TVM】Python 脚本实现模型编译和保存</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/10/18/aicompile01/\">【AI 编译】Tiling 操作能优化什么时间</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2025/01/14/aicompile02/\">【AI 编译】如何进行 layer-group</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2025/01/15/aicompile03/\">【AI 编译】layer-group 之后如何 tiling</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/05/24/tvm1/\">【TVM】根据例子走通代码库</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/10/10/tvm01/\">【TVM】通过代码学习编译流程【1】必要知识</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/10/13/tvm02/\">【TVM】通过代码学习编译流程【2】模型转换</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/10/17/tvm03/\">【TVM】通过代码学习编译流程【3】模型编译</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/10/22/tvm3.5/\">【TVM】通过代码学习类【3.5】Pass</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/10/21/tvm04/\">【TVM】通过代码学习编译流程【4】BuildRelay</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/10/31/tvm05/\">【TVM】通过代码学习编译流程【5】FuseOps</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/10/25/tvm06/\">【TVM】通过代码学习编译流程【6】CodeGen</a></p>\n</li>\n</ul>\n<h1 id=\"问题解决\"><a class=\"anchor\" href=\"#问题解决\">#</a> 问题解决</h1>\n<ul>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/05/15/openBlas/\">openBlas 库的安装与简单使用</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/05/14/cpplib/\">C 语言工程调用 Cpp 库解决方案</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/07/05/problem3/\">SystemC 等待异步事件解决方案</a></p>\n</li>\n</ul>\n<h1 id=\"杂谈\"><a class=\"anchor\" href=\"#杂谈\">#</a> 杂谈</h1>\n<ul>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/05/26/zatan3D/\">【3D 建模】IS-7 攻城锤流纹岩皮肤展示</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/06/15/zatanE3/\">【3D 建模】T110E3 卡迪夫蓝调皮肤模型</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/08/04/zatanNoval/\">【感想】写作进度报告 1</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2025/01/21/zatanNoval2/\">【感想】写作进度报告 2</a></p>\n</li>\n</ul>\n<h1 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h1>\n<blockquote>\n<p>持续更新中 ...</p>\n</blockquote>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "accelerate",
                "conv"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/05/23/conv2/",
            "url": "https://forcheetah.github.io/2024/05/23/conv2/",
            "title": "【Im2Col】卷积加速算法【2】NHWC",
            "date_published": "2024-05-23T12:12:27.275Z",
            "content_html": "<p>本文为最基本的 Im2Col 算法的原理及实现。</p>\n<p><a href=\"https://forcheetah.github.io/2024/05/23/conv1/\">【Im2Col】卷积加速算法 NCHW</a> 【1】中已经讲了在输入和输出都是 nchw 排布下 Im2Col 算法的实现方式。常见的 tensor 输入有 NCHW 和 NHWC 两种内存排布方式，不同的排布方式各有优劣。排布方式不同，Im2Col 也有区别，本篇主要是在 NHWC 内存排布情况下的 Im2Col 算法原理和基本实现。</p>\n<blockquote>\n<p>慌乱的时候全是破绽，冷静下来，能够找到对方的破绽。<br>\n------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<h1 id=\"两种内存排布\"><a class=\"anchor\" href=\"#两种内存排布\">#</a> 两种内存排布</h1>\n<p>卷积神经网络（CNN）的输入数据布局主要有两种标准：NCHW（通道、高度、宽度）和 NHWC（高度、宽度、通道）。主要深度学习框架对这两种布局的支持情况如下：</p>\n<p>PyTorch：主要采用 NCHW 格式。这是 PyTorch 在大多数情况下的默认布局，尤其是在涉及 GPU 计算时。</p>\n<p>Caffe：采用 NCHW 格式。Caffe 框架倾向于使用这种通道优先的布局。</p>\n<p>TensorFlow：默认使用 NHWC 格式，特别是在早期版本中，这是由于 TensorFlow 最初设计时主要针对 CPU 进行优化，NHWC 布局在这种场景下有更好的内存访问局部性。<br>\nKeras：Keras 本身是一个高级 API，集成到 Tensorflow 之后跟随 tensorflow 的内存排布方式。</p>\n<h1 id=\"内存排布的优缺点\"><a class=\"anchor\" href=\"#内存排布的优缺点\">#</a> 内存排布的优缺点</h1>\n<p><strong>NCHW 格式的优点：</strong></p>\n<ul>\n<li>\n<p>1. 在 GPU 中计算卷积时，比 NHWC 要快 2.5 倍左右。这是因为在 GPU 中，NCHW 格式的数据布局更符合 GPU 的内存访问模式和计算方式。</p>\n</li>\n<li>\n<p>2.NCHW 格式更适合那些需要对每个通道单独做运算的操作，比如 “MaxPooling”。这是因为 NCHW 格式的同一通道的像素值连续排布，使得对每个通道的数据可以更高效地进行运算。</p>\n</li>\n</ul>\n<p><strong>NCHW 格式的缺点：</strong></p>\n<ul>\n<li>\n<p>1.NCHW 格式需要把所有通道的数据都读取到，才能进行运算，因此在计算时需要的存储更多。这可能会限制其在一些具有限制的硬件环境下的应用。</p>\n</li>\n<li>\n<p>2.NCHW 格式的访存与计算的控制逻辑相对简单，这使得在一些需要精细控制访存和计算的场景下，可能不是最佳的选择。</p>\n</li>\n</ul>\n<p><strong>NHWC 格式的优点：</strong></p>\n<ul>\n<li>\n<p>1.NHWC 格式的访存局部性更好。这意味着每三个输入像素就可以得到一个输出像素，因此在一些特定的计算操作中，可以更高效地利用硬件资源。</p>\n</li>\n<li>\n<p>2.NHWC 格式更适合那些需要对不同通道的同一像素做某种运算的操作，比如 “Conv1x1”。这是因为 NHWC 格式的不同通道中的同一位置元素顺序存储，使得对不同通道的数据可以进行更高效的运算。</p>\n</li>\n<li>\n<p>3.NHWC 格式在早期的 CPU 开发中应用较多，因此对于主要基于 CPU 开发的深度学习框架和算法，NHWC 格式可能更受欢迎。</p>\n</li>\n</ul>\n<p><strong>NHWC 格式的缺点：</strong></p>\n<ul>\n<li>\n<p>1. 在使用 GPU 进行计算加速时，NHWC 格式不如 NCHW 格式高效。这是因为 NCHW 格式更符合 GPU 的内存访问模式和计算方式。</p>\n</li>\n<li>\n<p>2. 对于一些需要精细控制访存和计算的场景，NHWC 格式的控制逻辑可能相对复杂一些。</p>\n</li>\n</ul>\n<h1 id=\"im2col变换\"><a class=\"anchor\" href=\"#im2col变换\">#</a> Im2Col 变换</h1>\n<p>Im2col 算法是将卷积转换成两个 2D 矩阵乘运算。(kernel_2D * input_2D)  与 (input_2D * kernel_2D) 矩阵乘的顺序不同，所需要的 4D 到 2D 变换也不同，我们先将 input_2D 放在前面，也就是 (input_2D * kernel_2D)，最后再讨论 kernel_2D 放在前面还是后面的区别。</p>\n<p>依然采用下面这个简单的卷积样例，输入 tensor 按照 nhwc 排布，所以是一个 3 通道 5*5 的 input tensor。卷积核有 9 个，pad 为 1，因此输出是【1，5，5，9】。</p>\n<p><img loading=\"lazy\" data-src=\"1716464754440.jpg\" alt=\"卷积样例\"></p>\n<p>直接展开 2D 形式，两个矩阵形式如下。</p>\n<p><img loading=\"lazy\" data-src=\"1716464821580.jpg\" alt=\"Im2Col 2D示意图\"></p>\n<p><strong>上图右边是权重 kernel_2D</strong></p>\n<ul>\n<li>\n<p>1. 原 kernel_4D 维度为【9，3，3，3】，拥有 9 个 kernel，将其第一个 kernel 按照【C_in, Kh, Kw】的顺序展成一列，也就是第一列绿色部分，共有 27 个数。</p>\n</li>\n<li>\n<p>2. 依次将余下 8 个 kernel 按照相同的方式展成一列，就得到了 kernel_2D。</p>\n</li>\n<li>\n<p>3.kernel_2D 维度为【27，9】</p>\n</li>\n</ul>\n<p>从内存排布上来看，需要将原本的 kernel_4D 进行数据重排。</p>\n<p><strong>上图左边是输入 input_2D</strong></p>\n<ul>\n<li>\n<p>1. 矩阵乘是 行 * 列；kernel_2D 一列代表一个卷积核【C_in, Kh, Kw】；所以 input_2D 的一行是 “一个卷积核滑动窗口” 对应的数据，也就是 27 个。</p>\n</li>\n<li>\n<p>2. 第一行橘黄色部分是第一个滑动窗口对应的数据，未填的数代表 Pad。</p>\n</li>\n<li>\n<p>3. 滑动窗口需要纵移 5 次，每次纵移需要横移 5 次，因此有 5*5 行数据。</p>\n</li>\n<li>\n<p>4. 例如第 5 行蓝色是滑动窗口在图一中向右移动到第 5 格，蓝色格子时对应的数据。由于 Input_2D 的维度是 NHWC，也就是说图一中 “0，25，50” 三个数在内存中是相邻的（分别位于同一个 HW 位置的第一、第二、第三通道）。为了减少数据的搬运，这些连续的数被搬运到一起。即：图一中 3*3 的蓝色滑动窗口中前 3 个都对应 Pad，所以图二第 5 行蓝色行先有 3*3 (channel) 个 Pad 数据。图一蓝色滑动窗口在第 4 和第 5 个格子出现数据，所以图二 9 个 Pad 后面跟着 3，28，53；4，29，54。紧接着又出现了 Pad，以此类推。</p>\n</li>\n<li>\n<p>5. 总结：25 次窗口滑动，每次滑动形成窗口对应的一行 27 个数据。input_2D 的维度为【25，27】</p>\n</li>\n<li>\n<p>6. 总结完 input_2D 的数据排布，那么 kernel_2D 每一列的数据具体怎么排也就清楚了，需要和 input_2D 的每一行一一对应。</p>\n</li>\n</ul>\n<p><strong>输出 output</strong></p>\n<p>input_2D【25，27】* kernel_2D 【27，9】得到结果 output_2D 【25，9】，刚好是输出 output【1，5，5，9】的内存排布方式。因此输出也不需要额外的内存转换。</p>\n<h1 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h1>\n<p>这里没有专门写 Im2Col 在 NHWC 排布情况下的实现代码。<br>\n可以在 github 上 <a href=\"https://github.com/ForCheetah/ConvAccelerate\">卷积加速算法模拟</a> 下载完整的测试代码。并参考 “TestIm2FlavorConvLayer ();” 函数实现方式。可以阅读文章：<a href=\"https://forcheetah.github.io/2024/05/15/accelerate1/\">im2col 卷积加速算法 NCHW</a>，参考 NCHW 排布下的代码实现，自行完成 NHWC 内存排布情况下的算法。</p>\n<h1 id=\"矩阵乘先后顺序的影响\"><a class=\"anchor\" href=\"#矩阵乘先后顺序的影响\">#</a> 矩阵乘先后顺序的影响</h1>\n<p>以严格按照矩阵标准的 行 * 列 运算为前提，权重和输入的先后顺序会影响其内存排布。</p>\n<p><img loading=\"lazy\" data-src=\"1716466223424.jpg\" alt=\"两种排布情况下矩阵乘先后顺序不同对数据变换的影响\"></p>\n<p>已经讲解了简单的 im2col 算法在 NCHW 排布<a href=\"https://forcheetah.github.io/2024/05/15/accelerate1/\">上一篇文章</a>和 NHWC 排布情况下的 2D 内存排布情况。上图总结了两种排布情况下 矩阵乘先后顺序不同对数据变换的影响。</p>\n<ul>\n<li>NCHW 排布  kernel 在前  只需要对 input 做 im2col 变换</li>\n<li>NCHW 排布  input 在前  多出来对权重的转置变换 和输出的转置变换</li>\n<li>NHWC 排布  kernel 在前  需要对权重数据进行重排 以及输出进行转置</li>\n<li>NHWC 排布  input 在前  需要对权重进行转置</li>\n</ul>\n<p>当然，在真正运算矩阵乘时，如果有行优先货列优先的调整，就需要具体问题具体分析了。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "accelerate",
                "conv"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/05/23/conv1/",
            "url": "https://forcheetah.github.io/2024/05/23/conv1/",
            "title": "【Im2Col】卷积加速算法【1】 NCHW",
            "date_published": "2024-05-23T11:31:49.363Z",
            "content_html": "<p>本文为最基本的 Im2Col 算法的原理及实现。<br>\n加速算法道阻且长，想要选择最优的算法，需要通盘考虑现实需求、软件算法、硬件支持，这就是 “坚持理论联系实际”。 所以这里只是对 Im2Col 算法最基本的原理探讨。<br>\n探索本就是由正确和错误交织而成，还望各位不吝赐教！</p>\n<blockquote>\n<p>现在想起来，光是遇到你这个家伙，就感觉自己赚到了。<br>\n------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<h1 id=\"卷积算法\"><a class=\"anchor\" href=\"#卷积算法\">#</a> 卷积算法</h1>\n<p>将 Im2col 算法之前，不得不再提一下卷积。卷积是一种运算，在神经网络中是提取特征的过程，具体的操作过程是在输入特征中不断滑动卷积核大小的窗口，与卷积核做乘加运算，得到输出结果。</p>\n<p>先定义一下维度的符号： 卷积核 ：【C_out, C_in, Hk, Wk】   输入 ： 【B, C_in, H, W】  输出：【B, C_out, Ho, Wo】</p>\n<p><img loading=\"lazy\" data-src=\"1715770544973.jpg\" alt=\"卷积运算流程\"></p>\n<p>上图是维度非常小的一个卷积运算的图示，左边卷积核维度为【9，3，3，3】，即个数为 9，通道数为 3（个数和通道数均未在图中展示出来）的 3*3 卷积核。中间为 Input 的维度，周围方格蓝色代表 tensor 的 pad，中间黄色代表维度为【1，3，5，5】的 Input，即通道为 3，长宽 5*5。</p>\n<p>进行卷积过程中，卷积核（3*3，通道为 3）先横向滑动（5 次），再纵向滑动（5 次）；每到一个位置计算 kernel 与 Input 对应位置的乘积和，因此得到 output 5*5 的结果。9 个卷积核依次进行，得到输出大小【1，9，5，5】</p>\n<p>想要理解卷积乃至实现卷积加速算法，不仅要知道计算过程，还要格外关注数据在内存中的排布顺序。在内存中所有的数据都是一维存储的，例如 Input【1，3，5，5】，在内存中只有一个连续的、大小为 75 的数组，【1，3，5，5】只是它的逻辑维度；最后一个维度的 5 个数字是连续的（0~4），紧接着是下一行（5~9）......</p>\n<p>图中仅画出了平面的大小，通道方向就要靠大家的想象了，上图中每个格子后面还有 2 个格子（通道数为 3）。<br>\n简单的卷积更容易看清 Im2col 算法的流程，本文以及后续系列文章都将以这个例子进行。</p>\n<h1 id=\"im2col算法\"><a class=\"anchor\" href=\"#im2col算法\">#</a> Im2Col 算法</h1>\n<p>为什么要对卷积算法进行加速呢？</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> batch <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> batch<span class=\"token operator\">&lt;</span>in_n<span class=\"token punctuation\">;</span> batch<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;</span> out_c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> out_row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> out_row <span class=\"token operator\">&lt;</span> out_h<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>out_row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> out_col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> out_col <span class=\"token operator\">&lt;</span> out_w<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>out_col<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> imap <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> imap <span class=\"token operator\">&lt;</span> in_c<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>imap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> kr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> kr <span class=\"token operator\">&lt;</span> ker_size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>kr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> kc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> kc <span class=\"token operator\">&lt;</span> ker_size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>kc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                                dosomething<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上方是个典型的卷积算法，要实现一个卷积，不仅要遍历 batch、C_out、Ho、Wo，还要遍历整个卷积核的维度，整个循环达到了 7 层之多。当输入数据维度变大时，整个卷积占用的资源让人难以接受。提高神经网络的推理速度是推理引擎和 AI 芯片设计者不断的追求，而卷积又占了神经网络推理的大部分时间，因此卷积的加速是重中之重。<br>\nIm2Col 算法的原理就是将卷积运算<br>\n转化为矩阵运算，这一转换带来以下好处：</p>\n<ul>\n<li>\n<p>易于优化：由于 GEMM 操作在计算库中被广泛研究和优化，开发者可以利用这些库的最新进展提高效率。</p>\n</li>\n<li>\n<p>并行化和硬件支持：矩阵乘法天然适合并行处理；大多硬件平台都会充分利用其硬件资源，对矩阵乘法进行深度优化。通过使用如 CUDA、cuDNN、OpenBLAS 等库，可以实现并行计算，极大地加速卷积运算。</p>\n</li>\n<li>\n<p>内存管理灵活性：虽然 im2col 需要额外的内存来存储展开后的矩阵，但通过调整实现策略（如分块处理），可以在内存使用和计算效率之间找到平衡。</p>\n</li>\n</ul>\n<p>总之，尽管 Im2col 算法没有减少任何计算量，甚至还给内存管理带来挑战，但是矩阵的高效运算、硬件、并行等仍然能够在很多场景下提高卷积计算效率。</p>\n<h1 id=\"im2col变换\"><a class=\"anchor\" href=\"#im2col变换\">#</a> Im2Col 变换</h1>\n<p>Im2col 算法是将卷积转换成两个 2D 矩阵乘运算。(kernel_2D * input_2D)  与 (input_2D * kernel_2D) 矩阵乘的顺序不同，所需要的 4D 到 2D 变换也不同，我们先将 kernel_2D 放在前面，也就是 (kernel_2D * input_2D)，最后再讨论 kernel_2D 放在前面还是后面的区别。</p>\n<p>再看一遍下面这个简单的卷积样例，输入 tensor 按照 nchw 排布。</p>\n<p><img loading=\"lazy\" data-src=\"1715770588007.jpg\" alt=\"卷积样例\"></p>\n<p>直接展开 2D 形式，两个矩阵形式如下。</p>\n<p><img loading=\"lazy\" data-src=\"1715770625347.jpg\" alt=\"Im2Col 2D示意图\"></p>\n<p><strong>图 “Im2Col 2D 示意图” 左边是 kernel_2D</strong></p>\n<ul>\n<li>\n<p>1. 原 kernel_4D 维度为【9，3，3，3】，拥有 9 个 kernel，将其第一个 kernel 按照【C_in, Kh, Kw】的顺序完全展平，也就是第一行绿色部分，共有 28 个数。</p>\n</li>\n<li>\n<p>2. 依次将余下 8 个 kernel 按照相同的方式展平，就得到了 kernel_2D。</p>\n</li>\n<li>\n<p>3.kernel_2D 维度为【9，27】</p>\n</li>\n</ul>\n<p>惊喜地发现，kernel_2D 的内存排布和 kernel_4D 完全一致，不需要任何内存搬运！</p>\n<p><strong>图 “Im2Col 2D 示意图” 右边是 Input_2D</strong></p>\n<ul>\n<li>\n<p>1. 矩阵乘是 行 * 列；kernel_2D 中，一行代表一个卷积核【C_in, Kh, Kw】；所以 input_2D 的一列是 “一个卷积核滑动窗口” 对应的数据。</p>\n</li>\n<li>\n<p>2. 右图中，前半部分空数据代表 pad,  后面的大面积空白只是懒得填上数字。</p>\n</li>\n<li>\n<p>3. 例如，右图中蓝色的一列数据，代表图 2 中，卷积核滑动到蓝色窗口时对应的 input 数据。即第一个 channel：(pad,pad,pad;3,4,pad;8,9,pad)； 第二个 channel：(pad,pad,pad;28,29,pad;33,34,pad)；第三个 channel：(pad,pad,pad;53,54,pad;58,59,pad)</p>\n</li>\n<li>\n<p>4. 那么 input_2D 一行数据代表什么呢？代表 kernel 在 input 中窗口的横向移动和纵向移动。在本例子中，窗口需要纵向滑动 5 次，每次纵向滑动都要横向滑动 5 次，一共产生 25 次窗口滑动。</p>\n</li>\n<li>\n<p>5. 总结：25 次窗口滑动，每次滑动形成窗口对应的一列 27 个数据。input_2D 的维度为【27，25】</p>\n</li>\n</ul>\n<p><strong>输出 output</strong></p>\n<p>kernel_2D 【9，27】* input_2D【27，25】得到结果 output_2D 【9，25】，刚好是输出 output【1，9，5，5】的内存排布方式。因此输出也不需要额外的内存转换。</p>\n<h1 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h1>\n<p>这里是将 input 由 nchw 转为 2D 排布的代码。如果感兴趣，可以在  <a href=\"https://github.com/ForCheetah/ConvAccelerate\">卷积加速算法模拟</a> 下载完整的测试代码。并通过 “TestIm2FlavorConvLayer ();” 函数进行测试。同时函数 “TestIm2ColConvIMW” 是 NCHW 排布下 Input_2D 在前，kernel_2D 在后的 Im2Col 算法实现。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Im2Col</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>data_im<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> channels<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> kernel_h<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> kernel_w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> pad_h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> pad_w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> stride_h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> stride_w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>data_col<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> output_h <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> pad_h <span class=\"token operator\">-</span> kernel_h <span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> stride_h <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> output_w <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> pad_w <span class=\"token operator\">-</span> kernel_w<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> stride_w <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> channel_size <span class=\"token operator\">=</span> height <span class=\"token operator\">*</span> width<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> channel <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> channel <span class=\"token operator\">&lt;</span> channels<span class=\"token punctuation\">;</span> channel<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> data_im <span class=\"token operator\">+=</span> channel_size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> kernel_row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> kernel_row <span class=\"token operator\">&lt;</span> kernel_h<span class=\"token punctuation\">;</span> kernel_row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> kernel_col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> kernel_col <span class=\"token operator\">&lt;</span> kernel_w<span class=\"token punctuation\">;</span> kernel_col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">int</span> input_row <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>pad_h <span class=\"token operator\">+</span> kernel_row<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> output_rows <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> output_rows<span class=\"token operator\">&lt;</span>output_h<span class=\"token punctuation\">;</span> output_rows<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_a_ge_zero_and_a_lt_b</span><span class=\"token punctuation\">(</span>input_row<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> output_cols <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> output_cols<span class=\"token operator\">&lt;</span>output_w<span class=\"token punctuation\">;</span> output_cols<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                            <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>data_col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token keyword\">int</span> input_col <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>pad_w <span class=\"token operator\">+</span> kernel_col<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> output_col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> output_col<span class=\"token operator\">&lt;</span>output_w<span class=\"token punctuation\">;</span> output_col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_a_ge_zero_and_a_lt_b</span><span class=\"token punctuation\">(</span>input_col<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                                <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>data_col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> data_im<span class=\"token punctuation\">[</span>input_row <span class=\"token operator\">*</span> width <span class=\"token operator\">+</span> input_col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                                <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>data_col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                            input_col <span class=\"token operator\">+=</span> stride_w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    input_row <span class=\"token operator\">+=</span> stride_h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"矩阵乘先后顺序的影响\"><a class=\"anchor\" href=\"#矩阵乘先后顺序的影响\">#</a> 矩阵乘先后顺序的影响</h1>\n<p>以严格按照矩阵标准的 行 * 列 运算为前提，权重和输入的先后顺序会影响其内存排布。</p>\n<p><img loading=\"lazy\" data-src=\"1715770640439.jpg\" alt=\"Kernel_2D * Input_2D\"><br>\n 在输入为 nchw 排布，输出也是 nchw 排布情况下，kernel_2D 在前，Input_2D 在后，只需要对 Input 进行 Im2Col 变换。</p>\n<p><img loading=\"lazy\" data-src=\"1715770657999.jpg\" alt=\"Input_2D * Kernel_2D\"><br>\n 在输入为 nchw 排布，输出也是 nchw 排布情况下，Input_2D 在前，kernel_2D 在后，多出了对 kernel 和 output 的转置操作。</p>\n<p>当然，在真正运算矩阵乘时，如果有行优先货列优先的调整，就需要具体问题具体分析了。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "accelerate",
                "conv"
            ]
        }
    ]
}