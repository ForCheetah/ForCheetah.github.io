{
    "version": "https://jsonfeed.org/version/1",
    "title": "Пусть этот камень будет более крепким, чем человек • All posts by \"openblas\" tag",
    "description": "有自己的博客很帅，但是我很懒，要命！！！",
    "home_page_url": "https://forcheetah.github.io",
    "items": [
        {
            "id": "https://forcheetah.github.io/2024/06/27/conv3/",
            "url": "https://forcheetah.github.io/2024/06/27/conv3/",
            "title": "【im2col】昇腾卷积加速算法",
            "date_published": "2024-06-27T15:21:34.031Z",
            "content_html": "<h1 id=\"前置信息\"><a class=\"anchor\" href=\"#前置信息\">#</a> 前置信息</h1>\n<p><strong>（1）本文讲解使用的例子</strong></p>\n<p>以如下的卷积为例，进行昇腾 Im2Col 卷积过程：</p>\n<ul>\n<li>Input 输入维度为 NHWC ：【2，25，25，17】</li>\n<li>外圈蓝色代表 pad</li>\n<li>Kernal 维度为  CCHkWk  ：【34，17，3，3】</li>\n<li>操作为 3*3 卷积 pad=1, Group=1, Stride=1， 2D 卷积</li>\n<li>得到输出的维度 为 NHWC : 【22，25，25，18】</li>\n</ul>\n<p>从图上可以轻易看出相关信息。</p>\n<p><img loading=\"lazy\" data-src=\"1719500181052.jpg\" alt=\"例子\"></p>\n<blockquote>\n<p>现在想起来，光是遇到你这个家伙，就感觉自己赚到了。<br>\n------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<p><strong>（2）矩阵乘运算单元</strong></p>\n<p>昇腾达芬奇架构设计了 16*16 的矩阵乘运算单元，能够提供强大的并行乘加计算能力，可以以一条指令实现两个 16*16 的矩阵相乘的运算。所以昇腾 Im2Col 卷积的目的就是让卷积能够高效地利用 “矩阵乘运算单元” 进行计算。</p>\n<p><img loading=\"lazy\" data-src=\"1719500301302.jpg\" alt=\"davincii\"></p>\n<p>感兴趣的可以阅读昇腾架构介绍书籍。</p>\n<blockquote>\n<p>矩阵计算单元可以⽤⼀条指令完成两个 16×16 矩阵的相乘运算（标记为 16<sup>3，也是 Cube 这⼀名称的来历），等同于在极短时间内进⾏了 16</sup>3＝4096 个乘加运算，并且可以实现 FP16 的运算精度。如图 3-7 所⽰，矩阵计算单元在完成 C＝A×B 的矩阵运算时，会事先将矩阵 A 按⾏存放在输⼊缓冲区中，同时将矩阵 B 按列存放在输⼊缓冲区中，通过矩阵计算单元计算后得到的结果矩阵 C 按⾏存放在输出缓冲区中。在矩阵相乘运算中，矩阵 C 的第⼀元素由矩阵 A 的第⼀⾏的 16 个元素和矩阵 B 的第⼀列的 16 个元素由矩阵计算单元⼦电路进⾏ 16 次乘法和 15 次加法运算得出。矩阵计算单元中共有 256 个矩阵计算⼦电路，可以由⼀条指令并⾏完成矩阵 C 的 256 个元素计算。                                          摘自《昇腾 AI 处理器架构与编程》</p>\n</blockquote>\n<h1 id=\"权重排布\"><a class=\"anchor\" href=\"#权重排布\">#</a> 权重排布</h1>\n<p>昇腾 Im2Col 五维卷积加速算法   基本流程：</p>\n<p>输入为 nhwc 输出为 nhwc</p>\n<p>权重维度变化： 权重的维度变化离线进行，不消耗神经网络推理时间。（神经网络推理大致分为 模型转换 量化 推理三个步骤，权重的维度转换可以在模型转换时进行，不占用推理的时间）。下面是权重变换的分步流程，代码实现可以一步完成，也可以分多步完成（因为不影响推理时间。）</p>\n<p><img loading=\"lazy\" data-src=\"1719500423112.jpg\" alt=\"weight change\"></p>\n<p>上方的变换如果比较抽象的话，可以结合后面的流程来理解。</p>\n<h2 id=\"权重-从kernel-4d变换到kernel-2d\"><a class=\"anchor\" href=\"#权重-从kernel-4d变换到kernel-2d\">#</a> 权重 从 kernel 4D 变换到 kernel 2D</h2>\n<p><img loading=\"lazy\" data-src=\"1719500512598.jpg\" alt=\"weight change\"></p>\n<p><img loading=\"lazy\" data-src=\"1719500556415.jpg\" alt=\"weight change2\"></p>\n<p>上图是 Kernel 2D 的数据排布方式，维度为【2*3*3*16，34】，为了简便，跳过昇腾 5D 结构，直接从 4D 转到 2D。下面介绍 4D 数据和 2D 数据的一一对应关系。</p>\n<ul>\n<li>D 图 ① 覆盖区域表示 一个卷积核【17，3，3】展开成 2D 中的一列。对应于 A 图中一整个卷积核。34 个卷积核将展开为 34 列。因此每列代表一个卷积核。</li>\n<li>B 图，卷积核通道数为 17，需要补零为 16 的倍数 32，并拆分成 2 块（分别是紫色、黄色）。E 图：每一列（每一个卷积核）的紫色部分②是卷积核通道方向拆分的第一块（B 图中的紫色），黄色部分③是拆分的第二块（B 图中的黄色）。</li>\n<li>拆分的每一块（比如紫色部分）又分成 3*3（kernel 行 * 列），F 图: ④覆盖的是 kernel 第一行 (对应于 C 图中的④的部分)，⑤覆盖的是 kernel 第二行（对应于 C 图中⑤的部分），相似的⑥覆盖的是 kernel 第三行（对应于 C 图中⑥的部分）。3*3 卷积核一共就三行</li>\n<li>每一个紫色的小方格代表通道方向的 16 个数。</li>\n<li>至此，kernel 4D 和 kernel 2D 所有的数据都一一对应了。例如 F 图中：⑦代表第 6 个卷积核、通道拆分的第二块、第一行、第二列、通道方向的 16 个数。</li>\n</ul>\n<p>通过上述对应关系，我们不难得到维度为【2*3*3*16，34】的卷积核 2D 形式。由于昇腾卷积算法的 AI 计算核心是 16*16 的矩阵乘运算单元，同时为了取数方便，还需要将卷积核 2D 转换为大 Z 小 N 排布方式。</p>\n<h2 id=\"权重-从kernel2d变换到大z小n\"><a class=\"anchor\" href=\"#权重-从kernel2d变换到大z小n\">#</a> 权重 从 kernel2D 变换到大 Z 小 N</h2>\n<p><img loading=\"lazy\" data-src=\"1719500684744.jpg\" alt=\"2d\"></p>\n<p>第一步，将 2D【2*3*3*16，34】中 34 补零为 16 的倍数，即 48，得到【2*3*3*16，48】。</p>\n<p>第二步，将其按照 16*16 的方格进行划分，得到【2*3*3，3】个【16，16】的小块。（图中画成了 4 个小块，实际应该是 3 个，示意图，见谅）</p>\n<p>第三步，将这些小块按照大 Z 小 N 的顺序进行排布。大 Z 指的是外部按照行优先，将按照 Cube1 到 Cube8 这种 “Z” 字形排布；小 N 指的是内部按照列优先，即每个 16*16 的 Cube，先排第一列，然后是第二列...  详见最右边的彩色表示。</p>\n<p>多说一句，之所以专门按照 “小 N” 排布，是因为在矩阵运算中，权重作为矩阵乘的第二个参数，数据是按列取的。这就意味着在实际内存中要跳着取数（内存中都是按照行优先排序），自然效率低。提前将其按照列优先的方式进行排布，那么在矩阵乘运算中可以连续取数。至此，我们得到了 【2*3*3，3，16*16】的权重大 Z 小 N 排布形式，这种形式使得能够一次性取出 256 个数参与计算，效率很高。</p>\n<p>下面的代码一次性完成了 权重 4D nhwc  到权重大 Z 小 N 排布，仅供参考。还是那句话，权重的变换离线进行，不占用宝贵的推理时间，所以无须关心转换的效率。完整代码可以下载 <a href=\"https://github.com/ForCheetah/ConvAccelerate\">加速算法模拟</a>，并运行其中的  <code>TestAscendConvLayer();</code>  函数。可以看到三个测试函数，它们的区别在于不同的输入排布方式。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//9.  测试 昇腾 卷积算法加速     NCHW 输入， NHWC 输出</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// TestAscendConvLayer();</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//10.  测试 昇腾 卷积算法加速      NCHW 输入， NCHW 输出</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// TestAscendConvLayerNCHW();</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//11. 测试 昇腾卷积算法加速 NHWC      NHWC 输入， NHWC 输出</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// TestAscendConvLayerNHWC();</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">WeightTrans_A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> filters<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> TensorDim weight_dim<span class=\"token punctuation\">,</span> Ascend5Dim we_5D_dim<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> we_tran5D<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            AscendTransform5Dim we_tran5D_dim<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> CUBE_row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> CUBE_col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> lastdim4 <span class=\"token operator\">=</span> we_tran5D_dim<span class=\"token punctuation\">.</span>move <span class=\"token operator\">*</span> we_tran5D_dim<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">*</span> we_tran5D_dim<span class=\"token punctuation\">.</span>LW <span class=\"token operator\">*</span> we_tran5D_dim<span class=\"token punctuation\">.</span>cube<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> lastdim3 <span class=\"token operator\">=</span> we_tran5D_dim<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">*</span> we_tran5D_dim<span class=\"token punctuation\">.</span>LW <span class=\"token operator\">*</span> we_tran5D_dim<span class=\"token punctuation\">.</span>cube<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> lastdim2 <span class=\"token operator\">=</span> we_tran5D_dim<span class=\"token punctuation\">.</span>LW <span class=\"token operator\">*</span> we_tran5D_dim<span class=\"token punctuation\">.</span>cube<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> single_filter_num <span class=\"token operator\">=</span> weight_dim<span class=\"token punctuation\">.</span>c <span class=\"token operator\">*</span> weight_dim<span class=\"token punctuation\">.</span>h <span class=\"token operator\">*</span> weight_dim<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> single_filter_channel <span class=\"token operator\">=</span> weight_dim<span class=\"token punctuation\">.</span>h <span class=\"token operator\">*</span> weight_dim<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch_cube<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> ch_cube<span class=\"token operator\">&lt;</span>we_tran5D_dim<span class=\"token punctuation\">.</span>batch<span class=\"token punctuation\">;</span> ch_cube<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 通道方向块   ch_cube</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> index_1 <span class=\"token operator\">=</span> ch_cube <span class=\"token operator\">*</span> lastdim4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hk<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> hk<span class=\"token operator\">&lt;</span>we_tran5D_dim<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">;</span> hk<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//filter 长  </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">int</span> index_2 <span class=\"token operator\">=</span> index_1 <span class=\"token operator\">+</span> hk <span class=\"token operator\">*</span> lastdim3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> wk<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> wk<span class=\"token operator\">&lt;</span>we_tran5D_dim<span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">;</span> wk<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//filter 宽</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">int</span> index_3 <span class=\"token operator\">=</span> index_2 <span class=\"token operator\">+</span> wk <span class=\"token operator\">*</span> lastdim2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cout_cube<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> cout_cube<span class=\"token operator\">&lt;</span>we_tran5D_dim<span class=\"token punctuation\">.</span>LW<span class=\"token punctuation\">;</span> cout_cube<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//cout 方向块 </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token keyword\">int</span> index_4 <span class=\"token operator\">=</span> index_3 <span class=\"token operator\">+</span> cout_cube<span class=\"token operator\">*</span>we_tran5D_dim<span class=\"token punctuation\">.</span>cube<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cube_row<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> cube_row<span class=\"token operator\">&lt;</span>CUBE_row<span class=\"token punctuation\">;</span> cube_row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cube_col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> cube_col<span class=\"token operator\">&lt;</span>CUBE_col<span class=\"token punctuation\">;</span> cube_col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> index_4 <span class=\"token operator\">+</span> cube_row<span class=\"token operator\">*</span>CUBE_col <span class=\"token operator\">+</span> cube_col<span class=\"token punctuation\">;</span>                       </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cout_cube<span class=\"token operator\">*</span>CUBE_col<span class=\"token operator\">+</span>cube_row<span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span>weight_dim<span class=\"token punctuation\">.</span>n  <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>ch_cube<span class=\"token operator\">*</span>CUBE_col<span class=\"token operator\">+</span>cube_col<span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span>weight_dim<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                                we_tran5D<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                                <span class=\"token comment\">// 第几个 filter  第几个通道  第几行  第几列  还要注意 大 Z 小 N 排布方式     大 Z 小 N 排布方式（行变列，列变行）</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                                <span class=\"token keyword\">int</span> index_from <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>cout_cube<span class=\"token operator\">*</span>CUBE_col<span class=\"token operator\">+</span>cube_row<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>single_filter_num <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ch_cube<span class=\"token operator\">*</span>CUBE_col<span class=\"token operator\">+</span>cube_col<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>single_filter_channel <span class=\"token operator\">+</span> hk<span class=\"token operator\">*</span>weight_dim<span class=\"token punctuation\">.</span>w<span class=\"token operator\">+</span> wk<span class=\"token punctuation\">;</span>                                </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                                we_tran5D<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> filters<span class=\"token punctuation\">[</span>index_from<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"输入排布\"><a class=\"anchor\" href=\"#输入排布\">#</a> 输入排布</h1>\n<p>输入 tensor 的内存排布为 nhwc 输出为 nhwc</p>\n<p>昇腾算法的维度详细变换如图下图所示。这里展示了输入 input 从 4D 维度转换到 昇腾 5D 结构，然后再转换到 2D 结构，最后转换到大 Z 小 Z 维度。写这么详细只是为了方便读者理解，而在实际操作中，由于 Input 的变换是在线进行，消耗宝贵的推理时间，所以如华为昇腾书中所说：input 先是从 4D 维度 通过软件算法转换为 昇腾 5D 维度（在模型推理过程中这一步可能不需要，因为中间层的 tensor 已经处于昇腾 5D 维度了），之后从昇腾 5D 维度通过 硬件直接转换到大 Z 小 Z 排布（模型推理过程肯定是边转换变计算，所以不会将整个 tensor 转换为大 Z 小 Z 之后，才进行矩阵运算阶段的。本博客为方便，将整个 tensor 完全转换到大 Z 小 Z，再进行后面计算。）</p>\n<p>说完这些，就可以介绍一下昇腾算法极致高效的输入的排布转换过程了！</p>\n<p><img loading=\"lazy\" data-src=\"1719500920323.jpg\" alt=\"input\"></p>\n<h2 id=\"输入-从input-4d-到input-5d\"><a class=\"anchor\" href=\"#输入-从input-4d-到input-5d\">#</a> 输入 从 Input 4D 到 Input 5D</h2>\n<p>还是再强调一下，昇腾可以做到整个模型的中间层的 tensor 均保持昇腾 5D 的维度，所以思考一下，可能只有最初输入到模型的 tensor 需要 从 Input 4D 转 到 Input 5D，或者再数据预处理的时候就将数据处理为 5D 排布。</p>\n<p><img loading=\"lazy\" data-src=\"1719500976081.jpg\" alt=\"trans6\"></p>\n<ul>\n<li>G 图是最原始的 Input4D 结构，当然，batch 维度 N=2 没有画，只画了一个。它的维度是【25，25，17】</li>\n<li>H 图为昇腾 5D 结构图，首先要将通道方向的 17 补齐为 16 的倍数 32，同时每 16 个进行一次拆分，拆成两组。</li>\n<li>最后注意一下数据的排布顺序就好了：注意 5D 结构中，K_cube 位于最内层，这些数据是连续的，所以先把 高 h=1, 宽 w=1 位置的 16 个数据排在一起。</li>\n<li>紧接着将宽度方向 25 个 K_cube 排在一起，变成 25*16</li>\n<li>然后再遍历高的方向。变成 25*25*16</li>\n<li>最后是遍历两组，得到昇腾的 5D 结构【2，25，25，16】</li>\n</ul>\n<p>此处数据搬运较为简单，可以参考代码<a href=\"https://github.com/ForCheetah/ConvAccelerate\">加速算法模拟</a></p>\n<h2 id=\"输入-从input-5d-直接搬到-大z小z\"><a class=\"anchor\" href=\"#输入-从input-5d-直接搬到-大z小z\">#</a> 输入 从 Input 5D 直接搬到 大 Z 小 Z</h2>\n<p>昇腾通过专门设计的硬件，将 input 从 5D 格式直接搬到 大 Z 小 Z 排布。想要知道怎么搬以及为什么这么搬，还真不得不把其 2D 排布讲明白。  《昇腾 AI 处理器架构与编程》这本书中直接跳过了 2D 排布，导致晦涩难懂。</p>\n<h3 id=\"input-5d-到-input-2d\"><a class=\"anchor\" href=\"#input-5d-到-input-2d\">#</a> Input 5D 到 Input 2D</h3>\n<p>所以我们直接看 Input2D 与 Weight 2D 的对应情况，如下图所示。</p>\n<p><img loading=\"lazy\" data-src=\"1719501086578.jpg\" alt=\"trans5\"></p>\n<ul>\n<li>J 图为 input2D 【25*25，2*3*3*16】   K 图为 Weight2D 【2*3*3*16，34】。再回忆一下 Weight2D 数据每一行和每一列的数据的意义，它的一列数据 2*3*3*16 代表什么呢？  2*3*3*16 代表一整个卷积核，2 代表该卷积核通道方向拆成两块，那么 3*3*16 就是每一块的 高 * 宽 * K_cube。</li>\n<li>好巧！Input2D 的一行也是 2*3*3*16！（废话，不一样就没法算了）。既然 weight2D 一列数据的意义一清二楚，那么对应的 Input2D 数据一行的意义也就呼之欲出啦！ Input2D 的一行 就是卷积核在某个滑动窗口位置对应的 input 数据。例如，Input2D 的第一行，就对应于 I 图 3*3 的彩色窗口数据（没有 Pad 的情况下）。</li>\n<li>也就可以推知，Input2D 的每一行绿色部分，就是 I 图通道方向拆分的第一块（拆分的绿色部分）；每一行的的蓝色部分，就是 I 图通道防线拆分的第二块（中间深蓝宽度 1，和补齐的浅蓝 15）</li>\n<li>那么，为什么 Input2D 有足足 625 行呢？因为滑动窗口纵向滑动 25 次，每次纵向滑动，都包含横向的 25 次，总共 625 次。</li>\n</ul>\n<p>假如直接计算 Input2D 矩阵乘 Weight2D，卷积计算就得到最终结果啦！这就是普通的 Im2Col 算法，不清楚的小伙伴们还可以去读一下 <a href=\"https://forcheetah.github.io/2024/05/23/conv1/\">Im2Col 算法 NCHW</a> 和 <a href=\"https://forcheetah.github.io/2024/05/23/conv2/\">Im2Col 算法 NHWC</a>。</p>\n<p>从 2D 的角度来看，算法是不是很简单啊。</p>\n<p>不要高兴的太早，还没完呢。</p>\n<h3 id=\"input-2d-到-大z小z\"><a class=\"anchor\" href=\"#input-2d-到-大z小z\">#</a> Input 2D 到 大 Z 小 Z</h3>\n<p><img loading=\"lazy\" data-src=\"1719501234541.jpg\" alt=\"trans4\"></p>\n<p>接下来是将 Input2D 转换到大 Z 小 Z 排布</p>\n<p>第一步，将 Input2D【25*25，2*3*3*16】中 25*25 补零为 16 的倍数，即 640，得到【640，2*3*3*16】  ，如图 L。</p>\n<p>第二步，将其按照 16*16 的方格进行划分，即得到【40，18】个【16，16】的小块，如图 M。</p>\n<p>第三步，将这些小块按照大 Z 小 Z 的顺序进行排布。大 Z 指的是外部按照行优先，将按照 Cube1 到 Cube720 这些块按照 “Z” 字形排布；像 N 图上方排成一行；小 Z 指的是内部也按照行优先，即每个 16*16 的 Cube，先排第一行，然后是第二行... 详见 N 图中的颜色表示。</p>\n<p><img loading=\"lazy\" data-src=\"1719501296597.jpg\" alt=\"trans3\"></p>\n<p>上图来自《昇腾 AI 处理器架构与编程》，矩阵 A 的排布为大 Z 小 Z，矩阵 B 的排布为大 Z 小 N，大家可以再理解一下。</p>\n<p>至此，Input 的大 Z 小 Z 排布已经实现，接下来就是 16*16 的矩阵乘了。</p>\n<p><img loading=\"lazy\" data-src=\"1719501324297.jpg\" alt=\"trans2\"></p>\n<ul>\n<li>Input 现在是【40，18】个【16，16】小块，如左图，当然，它现在处于大 Z 小 Z 的一维排布。</li>\n<li>Weight 现在是 【18，3】个【16，16】小块，如中间图，当然，它现在处于大 Z 小 N 的一维排布。</li>\n<li>不知道分块矩阵乘的小伙伴可以再搜索下 《线性代数》中的分块矩阵乘运算。</li>\n<li>内部，进行两个 16*16 块的矩阵乘运算，由于 weight 已经按照列优先进行排布，所以矩阵乘的顺序如上图最右边所示。</li>\n<li>外部，对【40，18】和【18，3】做矩阵乘运算。</li>\n<li>至此，我们得到了【640，18】的矩阵。</li>\n<li>然后将上图两图灰色部分对应的多余数据裁掉，就得到了卷积结果【25，25，34】 ，当然，还得遍历一下 batch，得到【2，25，25，34】</li>\n</ul>\n<h3 id=\"input5d搬到大z小z\"><a class=\"anchor\" href=\"#input5d搬到大z小z\">#</a> Input5D 搬到大 Z 小 Z</h3>\n<p>前两小节介绍了 Input5D 变换到 Input 2D，再变换到 大 Z 小 Z 的过程。而在昇腾芯片中，从 Input5D 到 Input2D 由硬件一步实现。</p>\n<p>如果前面两小节已经看明白了的话，那么搬运的秘密就呼之欲出了。</p>\n<p><img loading=\"lazy\" data-src=\"1719501381618.jpg\" alt=\"trans1\"></p>\n<ul>\n<li>看上图，左图是 Input 的 5D 维度排布【2，25，25，16】，右边是 Input 2D 排布【25*25，2*3*3*16】。中间是个滑动窗口示意图，3*3，因为本文中用的例子就是 3*3 卷积。</li>\n<li>回忆一下右边 2D 排布的数据的意义，每一个小格子是通道方向的 16 个数，每一行是滑动窗口每一个位置对应的 2*3*3*16 个数。滑动窗口纵向滑动 25 次，每次要横向滑动 25 次，所以有 625 行数据，再加上补齐的 15 行，才达到了 640 行数据。</li>\n<li>那么右图红色 1 的位置是滑动窗口 a 在第一个位置所对应的 16 个数字；红色 2 的位置是滑动窗口 a 横向滑动一次对应的 16 个数字；红色 3 的位置是滑动窗口 a 横向滑动第三次对应的 16 个数字；依次类推，红色 16 的位置是滑动窗口横向滑动第 16 次对应的 16 个数字。这 16 次滑动，滑动窗口的 a 在左图从 1 滑倒 16！</li>\n<li>也就是说，右图红色框的 1-16 与左图 1-16 一一对应！</li>\n<li>再来回忆一下，左图中 1-16 这 16*16 的数据是连续的吗？是！（不清楚的再回去看 Input 的维度变换）</li>\n<li>那么右图中的 1-16 这 16*16 个数据是连续的吗？它是！ 根据大 Z 小 Z 排布，这红色框中 16*16 的数据刚好被分到一个小 Cube 中！</li>\n<li>昇腾能够从 Input5D 中一次性拷贝 256 个数据到大 Z 小 Z 排布！</li>\n</ul>\n<h1 id=\"代码模拟\"><a class=\"anchor\" href=\"#代码模拟\">#</a> 代码模拟</h1>\n<p>当然，我猜测昇腾应该是设计了 16 个 DMA 组成的 DAM 队列，来实现一次 256 个数据的搬运。真的是相当高效了！</p>\n<p>我提供了 C 语言代码模拟整个昇腾的卷积运算流程。完整代码可以在 <a href=\"https://github.com/ForCheetah/ConvAccelerate\">加速算法模拟</a>下载，该工程提供了以下三个测试函数，它们的区别在于不同的输入排布方式。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//9.  测试 昇腾 卷积算法加速     NCHW 输入， NHWC 输出</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// TestAscendConvLayer();</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//10.  测试 昇腾 卷积算法加速      NCHW 输入， NCHW 输出</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// TestAscendConvLayerNCHW();</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//11. 测试 昇腾卷积算法加速 NHWC      NHWC 输入， NHWC 输出</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// TestAscendConvLayerNHWC();</span></pre></td></tr></table></figure><p>还要再提一句，该工程中采用 C 语言函数 memcpy () 来模拟昇腾的批量数据拷贝功能。数据搬运中并不是所有的情况都是 256 个数据内存连续的，所以可以看到代码运行中分两次、三次才能拷贝完 256 个数据的情况。昇腾硬件中设计的 DMA 队列不会出现这种问题。此外，硬件肯定设计为边搬运边计算的工作模式，不会像我工程中完全得到 Input 大 Z 小 Z 排布再进行矩阵运算。</p>\n<p>文章好长啊！画了好多图！</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "Linux",
                "openBlas"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/05/15/openBlas/",
            "url": "https://forcheetah.github.io/2024/05/15/openBlas/",
            "title": "openBlas库的安装与简单使用",
            "date_published": "2024-05-15T12:27:08.224Z",
            "content_html": "<h1 id=\"编译\"><a class=\"anchor\" href=\"#编译\">#</a> 编译</h1>\n<p>在官网上下载 zip 或通过 git 下载：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>weget https://github.com/OpenMathLib/OpenBLAS.git</pre></td></tr></table></figure><p>将文件解压后进入工程主目录</p>\n<p>编译 openblas 库</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token parameter variable\">-j32</span></pre></td></tr></table></figure><p>导出 依赖库</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token function\">install</span> <span class=\"token assign-left variable\">PREFIX</span><span class=\"token operator\">=</span>/path/to/your/admire</pre></td></tr></table></figure><h1 id=\"cblas_sgemm函数\"><a class=\"anchor\" href=\"#cblas_sgemm函数\">#</a> cblas_sgemm 函数</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cblas_sgemm</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">,</span> transA<span class=\"token punctuation\">,</span> transB<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">,</span> K<span class=\"token punctuation\">,</span> ALPHA<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">,</span> LDA<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> LDB<span class=\"token punctuation\">,</span> BETA<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">,</span> LDC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>order <span class=\"token operator\">:</span> ClasRowMajow 行优先  ClasColMajow 列优先</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>transA <span class=\"token operator\">:</span> CblasTrans  转置     CblasNoTrans 不转置</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>transA <span class=\"token operator\">:</span> CblasTrans  转置     CblasNoTrans 不转置</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>M <span class=\"token operator\">:</span> 表示 A或C的行数。如果A转置，则表示转置后的行数    A的行数（transA处理之后）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>N <span class=\"token operator\">:</span> 表示 B或C的列数。如果B转置，则表示转置后的列数    B的列数（transB处理之后）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>K <span class=\"token operator\">:</span> K <span class=\"token operator\">=</span> A的列数 <span class=\"token operator\">=</span> B的行数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ALPHA <span class=\"token operator\">:</span> <span class=\"token function\">ALPHA</span><span class=\"token punctuation\">(</span>A<span class=\"token operator\">*</span>B<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>BETA<span class=\"token operator\">*</span>C  矩阵权重</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>A <span class=\"token operator\">:</span> 输入矩阵<span class=\"token function\">A</span>  <span class=\"token punctuation\">(</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>LDA <span class=\"token operator\">:</span> A所在矩阵的列数   有可能 LAD<span class=\"token operator\">></span>K</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>B <span class=\"token operator\">:</span> 输入矩阵<span class=\"token function\">B</span>  <span class=\"token punctuation\">(</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>LDB <span class=\"token operator\">:</span> B所在矩阵的列数   有可能 LDB<span class=\"token operator\">></span>N</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>BETA <span class=\"token operator\">:</span> <span class=\"token function\">ALPHA</span><span class=\"token punctuation\">(</span>A<span class=\"token operator\">*</span>B<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>BETA<span class=\"token operator\">*</span>C  偏置权重</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>C <span class=\"token operator\">:</span> 偏置C  同时也是输出<span class=\"token function\">C</span>  <span class=\"token punctuation\">(</span>M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>LDC <span class=\"token operator\">:</span> C所在矩阵的列数   有可能 LDC<span class=\"token operator\">></span>N</pre></td></tr></table></figure><h1 id=\"使用例子\"><a class=\"anchor\" href=\"#使用例子\">#</a> 使用例子</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cblas.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> M<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> K<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> beta<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> lda<span class=\"token operator\">=</span>K<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ldb<span class=\"token operator\">=</span>N<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ldc<span class=\"token operator\">=</span>N<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> A<span class=\"token punctuation\">[</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> B<span class=\"token punctuation\">[</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">float</span> C<span class=\"token punctuation\">[</span>M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">cblas_sgemm</span><span class=\"token punctuation\">(</span>CblasRowMajor<span class=\"token punctuation\">,</span> CblasNoTrans<span class=\"token punctuation\">,</span> CblasNoTrans<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">,</span> K<span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> beta<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">,</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>M<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span>C<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>N<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对应的 CMakeLists.txt 文件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    /path/to/your/admire/include<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>find_library<span class=\"token punctuation\">(</span>OpenBlas_Lib openblas HINTS /path/to/your/admire/lib<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>AUX_SOURCE_DIRECTORY<span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src   SRC_FILE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>SRC_FILE <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/test.cpp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>add_executable <span class=\"token punctuation\">(</span>demo <span class=\"token variable\">$&#123;SRC_FILE&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>target_link_libraries <span class=\"token punctuation\">(</span>demo <span class=\"token variable\">$&#123;OpenBlas_Lib&#125;</span> m<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在工程主目录</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>./demo</pre></td></tr></table></figure><h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "Linux",
                "openBlas"
            ]
        }
    ]
}