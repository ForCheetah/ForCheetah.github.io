{
    "version": "https://jsonfeed.org/version/1",
    "title": "Пусть этот камень будет более крепким, чем человек • All posts by \"runtime\" tag",
    "description": "有自己的博客很帅，但是我很懒，要命！！！",
    "home_page_url": "https://forcheetah.github.io",
    "items": [
        {
            "id": "https://forcheetah.github.io/2024/06/10/deployTVM/",
            "url": "https://forcheetah.github.io/2024/06/10/deployTVM/",
            "title": "【TVM】C++部署运行TVM",
            "date_published": "2024-06-10T11:47:15.090Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇博客主要介绍如何通过 G++ 编译器编译 C++ 代码，部署 TVM。</p>\n<blockquote>\n<p>总感觉，属于我们的时代还没开始，就要结束了呢。<br>\n------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<h1 id=\"现状\"><a class=\"anchor\" href=\"#现状\">#</a> 现状</h1>\n<p>TVM 官方文档:<a href=\"https://tvm.apache.org/docs\"> 英文文档</a> <a href=\"https://tvm.hyper.ai/\">中文文档</a> 主要介绍了通过 Python 脚本和 Python 命令行 tvmc 来编译和部署 TVM。但是这两种方式部署的话，部署设备还需要安装 Python 运行环境，带来额外空间占用和开销。显然不能以这种方式部署。</p>\n<p>TVM 项目的 <a href=\"https://github.com/apache/tvm/tree/main/apps/howto_deploy\">howto_deploy</a> 目录下提供了 G++ 编译 C++ 代码部署 TVM 的方式。遗憾的是给的例子没有包含模型的权重.params 和图结构.json 的加载，也没有输入图片的加载。</p>\n<p>因此本博客提供了一个简单的 C++ 部署 TVM 工程，可以在 <a href=\"https://github.com/ForCheetah/TvmCppDeploy\">TvmCppDeploy 项目</a> 找到并下载，用于你的 TVM 项目部署。</p>\n<p>该项目没有使用 <a href=\"https://github.com/apache/tvm/tree/main/apps/howto_deploy\">TVM 项目 howto_deploy</a> 中的 Makefile，而是重写了 CMakeLists.txt 文件，更方便读懂和修改。</p>\n<h1 id=\"使用方式\"><a class=\"anchor\" href=\"#使用方式\">#</a> 使用方式</h1>\n<p>下载 <a href=\"https://github.com/ForCheetah/TvmCppDeploy\">TvmCppDeploy 项目</a> 到你的本地，可以通过下载 zip 文件后解压缩，也可以直接 git：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/ForCheetah/TvmCppDeploy.git</pre></td></tr></table></figure><p>进入项目根目录，进行必要的路径修改。和 <a href=\"https://github.com/apache/tvm/tree/main/apps/howto_deploy\">TVM 项目 howto_deploy</a> 一样，本项目也提供了两种部署方式，所需要修改的内容也有些不同。</p>\n<h1 id=\"重新编译-tvm_runtime\"><a class=\"anchor\" href=\"#重新编译-tvm_runtime\">#</a> 重新编译 tvm_runtime</h1>\n<p>重新编译 tvm_runtime，和个人的 C++ 文件编译在一起，编译好的可执行文件可独立执行。</p>\n<ul>\n<li>第 1 步：打开  <code>src/Resnet50_deploy.cc </code> 文件，找到 81 行  <code>const std::string artifacts_folder(&quot;/home/xiamu/whs/temp/resnet50-tvm/&quot;);</code>  ，将其中的 <code>/home/xiamu/whs/temp/resnet50-tvm/</code>  修改为自己的已经编译好的模型路径，该路径下应该存在有  <code>mod.so, mod.params, mod.json</code> 。</li>\n<li>第 2 步：还是 <code>src/Resnet50_deploy.cc </code> 文件， 找到 132 行，将其中的图片路径 <code>/home/xiamu/whs/python/remote_tvm/imagenet_cat.bin</code>  改为自己的图片路径，该 bin 文件应当是已经转换好的 float 格式文件。</li>\n<li>第 3 步：打开   <code>src/tvm\\_runtime\\_pack.cc</code> ， 将文件中所有的路径中的  <code>/home/xiamu/tvm</code>   修改为你本地 TVM 工程的根目录路径。 修改完一定要检查一下对应的目录中是否有相应的文件。</li>\n<li>第 4 步：打开  <code>CMakeLists.txt</code> , 找到第 10 行  <code>set(TVM_ROOT /home/xianmu/tvm)</code> ，将其中的 <code>/home/xianmu/tvm</code>  改成你本地 TVM 工程的根目录路径。</li>\n<li>为防止编译报错，可以将 <code>部署方式二： tvm_runtime.so 作为动态链接库编译</code> 对应的代码（43 至 63 行） 注释掉（当前可能还没有对其进行修改）。</li>\n<li>第 5 步：编译和执行，在根目录下：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token parameter variable\">-j4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>./MyRunnable</pre></td></tr></table></figure><h1 id=\"tvm_runtimeso-作为动态链接库编译\"><a class=\"anchor\" href=\"#tvm_runtimeso-作为动态链接库编译\">#</a> tvm_runtime.so 作为动态链接库编译</h1>\n<p>tvm_runtime.so 作为动态链接库，仅编译个人的 C++ 文件，运行时需要链接 libtvm_runtime.so</p>\n<p>这种方式的修改与第一种方式略有不同，修改如下：</p>\n<ul>\n<li>第 1 步：打开  <code>src/Resnet50_deploy.cc </code> 文件，找到 81 行  <code>const std::string artifacts_folder(&quot;/home/xiamu/whs/temp/resnet50-tvm/&quot;);</code>  ，将其中的 <code>/home/xiamu/whs/temp/resnet50-tvm/</code>  修改为自己的已经编译好的模型路径，该路径下应该存在有  <code>mod.so, mod.params, mod.json</code> 。</li>\n<li>第 2 步：还是 <code>src/Resnet50_deploy.cc </code> 文件， 找到 132 行，将其中的图片路径 <code>/home/xiamu/whs/python/remote_tvm/imagenet_cat.bin</code>  改为自己的图片路径，该 bin 文件应当是已经转换好的 float 格式文件。</li>\n<li>第 3 步：打开  <code>CMakeLists.txt</code> , 找到第 10 行  <code>set(TVM_ROOT /home/xianmu/tvm)</code> ，将其中的 <code>/home/xianmu/tvm</code>  改成你本地 TVM 工程的根目录路径。将 62 行的 <code>$&#123;TVM_ROOT&#125;/build</code>  libtvm_runtime.so 路径修改为你存放 libtvm_runtime.so 库的路径。</li>\n<li>为防止编译报错，可以将 <code>部署方式一： 重新编译 tvm_runtime</code>  对应的代码（17 至 38 行）注释掉（当前可能还没有对其进行修改）。</li>\n<li>第 5 步：编译和执行，在根目录下：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token parameter variable\">-j4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>./MyExcute</pre></td></tr></table></figure><h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "tvm",
                "cmake",
                "runtime"
            ]
        }
    ]
}