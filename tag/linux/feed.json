{
    "version": "https://jsonfeed.org/version/1",
    "title": "Пусть этот камень будет более крепким, чем человек • All posts by \"linux\" tag",
    "description": "有自己的博客很帅，但是我很懒，要命！！！",
    "home_page_url": "https://forcheetah.github.io",
    "items": [
        {
            "id": "https://forcheetah.github.io/2024/07/05/problem3/",
            "url": "https://forcheetah.github.io/2024/07/05/problem3/",
            "title": "SystemC 等待异步事件解决方案",
            "date_published": "2024-07-05T14:08:31.423Z",
            "content_html": "<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>本文为实现 SystemC 响应异步事件 解决方案。</p>\n<p>应用场景：</p>\n<p>SystemC 是一个支持系统事务级、行为级建模的开源的 C++ library；</p>\n<p>我们将 SystemC 仿真的模拟叫做模拟器。在很多场景下，模拟器要保持 alive，等待异步 async 事件，做出对应的处理。例如设计一个 SystemC 消费者模拟器，而生产者程序不属于 SystemC 仿真范畴，消费者模拟器需要一直保持等待，并在出现数据后进行处理。</p>\n<blockquote>\n<p>世界上没有东西是完美的啊，倒不如说，同时拥有光明和阴影才是完美的，这样的你才是真正的你。<br>\n------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<p>以上应用场景应当很常见，但是无论中文网站搜索、SystemC 社区、谷歌搜索、Stack Overflow 等，都没有合适的解决方案。笔者在综合了解相关问题及做了不少尝试后，给出了较为合适的解决方案。感兴趣的伙伴可以查看以下相关帖子：</p>\n<p><a href=\"https://forums.accellera.org/topic/7791-example-of-main-thread-controlling-sub_threadsystemc-module-to-complete-instructions/\">https://forums.accellera.org/topic/7791-example-of-main-thread-controlling-sub_threadsystemc-module-to-complete-instructions/</a></p>\n<p><a href=\"https://forums.accellera.org/topic/7609-how-to-make-a-single-only-sc_thread-wait-for-a-notify-from-external-host-thread/\">https://forums.accellera.org/topic/7609-how-to-make-a-single-only-sc_thread-wait-for-a-notify-from-external-host-thread/</a></p>\n<p><a href=\"https://workspace.accellera.org/document/dl/10932\">https://workspace.accellera.org/document/dl/10932</a><br>\n<a href=\"https://forums.accellera.org/topic/29-async_request_update-example/\">https://forums.accellera.org/topic/29-async_request_update-example/</a></p>\n<p><a href=\"https://stackoverflow.com/questions/49814756/async-request-update-example-in-systemc\">https://stackoverflow.com/questions/49814756/async-request-update-example-in-systemc</a></p>\n<h1 id=\"解决方案\"><a class=\"anchor\" href=\"#解决方案\">#</a> 解决方案：</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;systemc.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadSafeEventIf</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">sc_interface</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>sc_time delay <span class=\"token operator\">=</span> SC_ZERO_TIME<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">const</span> sc_event <span class=\"token operator\">&amp;</span><span class=\"token function\">default_event</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadSafeEvent</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">sc_prim_channel</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadSafeEventIf</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">ThreadSafeEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">event</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>sc_time delay <span class=\"token operator\">=</span> SC_ZERO_TIME<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>delay <span class=\"token operator\">=</span> delay<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token function\">async_request_update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">const</span> sc_event <span class=\"token operator\">&amp;</span><span class=\"token function\">default_event</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> event<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            event<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        sc_event event<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        sc_time delay<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>sc_event GenScEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>sc_event workingFinishEvent<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// finish event</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">int</span> workingFlag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// maybe dnot need a lock</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token function\">SC_MODULE</span><span class=\"token punctuation\">(</span>Foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">SC_CTOR</span><span class=\"token punctuation\">(</span>Foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token function\">SC_THREAD</span><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token function\">SC_METHOD</span><span class=\"token punctuation\">(</span>eventTriggered<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            sensitive <span class=\"token operator\">&lt;&lt;</span> threadSafeEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token function\">dont_initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token function\">SC_METHOD</span><span class=\"token punctuation\">(</span>stopTriggered<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            sensitive <span class=\"token operator\">&lt;&lt;</span> threadStopEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token function\">dont_initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">//extra forever thread to avoid simulation exit</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.05</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// check if there is any instruction every one sec.</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>SC_ZERO_TIME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>workingFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// check working</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>workingFinishEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// wait the working finish </span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.05</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">eventTriggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            GenScEvent<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">stopTriggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token function\">sc_stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        ThreadSafeEvent threadSafeEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        ThreadSafeEvent threadStopEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">PollingThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    Foo <span class=\"token operator\">*</span>foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Foo<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[POLL]: %d: Before generating event from PollingThread \\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        foo<span class=\"token operator\">-></span>threadSafeEvent<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[POLL]: %d: Event notified from PollingThread \\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    foo<span class=\"token operator\">-></span>threadStopEvent<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">sc_top</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">sc_module</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token function\">SC_HAS_PROCESS</span><span class=\"token punctuation\">(</span>sc_top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token function\">sc_top</span><span class=\"token punctuation\">(</span>sc_module_name name<span class=\"token operator\">=</span><span class=\"token string\">\"SCTOP\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">sc_module</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token function\">SC_THREAD</span><span class=\"token punctuation\">(</span>processing_thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">processing_thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[PROC]: processing_thread called \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[PROC]: Wait GenScEvent  time: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">sc_time_stamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>GenScEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                workingFlag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> SC_SEC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// advance simulation time</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[PROC]: Process and Finish \"</span><span class=\"token operator\">&lt;&lt;</span>cnt <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" GenScEvent   time: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">sc_time_stamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                workingFinishEvent<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                workingFlag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sc_main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    Foo <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    sc_top <span class=\"token function\">u_sc_top</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"u_sc_top\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    pthread_t thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>thread<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> PollingThread<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token function\">sc_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对应的 CMakeLists.txt</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>find_library<span class=\"token punctuation\">(</span>SystemC_LIB systemc HINTS <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>syc_LIST <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/syc.cpp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>add_executable <span class=\"token punctuation\">(</span>syc <span class=\"token variable\">$&#123;syc_LIST&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>find_package<span class=\"token punctuation\">(</span>Threads REQUIRED<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>target_link_libraries <span class=\"token punctuation\">(</span>syc <span class=\"token variable\">$&#123;SystemC_LIB&#125;</span> Threads::Threads<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>以上代码实现了 ：</p>\n<ul>\n<li>1. 主线程中运行 SystemC 仿真模型，子线程中运行异步触发程序 （也可以根据自己的需要反过来，子线程中运行 SystemC 仿真模型，主线程运行触发程序。）</li>\n<li>2. 子线程每隔 3 秒触发一次 SystemC 仿真模型，主线程中的 SystemC 进行响应。</li>\n<li>3. 子线程主动触发三次之后，睡眠 5 秒，告知 SystemC 仿真结束。</li>\n</ul>\n<h1 id=\"结果\"><a class=\"anchor\" href=\"#结果\">#</a> 结果</h1>\n<pre><code class=\"language-console\">\n        SystemC 2.3.3-Accellera --- Mar 12 2024 15:33:04\n        Copyright (c) 1996-2018 by all Contributors,\n        ALL RIGHTS RESERVED\n[POLL]: 1: Before generating event from PollingThread \n[PROC]: processing_thread called \n[PROC]: Wait GenScEvent  time: 0 s[POLL]: 1: Event notified from PollingThread \n[POLL]: 2: Before generating event from PollingThread \n[PROC]: Process and Finish 1 GenScEvent   time: 10 s[PROC]: processing_thread called \n[PROC]: Wait GenScEvent  time: 10 s[POLL]: 2: Event notified from PollingThread \n[POLL]: 3: Before generating event from PollingThread \n[PROC]: Process and Finish 2 GenScEvent   time: 20 s[PROC]: processing_thread called \n[PROC]: Wait GenScEvent  time: 20 s[POLL]: 3: Event notified from PollingThread \n[PROC]: Process and Finish 3 GenScEvent   time: 30 s[PROC]: processing_thread called \n[PROC]: Wait GenScEvent  time: 30 s\nInfo: /OSCI/SystemC: Simulation stopped by user.\n</code></pre>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "Linux",
                "systemc"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/05/15/openBlas/",
            "url": "https://forcheetah.github.io/2024/05/15/openBlas/",
            "title": "openBlas库的安装与简单使用",
            "date_published": "2024-05-15T12:27:08.224Z",
            "content_html": "<h1 id=\"编译\"><a class=\"anchor\" href=\"#编译\">#</a> 编译</h1>\n<p>在官网上下载 zip 或通过 git 下载：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>weget https://github.com/OpenMathLib/OpenBLAS.git</pre></td></tr></table></figure><p>将文件解压后进入工程主目录</p>\n<p>编译 openblas 库</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token parameter variable\">-j32</span></pre></td></tr></table></figure><p>导出 依赖库</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token function\">install</span> <span class=\"token assign-left variable\">PREFIX</span><span class=\"token operator\">=</span>/path/to/your/admire</pre></td></tr></table></figure><h1 id=\"cblas_sgemm函数\"><a class=\"anchor\" href=\"#cblas_sgemm函数\">#</a> cblas_sgemm 函数</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cblas_sgemm</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">,</span> transA<span class=\"token punctuation\">,</span> transB<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">,</span> K<span class=\"token punctuation\">,</span> ALPHA<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">,</span> LDA<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> LDB<span class=\"token punctuation\">,</span> BETA<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">,</span> LDC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>order <span class=\"token operator\">:</span> ClasRowMajow 行优先  ClasColMajow 列优先</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>transA <span class=\"token operator\">:</span> CblasTrans  转置     CblasNoTrans 不转置</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>transA <span class=\"token operator\">:</span> CblasTrans  转置     CblasNoTrans 不转置</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>M <span class=\"token operator\">:</span> 表示 A或C的行数。如果A转置，则表示转置后的行数    A的行数（transA处理之后）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>N <span class=\"token operator\">:</span> 表示 B或C的列数。如果B转置，则表示转置后的列数    B的列数（transB处理之后）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>K <span class=\"token operator\">:</span> K <span class=\"token operator\">=</span> A的列数 <span class=\"token operator\">=</span> B的行数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ALPHA <span class=\"token operator\">:</span> <span class=\"token function\">ALPHA</span><span class=\"token punctuation\">(</span>A<span class=\"token operator\">*</span>B<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>BETA<span class=\"token operator\">*</span>C  矩阵权重</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>A <span class=\"token operator\">:</span> 输入矩阵<span class=\"token function\">A</span>  <span class=\"token punctuation\">(</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>LDA <span class=\"token operator\">:</span> A所在矩阵的列数   有可能 LAD<span class=\"token operator\">></span>K</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>B <span class=\"token operator\">:</span> 输入矩阵<span class=\"token function\">B</span>  <span class=\"token punctuation\">(</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>LDB <span class=\"token operator\">:</span> B所在矩阵的列数   有可能 LDB<span class=\"token operator\">></span>N</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>BETA <span class=\"token operator\">:</span> <span class=\"token function\">ALPHA</span><span class=\"token punctuation\">(</span>A<span class=\"token operator\">*</span>B<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>BETA<span class=\"token operator\">*</span>C  偏置权重</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>C <span class=\"token operator\">:</span> 偏置C  同时也是输出<span class=\"token function\">C</span>  <span class=\"token punctuation\">(</span>M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>LDC <span class=\"token operator\">:</span> C所在矩阵的列数   有可能 LDC<span class=\"token operator\">></span>N</pre></td></tr></table></figure><h1 id=\"使用例子\"><a class=\"anchor\" href=\"#使用例子\">#</a> 使用例子</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cblas.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> M<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> K<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> beta<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> lda<span class=\"token operator\">=</span>K<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ldb<span class=\"token operator\">=</span>N<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ldc<span class=\"token operator\">=</span>N<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> A<span class=\"token punctuation\">[</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> B<span class=\"token punctuation\">[</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">float</span> C<span class=\"token punctuation\">[</span>M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">cblas_sgemm</span><span class=\"token punctuation\">(</span>CblasRowMajor<span class=\"token punctuation\">,</span> CblasNoTrans<span class=\"token punctuation\">,</span> CblasNoTrans<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">,</span> K<span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> beta<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">,</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>M<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span>C<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>N<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对应的 CMakeLists.txt 文件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    /path/to/your/admire/include<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>find_library<span class=\"token punctuation\">(</span>OpenBlas_Lib openblas HINTS /path/to/your/admire/lib<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>AUX_SOURCE_DIRECTORY<span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src   SRC_FILE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>SRC_FILE <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/test.cpp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>add_executable <span class=\"token punctuation\">(</span>demo <span class=\"token variable\">$&#123;SRC_FILE&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>target_link_libraries <span class=\"token punctuation\">(</span>demo <span class=\"token variable\">$&#123;OpenBlas_Lib&#125;</span> m<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在工程主目录</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>./demo</pre></td></tr></table></figure><h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "Linux",
                "openBlas"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/05/14/cpplib/",
            "url": "https://forcheetah.github.io/2024/05/14/cpplib/",
            "title": "C语言工程调用Cpp库解决方案",
            "date_published": "2024-05-14T12:37:34.628Z",
            "content_html": "<p>本文为 C 语言工程调用 C++ 库的解决方案。</p>\n<p>应用场景： 需要 C++ 程序编译成的库提供函数接口，来解决 C 语言工程的需求。</p>\n<p>想要快速解决问题，直接看 三、通用解决方法</p>\n<blockquote>\n<p>人的出场顺序真的很重要，很多人如果换一个时间认识，换一个时间共处，一切都将是不一样的场景，不一样的结局。所以，人生有无限种可能，我的人生，是现在这一种。感谢大家恰到好处的出现，组成我最好的一种可能。<br>\n------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<h1 id=\"c库可以编辑的情况\"><a class=\"anchor\" href=\"#c库可以编辑的情况\">#</a> C++ 库可以编辑的情况</h1>\n<p>C++ 库由自己编写，可以决定头文件书写的位置</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"iostream\"</span> <span class=\"token comment\">// 将用到的 C++ 标准库，如 iostream，放在本 cpp 文件中</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" # iostream: i am saying hello !\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" # c: i am saying hello !\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建 hello.cpp 文件，实现 sayHello () 功能，分别用 C++ 标准库和 C 标准库的输入输出功能打印 hello！</p>\n<p>①需要注意的是 “将 C++ 标准库放在该 cpp 文件中”，原因后续指出。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span>  <span class=\"token comment\">// 这里不能出现 C++ 标准库</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>创建头文件 hello.h   这里可以添加 C 语言标准库，但是不要把 C++ 标准库放在这里。</p>\n<p>以上 hello.h 和 hello.cpp 模拟了 C++ 库。为了使 C 语言工程能够调用该库，需要增加一个中间层</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// helloWapper.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"helloWapper.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建中间层 helloWapper.cpp ， 对想要使用的 C++ 库函数进行封装，即： 通过 Wapper_sayHello () 调用 sayHello ()</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// helloWapper.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>创建中间层头文件 helloWapper.h，暴露 Wapper_sayHello () 接口。中间出现的 extern &quot;C&quot; {} 是告诉 G++ 编译器，对中间的函数按照 C 语言的方式进行编译。</p>\n<p>然后将上述两个 CPP 文件编译成 静态库 ，使用的 CMakeLists.txt 文件如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include <span class=\"token punctuation\">)</span> <span class=\"token comment\"># 指定头文件位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>test_call_LIST <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/hello.cpp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/helloWapper.cpp<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定需要编译的 CPP 文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>set<span class=\"token punctuation\">(</span>LIBRARY_OUTPUT_PATH <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 指定库输出路径</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>add_library<span class=\"token punctuation\">(</span>hello STATIC <span class=\"token variable\">$&#123;test_call_LIST&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 编译</span></pre></td></tr></table></figure><p>所有文件结构如下：<br>\n<img loading=\"lazy\" data-src=\"1715602113090.jpg\" alt=\"文件结构图\"></p>\n<p>在工程根目录输入</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build <span class=\"token operator\">&amp;</span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake <span class=\"token punctuation\">..</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr></table></figure><p>bin 文件夹下就会出现 封装好的库 libhello.a</p>\n<p>创建 mian.c 来模拟 C 语言工程：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"helloWapper.h\"</span>  <span class=\"token comment\">// 调用 C++ 库接口</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>A：通过命令行进行编译运行</strong></p>\n<p>回到工程根目录，编译 main.c ， 运行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gcc <span class=\"token parameter variable\">-o</span> Hello ./src/main.c -I./include -L./bin <span class=\"token parameter variable\">-lhello</span> -lstdc++</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./Hello</pre></td></tr></table></figure><p><strong>B：通过 Cmake 编译运行</strong></p>\n<p>在工程根目录，将 CMakeList.txt 内容替换为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># CMakeList.txt</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定头文件目录</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>find_library<span class=\"token punctuation\">(</span>Hello_LIB hello HINTS <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 引入 libhello.a 静态库</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>hello_List <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>add_executable <span class=\"token punctuation\">(</span>Hello <span class=\"token variable\">$&#123;hello_List&#125;</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 默认 gcc 编译 main.c</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>target_link_libraries <span class=\"token punctuation\">(</span>Hello <span class=\"token variable\">$&#123;Hello_LIB&#125;</span> stdc++<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> build <span class=\"token operator\">&amp;&amp;</span> cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./Hello</pre></td></tr></table></figure><p>A B 两种方式均输出结果： 至此 C 语言工程能够成功调用 C++ 库</p>\n<p><img loading=\"lazy\" data-src=\"1715602427908.jpg\" alt=\"输出结果\"></p>\n<p>以上 A B 两种方式中均出现 stdc++ ，一般以 libstdc++.so 的方式存在，是 C++ 标准库。</p>\n<p>可以看下图 “G++ and GCC”</p>\n<p><img loading=\"lazy\" data-src=\"1715602427908.jpg\" alt=\" “G++ and GCC”\"></p>\n<p>GCC 在编译时不会自动链接 C++ 标准库， 因此 hello.cpp 用到的 类似 &quot;iostream&quot; 等 C++ 标准库需要手动链接，否则会出现以下错误：</p>\n<p><img loading=\"lazy\" data-src=\"1715686800105.jpg\" alt=\"找不到C++标准库错误\"></p>\n<h1 id=\"c库为第三方库无法编辑的情况\"><a class=\"anchor\" href=\"#c库为第三方库无法编辑的情况\">#</a> C++ 库为第三方库，无法编辑的情况</h1>\n<p>在《一、C<ins> 库可以编辑的情况》 中提到  【①需要注意的是 “ 将 C</ins> 标准库放在该 cpp 文件中”】 是因为 GCC 编译不仅找不到 C<ins> 标准库 stdc</ins> ，也找不到 C++ 标准库的头文件。如果在 hello.h 中引用 “iostream&quot;， 那么用 GCC 编译 C 语言工程时，会报找不到头文件错误。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span>  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"iostream\"</span>  <span class=\"token comment\">// 这里出现了 C++ 标准库</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但是当我们想用的 C<ins> 库为第三方库，而它在头文件里引用了大量 C</ins> 标准库的情况下，该如何处理呢？</p>\n<p>再看图 “G++ and GCC”，里面指明 G<ins> 编译器能够编译 C 和 C</ins> 文件，且能够自动链接 C<ins> 标准库。所以在这种情况下，只需要在编译 C 语言工程的时候，指定 G</ins> 为编译器（编译 C 文件默认使用的是 GCC 编译器）就可以了。</p>\n<p>下面是与《一、C++ 库可以编辑的情况》相似的总体流程（有修改的地方会有注释）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span>  <span class=\"token comment\">// C++ 标准库头文件转移到 hello.h 中</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" # iostream: i am saying hello !\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" # c: i am saying hello !\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建 hello.cpp 文件，实现 sayHello () 功能，分别用 C++ 标准库和 C 标准库的输入输出功能打印 hello！</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span> </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"iostream\"</span>  <span class=\"token comment\">// C++ 标准库出现在这里</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>创建头文件 hello.h<br>\n 以上 hello.h 和 hello.cpp 模拟了 C++ 库。为了使 C 语言工程能够调用该库，需要增加一个中间层：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// helloWapper.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"helloWapper.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建中间层 helloWapper.cpp ， 对想要使用的 C++ 库函数进行封装，即： 通过 Wapper_sayHello () 调用 sayHello ()</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// helloWapper.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>创建中间层头文件 helloWapper.h，暴露 Wapper_sayHello () 接口。中间出现的 extern &quot;C&quot; {} 是告诉 G++ 编译器，对中间的函数按照 C 语言的方式进行编译。<br>\n然后将上述两个 CPP 文件编译成 静态库 ，使用的 CMakeLists.txt 文件如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include <span class=\"token punctuation\">)</span> <span class=\"token comment\"># 指定头文件位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>test_call_LIST <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/hello.cpp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/helloWapper.cpp<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定需要编译的 CPP 文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>set<span class=\"token punctuation\">(</span>LIBRARY_OUTPUT_PATH <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 指定库输出路径</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>add_library<span class=\"token punctuation\">(</span>hello STATIC <span class=\"token variable\">$&#123;test_call_LIST&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 编译</span></pre></td></tr></table></figure><p>文件结构还是图：文件结构图</p>\n<p>在工程根目录输入</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build <span class=\"token operator\">&amp;</span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake <span class=\"token punctuation\">..</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr></table></figure><p>bin 文件夹下就会出现 封装好的库 libhello.a<br>\n 创建 mian.c 来模拟 C 语言工程：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"helloWapper.h\"</span>  <span class=\"token comment\">// 调用 C++ 库接口</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>A：通过命令行进行编译运行</strong><br>\n回到工程根目录，编译 main.c ， 运行：<br>\n编译器使用了 g++ ，可以自动搜索 C<ins> 标准库路径及链接 C</ins> 标准库，因此不需要再加 “-lstdc++”。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>g++ <span class=\"token parameter variable\">-o</span> Hello ./src/main.c -I./include -L./bin <span class=\"token parameter variable\">-lhello</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./Hello</pre></td></tr></table></figure><p><strong>B：通过 Cmake 编译运行</strong><br>\n在工程根目录，将 CMakeList.txt 内容替换为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># CMakeList.txt</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SET<span class=\"token punctuation\">(</span>CMAKE_C_COMPILER <span class=\"token string\">\"g++\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定使用  g++ 编译器进行编译</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定头文件目录</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>find_library<span class=\"token punctuation\">(</span>Hello_LIB hello HINTS <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 引入 libhello.a 静态库</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>hello_List <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>add_executable <span class=\"token punctuation\">(</span>Hello <span class=\"token variable\">$&#123;hello_List&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>target_link_libraries <span class=\"token punctuation\">(</span>Hello <span class=\"token variable\">$&#123;Hello_LIB&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>编译、执行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> build <span class=\"token operator\">&amp;&amp;</span> cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./Hello</pre></td></tr></table></figure><h1 id=\"通用方法\"><a class=\"anchor\" href=\"#通用方法\">#</a> 通用方法</h1>\n<p>可以忽略方法一和二。方法三可以采用 GCC 编译调用了 C<ins> 库的 C 语言工程。<br>\n解决的方法是： 在 中间层 helloWapper.cpp 中引用 C</ins> 库头文件 #include &quot;hello.h&quot;， 而不是在 helloWapper.h 中引用</p>\n<p>例子：<br>\n创建 C++ 库源文件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span>  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" # iostream: i am saying hello !\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" # c: i am saying hello !\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建头文件 hello.h</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span> </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"iostream\"</span> </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以上 hello.h 和 hello.cpp 模拟了 C++ 库。为了使 C 语言工程能够调用该库，需要增加一个中间层</p>\n<p>其中注意：一定要将 C<ins> 库的头文件 &quot;hello.h&quot; 加在 中间层的.cpp 文件中， 而不是放在中间层.h 文件中。这种情况下能够将 &quot;hello.h&quot; 等所有 C</ins> 库头文件编译到库当中，防止最后采用 GCC 编译时找不到 g++ 标准库的头文件。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// helloWapper.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span>  <span class=\"token comment\">// 一定要将 C++ 库的头文件 \"hello.h\" 加在 中间层的 cpp 文件中</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"helloWapper.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// helloWapper.h</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus  </span><span class=\"token comment\">// 不要把 #include \"hello.h\" 放在这里</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>创建中间层头文件 helloWapper.h，暴露 Wapper_sayHello () 接口。中间出现的 extern &quot;C&quot; {} 是告诉 G++ 编译器，对中间的函数按照 C 语言的方式进行编译。</p>\n<p>然后将上述两个 CPP 文件编译成 静态库 ，使用的 CMakeLists.txt 文件如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include <span class=\"token punctuation\">)</span> <span class=\"token comment\"># 指定头文件位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>test_call_LIST <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/hello.cpp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/helloWapper.cpp<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定需要编译的 CPP 文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>set<span class=\"token punctuation\">(</span>LIBRARY_OUTPUT_PATH <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 指定库输出路径</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>add_library<span class=\"token punctuation\">(</span>hello STATIC <span class=\"token variable\">$&#123;test_call_LIST&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 编译</span></pre></td></tr></table></figure><p>文件结构还是图：文件结构图</p>\n<p>在工程根目录输入</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build <span class=\"token operator\">&amp;</span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake <span class=\"token punctuation\">..</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr></table></figure><p>bin 文件夹下就会出现 封装好的库 libhello.a<br>\n 创建 mian.c 来模拟 C 语言工程：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"helloWapper.h\"</span>  <span class=\"token comment\">// 调用 C++ 库接口</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>A：通过命令行进行编译运行</strong><br>\n回到工程根目录，编译 main.c ， 运行：<br>\n编译器使用了 gcc ，需要添加 C<ins> 标准库 “ -lstdc</ins>”（标准库的头文件已经在 C++ 库中了）。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gcc <span class=\"token operator\">-</span>o Hello <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>main<span class=\"token punctuation\">.</span>c <span class=\"token operator\">-</span>I<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>include <span class=\"token operator\">-</span>L<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>bin <span class=\"token operator\">-</span>lhello <span class=\"token operator\">-</span>lstdc<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>Hello</pre></td></tr></table></figure><p><strong>B：通过 Cmake 编译运行</strong><br>\n在工程根目录，将 CMakeList.txt 内容替换为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># CMakeList.txt</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定头文件目录</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>find_library<span class=\"token punctuation\">(</span>Hello_LIB hello HINTS <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 引入 libhello.a 静态库</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>hello_List <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>add_executable <span class=\"token punctuation\">(</span>Hello <span class=\"token variable\">$&#123;hello_List&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>target_link_libraries <span class=\"token punctuation\">(</span>Hello <span class=\"token variable\">$&#123;Hello_LIB&#125;</span> stdc++<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>编译、执行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> build <span class=\"token operator\">&amp;&amp;</span> cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./Hello</pre></td></tr></table></figure><p>方法三是最通用的解决方法，不仅仍然可以使用 GCC 编译，而且想要在其他地方调用 C++ 库时，需要的头文件只有 “helloWapper.h” 一个。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "Linux",
                "lib"
            ]
        }
    ]
}