{
    "version": "https://jsonfeed.org/version/1",
    "title": "Пусть этот камень будет более крепким, чем человек • All posts by \"compile\" category",
    "description": "有自己的博客很帅，但是我很懒，要命！！！",
    "home_page_url": "https://forcheetah.github.io",
    "items": [
        {
            "id": "https://forcheetah.github.io/2025/08/31/aicompile05/",
            "url": "https://forcheetah.github.io/2025/08/31/aicompile05/",
            "title": "【AI编译】张量生命周期管理",
            "date_published": "2025-08-31T02:20:00.996Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇文章总结【张量生命周期优化】算法。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>AI 编译器设计中用于神经网络模型推理的内存管理模块， 通常被称为内存分配规划 或 张量生命周期优化。<br>\n为了减少内存占用，提高内存利用率，对 Tensor 的内存分配和生命周期的管理必不可少。</p>\n<p>内存分配就像是个拼图游戏，在二维坐标中，横轴是时间，纵轴是内容空间，然后将神经网络模型推理过程中需要用到的内存块， 拼到这个二维坐标中。</p>\n<p>神经网络模型推理主要涉及三部分 Tensor 内存占用：输入输出 tensor、权重 tensor、临时中间 tensor。将这些 tensor 拼接到如下的坐标轴中，横轴是内存空间，纵轴是周期 TimeStep，合理分配，以最大化内存利用率。</p>\n<p>如下图</p>\n<p><img loading=\"lazy\" data-src=\"1756606612420.jpg\" alt=\"算能无切分情况的分配\"></p>\n<p><a href=\"https://tpumlir.org/developer_manual_zh/10_layergroup.html\">图源 - 无切分情况的分配</a></p>\n<p>按照神经网络的执行顺序（拓扑顺序）来划分周期，以下面一个网络结构为例，周期可以如下划分。</p>\n<p><img loading=\"lazy\" data-src=\"1756606687361.jpg\" alt=\"算能LMEM的ID分配\"></p>\n<p><a href=\"https://tpumlir.org/developer_manual_zh/10_layergroup.html\">图源 - LMEM 的 ID 分配</a></p>\n<p><img loading=\"lazy\" data-src=\"1756606703569.jpg\" alt=\"算能TimeStep分配\"></p>\n<p><a href=\"https://tpumlir.org/developer_manual_zh/10_layergroup.html\">图源 - TimeStep 分配</a></p>\n<h1 id=\"算法\"><a class=\"anchor\" href=\"#算法\">#</a> 算法</h1>\n<p>只考虑静态内存分配。动态内存分配的 tensor 大小不固定、形状不固定，可能需要在推理过程中边推理边分配内存。但是静态情况下，需要开辟的空间时已知的。</p>\n<h2 id=\"贪心算法\"><a class=\"anchor\" href=\"#贪心算法\">#</a> 贪心算法</h2>\n<p>贪心算法的 “贪心” 体现在：在为当前要分配的张量做决策时，算法只着眼于 “当前这一步” 所能找到的最优解（即最能节省当前内存空间的放置位置），而不会为了全局最优（整个推理过程的绝对最低峰值内存）去考虑未来的张量该如何分配。这是一种局部最优（Local Optimal）策略，期望通过每一步的局部最优选择，最终得到一个接近全局最优的可行解。<br>\n1. 生命周期分析：首先，遍历计算图，为每个张量（Tensor）确定其 “出生时间”（定义或计算完成时）和 “死亡时间”（最后一次被使用时）。<br>\n2. 排序：将所有的张量按照其 “出生时间” 排序。<br>\n3. 分配：模拟一个从低地址到高地址的内存空间，可以用一个链表来存放。初始情况下链表中只有一个拥有所有空间、未占用的内存块。按顺序处理每个张量：检查当前所有未分配内存块，找到一个足够大的空闲内存块来存放新张量。张量生命周期结束时，即使释放对应的内存块，如果释放时前后内存连续，可以将其融合为一个大的内存块。<br>\n寻找空闲块的策略：</p>\n<ul>\n<li>首次适应（First-Fit）：从低地址开始扫描，找到第一个足够大的空闲块就分配。</li>\n<li>最佳适应（Best-Fit）：扫描所有空闲块，找到能满足需求且大小最接近的空闲块进行分配，以减少内存碎片。</li>\n<li>最坏适应（Worst-Fit）：总是选择最大的空闲块进行分配，试图避免产生非常小的碎片。</li>\n</ul>\n<p>贪心算法的优点：<br>\n高效：它的决策非常快，通常是 O (n) 或 O (n log n) 的复杂度，适合在编译器中快速完成内存规划。</p>\n<p>有效：对于大多数神经网络计算图，张量的生命周期分布使得这种 “短视” 的策略能得出一个非常不错、甚至是最优的解。</p>\n<p>实现简单：逻辑清晰，易于实现和调试。</p>\n<p>贪心的局限性：</p>\n<p>局部最优：由于缺乏全局视野，它无法保证结果一定是全局最优（峰值内存最低）的。在某些特定的张量生命周期和大小分布下，它可能会产生碎片或做出次优的决策。</p>\n<p>受分配策略影响：使用 First-Fit, Best-Fit, 还是 Worst-Fit，会得到不同的结果，需要根据实际情况进行选择。</p>\n<p>比如贪心算法会造成左图的情况，其显然不如右侧的分配方式好。</p>\n<p><img loading=\"lazy\" data-src=\"1756606721334.jpg\" alt=\"分配示例\"></p>\n<h2 id=\"束搜索算法\"><a class=\"anchor\" href=\"#束搜索算法\">#</a> 束搜索算法</h2>\n<p>束搜索是贪心算法的一种优雅扩展，它在 “每一步的局部最优” 和 “穷举搜索的全局最优” 之间找到了一个非常好的平衡点。</p>\n<ul>\n<li>贪心算法：在每一步，只选择当前看起来最好的一个选项，然后走下去，永不回头。它没有前瞻性。</li>\n<li>穷举搜索：考虑所有可能的路径，最终一定能找到全局最优解，但计算成本无法承受。</li>\n<li>束搜索：是两者的折中。它在每一步不是只保留 1 个候选解，而是保留最好的 k 个候选解（k 称为束宽）。这个 k 是一个可调的参数，k=1 时就是贪心算法，k=∞ 时就是穷举搜索。</li>\n<li></li>\n</ul>\n<p>假设我们按张量的开始时间排序后，得到一个待分配序列 [T1, T2, T3, ..., Tn]，束宽为 k。</p>\n<p>1. 初始化：</p>\n<ul>\n<li>创建一个集合  <code>beam</code> ，它代表当前代的候选状态。初始时，它只包含一个状态：空的内存空间，峰值内存为 0，下一个要分配的是 T1。</li>\n<li>beam = [initial_state]<br>\n 2. 循环（对于每一个要分配的张量）：</li>\n</ul>\n<p>a. 生成候选：对于  <code>beam</code>  中的每一个当前状态，生成所有可能分配下一个张量的方式。每个方式都会产生一个新的后继状态。</p>\n<ul>\n<li>例如，从当前状态 S 出发，分配 Ti 可能有 3 种方式：放入空闲块 A、放入空闲块 B、放到堆顶。这会生成 3 个新的状态 S_A, S_B, S_C。<br>\nb. 排序与剪枝：</li>\n<li>将所有新生成的后继状态（来自  <code>beam</code>  中所有父状态）合并到一个大列表中。</li>\n<li>根据评估函数（即当前的峰值内存）对这个大列表进行排序，选出最好的 k 个状态。</li>\n<li>丢弃掉所有其他状态。</li>\n<li>更新  <code>beam</code>  为这 k 个最好的后继状态。<br>\nc. 前进：处理下一个张量 T (i+1)。<br>\n3. 终止：</li>\n<li>当所有张量都分配完毕后， <code>beam</code>  集合中的 k 个状态就代表了 k 个完整的内存分配方案。</li>\n<li>从中选择峰值内存最小的那个方案作为最终结果。</li>\n</ul>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结：</h2>\n<p>还有很多其他的算法，总结如下：</p>\n<p><img loading=\"lazy\" data-src=\"1756606772058.jpg\" alt=\"算法总结\"></p>\n<h1 id=\"绘图\"><a class=\"anchor\" href=\"#绘图\">#</a> 绘图</h1>\n<p>可以通过绘制甘特图来检查 Tensor 生命周期的分配情况。可以将信息输出为以下 .csv 文件：</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tensor_name,size,offset,start_time,end_time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>conv1_weight,102400,0,1,10</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>layer1_activation,204800,102400,5,15</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pool1_output,102400,102400,16,25</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>conv2_weight,204800,0,11,30</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>layer2_activation,409600,204800,20,35</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>output,102400,614400,36,40</pre></td></tr></table></figure><p>使用 Python 库来绘制甘特图，如下代码已经将数据进行归一化。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>patches <span class=\"token keyword\">as</span> patches</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 读取 CSV</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'memory_plan.csv'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 计算相对比例</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>max_time <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'end_time'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>max_memory <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">'offset'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'size'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 归一化到 [0, 1] 范围</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>df<span class=\"token punctuation\">[</span><span class=\"token string\">'norm_start'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'start_time'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> max_time</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>df<span class=\"token punctuation\">[</span><span class=\"token string\">'norm_end'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'end_time'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> max_time</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>df<span class=\"token punctuation\">[</span><span class=\"token string\">'norm_offset'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'offset'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> max_memory</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>df<span class=\"token punctuation\">[</span><span class=\"token string\">'norm_size'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'size'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> max_memory</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>fig<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 调整画布大小</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 为每个 Tensor 绘制一个水平矩形条</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>colors <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>cm<span class=\"token punctuation\">.</span>tab10<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> row <span class=\"token keyword\">in</span> df<span class=\"token punctuation\">.</span>iterrows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    rect <span class=\"token operator\">=</span> patches<span class=\"token punctuation\">.</span>Rectangle<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span><span class=\"token string\">'norm_start'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">[</span><span class=\"token string\">'norm_offset'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># (x, y) 左下角坐标</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        row<span class=\"token punctuation\">[</span><span class=\"token string\">'norm_end'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> row<span class=\"token punctuation\">[</span><span class=\"token string\">'norm_start'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\"># 宽度</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        row<span class=\"token punctuation\">[</span><span class=\"token string\">'norm_size'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                         <span class=\"token comment\"># 高度</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        linewidth<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> edgecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> facecolor<span class=\"token operator\">=</span>colors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        alpha<span class=\"token operator\">=</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        label<span class=\"token operator\">=</span>row<span class=\"token punctuation\">[</span><span class=\"token string\">'tensor_name'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    ax<span class=\"token punctuation\">.</span>add_patch<span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\"># 在矩形中部添加 Tensor 名称</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    ax<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span><span class=\"token string\">'norm_start'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> row<span class=\"token punctuation\">[</span><span class=\"token string\">'norm_end'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        row<span class=\"token punctuation\">[</span><span class=\"token string\">'norm_offset'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> row<span class=\"token punctuation\">[</span><span class=\"token string\">'norm_size'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        row<span class=\"token punctuation\">[</span><span class=\"token string\">'tensor_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        ha<span class=\"token operator\">=</span><span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        va<span class=\"token operator\">=</span><span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        fontsize<span class=\"token operator\">=</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        bbox<span class=\"token operator\">=</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>boxstyle<span class=\"token operator\">=</span><span class=\"token string\">\"round,pad=0.3\"</span><span class=\"token punctuation\">,</span> facecolor<span class=\"token operator\">=</span><span class=\"token string\">\"white\"</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># 设置图表属性</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Normalized Time Step'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Normalized Memory Address'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">'Neural Network Memory Allocation Timeline\\nPeak Memory: &#123;:,&#125; Bytes'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>max_memory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># 添加网格</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>ax<span class=\"token punctuation\">.</span>grid<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> linestyle<span class=\"token operator\">=</span><span class=\"token string\">'--'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\"># 添加图例</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>ax<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span>bbox_to_anchor<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.05</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> loc<span class=\"token operator\">=</span><span class=\"token string\">'upper left'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\"># 调整布局</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>plt<span class=\"token punctuation\">.</span>tight_layout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\"># 保存和显示</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>plt<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">'memory_timeline_normalized.png'</span><span class=\"token punctuation\">,</span> dpi<span class=\"token operator\">=</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> bbox_inches<span class=\"token operator\">=</span><span class=\"token string\">'tight'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复！</p>\n",
            "tags": [
                "compile",
                "AI"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2025/05/11/tvmByoc01/",
            "url": "https://forcheetah.github.io/2025/05/11/tvmByoc01/",
            "title": "【BYOC】TVM添加自定义编译器 ccompiler",
            "date_published": "2025-05-11T12:40:38.618Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇介绍外部编译器：C 语言编译器 ccompiler 是什么。</p>\n<p>一些拓展链接。如果想多了解一些编译相关的内容，提高对 relay IR 的理解，可以学习 <a href=\"https://forcheetah.github.io/2025/03/13/compile01/\">《【编译器】使用 llvm 编译自定义语言【1】构建 AST》</a>，<a href=\"https://forcheetah.github.io/2024/10/13/tvm02/\">《【TVM】通过代码学习编译流程【2】模型转换》</a>，<a href=\"https://forcheetah.github.io/2025/03/28/compile03/\">《【编译器】使用 llvm 编译自定义语言【3】编译 object》</a>，<a href=\"https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html\">《My First Language Frontend with LLVM Tutorial》</a> 等。想了解更多 TVM，可以阅读<a href=\"https://zhuanlan.zhihu.com/p/446976730\">《深度学习编译器 TVM 代码串讲》</a>。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h1>\n<p>如何编译 TVM，可以参考文章 [【TVM】通过代码学习编译流程【1】必要知识](<a href=\"https://forcheetah.github.io/2024/10/10/tvm01/%EF%BC%89%E4%B8%AD%E7%9A%84%E7%BC%96%E8%AF%91%E9%83%A8%E5%88%86%E3%80%82%E6%9C%AC%E6%96%87%E9%BB%98%E8%AE%A4%E8%AF%BB%E8%80%85%E5%B7%B2%E7%BB%8F%E8%83%BD%E5%A4%9F%E7%BC%96%E8%AF%91%E5%92%8C%E4%BD%BF%E7%94%A8TVM%E3%80%82\">https://forcheetah.github.io/2024/10/10/tvm01/）中的编译部分。本文默认读者已经能够编译和使用 TVM。</a></p>\n<p>TVM 的外部编译器例子: ccompiler 是一个简单的、仅支持 <code>+ - *</code>  运算的、编译为 C 源码的外部编译器。</p>\n<p>先看看 TVM 对 ccompiler 编译器的注册。位于 <code>src/relay/backend/contrib/codegen_c/target.cc</code> 。</p>\n<p>TVM 在这里注册了能够生成 C 源码，供本地 C 编译器编译的外部 CodeGen ccompiler。而交由 ccompiler 编译的函数需要被标记为 <code>Primitive</code>  和 <code>Compiler=ccompiler</code> ， <code>Primitive</code>  是告诉编译器该函数是原始不可分割的，relay 阶段不要分解和优化。 <code>Compiler=ccompiler</code>  是指定 CodeGen 为 ccompiler。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * \\brief This demonstration external codegen target emits C/C++ for compilation by the native c</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * compiler on CPU.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *  - Patterns: None, functions must be explicitly marked as \"Primitive\" and \"Compiler=ccompiler\".</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *  - Custom compiler: relay/backend/contrib/codegen_c/codegen.cc</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">TVM_REGISTER_TARGET_KIND</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ccompiler\"</span><span class=\"token punctuation\">,</span> kDLCPU<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">set_attr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Bool<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>tvm<span class=\"token double-colon punctuation\">::</span>attr<span class=\"token double-colon punctuation\">::</span>kIsExternalCodegen<span class=\"token punctuation\">,</span> <span class=\"token function\">Bool</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">set_attr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>relay<span class=\"token double-colon punctuation\">::</span>transform<span class=\"token double-colon punctuation\">::</span>FTVMRelayToTIR<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>tvm<span class=\"token double-colon punctuation\">::</span>attr<span class=\"token double-colon punctuation\">::</span>kRelayToTIR<span class=\"token punctuation\">,</span> <span class=\"token function\">CCompilerPass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// Value is prepended to every output CModule.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">add_attr_option</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"header\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接下来用一个简单的例子调用 ccompiler 生成 C 语言，并编译和执行。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> tvm</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> tvm <span class=\"token keyword\">import</span> relay</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> tvm<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> graph_executor</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> OrderedDict</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">update_lib</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># lib : llvmModuleNode   ret_.mod</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    kwargs <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    kwargs<span class=\"token punctuation\">[</span><span class=\"token string\">\"options\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"-O2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-std=c++17\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    tmp_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/temp/repare_test/\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    lib_name <span class=\"token operator\">=</span> <span class=\"token string\">\"lib.so\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    lib_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>tmp_path<span class=\"token punctuation\">,</span> lib_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    lib<span class=\"token punctuation\">.</span>export_library<span class=\"token punctuation\">(</span>lib_path<span class=\"token punctuation\">,</span> fcompile<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> workspace_dir<span class=\"token operator\">=</span><span class=\"token string\">'/home/user/tempworkspace'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    lib <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>runtime<span class=\"token punctuation\">.</span>load_module<span class=\"token punctuation\">(</span>lib_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> lib</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">set_external_func_attr</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> compiler<span class=\"token punctuation\">,</span> ext_symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    func <span class=\"token operator\">=</span> func<span class=\"token punctuation\">.</span>with_attr<span class=\"token punctuation\">(</span><span class=\"token string\">\"Primitive\"</span><span class=\"token punctuation\">,</span> tvm<span class=\"token punctuation\">.</span>tir<span class=\"token punctuation\">.</span>IntImm<span class=\"token punctuation\">(</span><span class=\"token string\">\"int32\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    func <span class=\"token operator\">=</span> func<span class=\"token punctuation\">.</span>with_attr<span class=\"token punctuation\">(</span><span class=\"token string\">\"Compiler\"</span><span class=\"token punctuation\">,</span> compiler<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    func <span class=\"token operator\">=</span> func<span class=\"token punctuation\">.</span>with_attr<span class=\"token punctuation\">(</span><span class=\"token string\">\"global_symbol\"</span><span class=\"token punctuation\">,</span> ext_symbol<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> func</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">prepare_graph_lib</span><span class=\"token punctuation\">(</span>base_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    x <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>var<span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> shape<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    y <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>var<span class=\"token punctuation\">(</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> shape<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    x0 <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>var<span class=\"token punctuation\">(</span><span class=\"token string\">\"x0\"</span><span class=\"token punctuation\">,</span> shape<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    y0 <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>var<span class=\"token punctuation\">(</span><span class=\"token string\">\"y0\"</span><span class=\"token punctuation\">,</span> shape<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    params <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"y0\"</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    f <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>Function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> x0 <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x0 <span class=\"token operator\">+</span> y0<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> y0<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    f <span class=\"token operator\">=</span> set_external_func_attr<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ccompiler\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ccompiler_01\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 添加 `Primitive` 和 `Compiler=ccompiler` 标记</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    call <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>Call<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    mod <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>IRModule<span class=\"token punctuation\">.</span>from_expr<span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------------------------------------\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">.</span>script<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------------------------------------\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\"># 编译 Relay->TIR</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    target <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>Target<span class=\"token punctuation\">(</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">with</span> tvm<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>PassContext<span class=\"token punctuation\">(</span>opt_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        compiled_lib <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># const_loader</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=======================================================================================================\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    device <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    lib <span class=\"token operator\">=</span> update_lib<span class=\"token punctuation\">(</span>compiled_lib<span class=\"token punctuation\">.</span>get_lib<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    rt_mod <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>graph_executor<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>compiled_lib<span class=\"token punctuation\">.</span>get_executor_config<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lib<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># runtime_mod  图执行器</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\"># 模型执行</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    x_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    y_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    inputs <span class=\"token operator\">=</span> OrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> y_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> x_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">for</span> name<span class=\"token punctuation\">,</span> data <span class=\"token keyword\">in</span> inputs<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        rt_mod<span class=\"token punctuation\">.</span>set_input<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    rt_mod<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    out <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    out <span class=\"token operator\">=</span> rt_mod<span class=\"token punctuation\">.</span>get_output<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\"># 保存模型</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    dylib_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>base_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"test_ccompiler.so\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    compiled_lib<span class=\"token punctuation\">.</span>get_lib<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>export_library<span class=\"token punctuation\">(</span>dylib_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    curr_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/temp/repare_test/\"</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">[</span><span class=\"token string\">\"TVM_HOME\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/TVM/tvm/\"</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    prepare_graph_lib<span class=\"token punctuation\">(</span>curr_path<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这段代码使用 relay 语言搭建了仅包含加减乘的模型  <code>x*(x+y)-y</code> ，并对其进行编译和调用执行。</p>\n<p>可以看到 <code>set_external_func_attr()</code>  函数为模型添加 <code>Primitive</code>  和 <code>Compiler=ccompiler</code>  标记，以告知 TVM 模型中的该函数使用 ccompiler 生成 code。</p>\n<p>以下是打印模型:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>def @main<span class=\"token punctuation\">(</span>%x: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span>, %y: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  %2 <span class=\"token operator\">=</span> fn <span class=\"token punctuation\">(</span>%x0: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span>, %y0: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span>, <span class=\"token assign-left variable\">Primitive</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>, <span class=\"token assign-left variable\">Compiler</span><span class=\"token operator\">=</span><span class=\"token string\">\"ccompiler\"</span>, <span class=\"token assign-left variable\">global_symbol</span><span class=\"token operator\">=</span><span class=\"token string\">\"ccompiler_01\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    %0 <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span>%x0, %y0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    %1 <span class=\"token operator\">=</span> multiply<span class=\"token punctuation\">(</span>%x0, %0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    subtract<span class=\"token punctuation\">(</span>%1, %y0<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  %2<span class=\"token punctuation\">(</span>%x, %y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>根据我们构建的模型，输出是个 5*5 的 tensor，不过由于输入都是随机的，所以每次结果也不一样。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>************** result **************</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>-0.2741713   <span class=\"token number\">0.08935148</span> <span class=\"token parameter variable\">-0.04881942</span> <span class=\"token parameter variable\">-0.02653596</span>  <span class=\"token number\">0.6241337</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token punctuation\">[</span> <span class=\"token number\">0.6122713</span>  <span class=\"token parameter variable\">-0.62298256</span>  <span class=\"token number\">0.68201226</span>  <span class=\"token number\">0.37773138</span> <span class=\"token parameter variable\">-0.4962681</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">[</span>-0.5679778   <span class=\"token number\">0.28375486</span>  <span class=\"token number\">0.38151044</span> <span class=\"token parameter variable\">-0.41397965</span> <span class=\"token parameter variable\">-0.3218666</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token punctuation\">[</span>-0.24529386 <span class=\"token parameter variable\">-0.4346298</span>  <span class=\"token parameter variable\">-0.10323387</span> <span class=\"token parameter variable\">-0.6108544</span>  -0.22057068<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">[</span>-0.44894195  <span class=\"token number\">0.16438246</span> <span class=\"token parameter variable\">-0.47126824</span>  <span class=\"token number\">0.546167</span>   <span class=\"token parameter variable\">-0.8994445</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h1 id=\"ccompiler\"><a class=\"anchor\" href=\"#ccompiler\">#</a> ccompiler</h1>\n<p>我们直接从 ccompiler 的 Codegen 结果来了解 ccompiler 这个编译器。</p>\n<p>编译过程中如果没有指定工作空间，TVM 会创建临时空间存放生成的 C 源码，并在用完之后释放掉临时空间。为了看到 ccompiler 生成的 C 源码，需要指定工作空间，即上述 Python 例子中：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>lib<span class=\"token punctuation\">.</span>export_library<span class=\"token punctuation\">(</span>lib_path<span class=\"token punctuation\">,</span> fcompile<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> workspace_dir<span class=\"token operator\">=</span><span class=\"token string\">'/home/user/tempworkspace'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>工作空间下有三个生成文件： <code>lib0.c</code> 、 <code>lib1.o</code> 、 <code>devc.o</code></p>\n<p>其中 <code>lib1.o</code>  由 <code>ConstLoaderModule</code>  生成，可能用于常量的加载。</p>\n<p><code>devc.o</code>  和后端指定为 llvm 这种设备有关。</p>\n<p><code>lib0.c</code>  就是 ccompiler 生成的 C 源码：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include &lt;stdio.h>  // 从 1 到 23 行是固定输出代码（头文件和宏定义）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include &lt;stdlib.h></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#include  &lt;string.h></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#include &lt;tvm/runtime/c_runtime_api.h></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#include &lt;tvm/runtime/c_backend_api.h></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">#define CSOURCE_BINARY_OP_1D(p_ID_, p_OP_, p_DIM1_, p_DTYPE)       \\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      void p_ID_<span class=\"token punctuation\">(</span>p_DTYPE<span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> p_DTYPE<span class=\"token operator\">*</span> b<span class=\"token punctuation\">,</span> p_DTYPE<span class=\"token operator\">*</span> out<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    \\</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int64_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> p_DIM1_<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                        \\</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          out<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> p_OP_ b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                                    \\</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>                                                              \\</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">#define CSOURCE_BINARY_OP_2D(p_ID_, p_OP_, p_DIM1_, p_DIM2_, p_DTYPE)  \\</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      void p_ID_<span class=\"token punctuation\">(</span>p_DTYPE<span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> p_DTYPE<span class=\"token operator\">*</span> b<span class=\"token punctuation\">,</span> p_DTYPE<span class=\"token operator\">*</span> out<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>        \\</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int64_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> p_DIM1_<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                            \\</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int64_t j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> p_DIM2_<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span><span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                          \\</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            int64_t k <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> p_DIM2_ <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span>                                   \\</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            out<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> p_OP_ b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                                      \\</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span>                                                                \\</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>                                                                  \\</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>CSOURCE_BINARY_OP_2D<span class=\"token punctuation\">(</span>ccompiler_01_0<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">//</span> 根据AST生成所有Call调用的函数</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>CSOURCE_BINARY_OP_2D<span class=\"token punctuation\">(</span>ccompiler_01_1<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>CSOURCE_BINARY_OP_2D<span class=\"token punctuation\">(</span>ccompiler_01_2<span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>void ccompiler_01_<span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token operator\">*</span> x0<span class=\"token punctuation\">,</span> <span class=\"token builtin\">float</span><span class=\"token operator\">*</span> y0<span class=\"token punctuation\">,</span> <span class=\"token builtin\">float</span><span class=\"token operator\">*</span> out0<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token operator\">//</span> 执行过程</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token builtin\">float</span><span class=\"token operator\">*</span> buf_0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>malloc<span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token builtin\">float</span><span class=\"token operator\">*</span> buf_1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>malloc<span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token builtin\">float</span><span class=\"token operator\">*</span> buf_2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>malloc<span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  ccompiler_01_2<span class=\"token punctuation\">(</span>x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> buf_0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token operator\">//</span> 依次调用函数</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  ccompiler_01_1<span class=\"token punctuation\">(</span>x0<span class=\"token punctuation\">,</span> buf_0<span class=\"token punctuation\">,</span> buf_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  ccompiler_01_0<span class=\"token punctuation\">(</span>buf_1<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> buf_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  memcpy<span class=\"token punctuation\">(</span>out0<span class=\"token punctuation\">,</span> buf_2<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  free<span class=\"token punctuation\">(</span>buf_0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  free<span class=\"token punctuation\">(</span>buf_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  free<span class=\"token punctuation\">(</span>buf_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token builtin\">int</span> ccompiler_01_wrapper_<span class=\"token punctuation\">(</span>DLTensor<span class=\"token operator\">*</span> arg0<span class=\"token punctuation\">,</span>  <span class=\"token operator\">//</span> 函数封装</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tDLTensor<span class=\"token operator\">*</span> arg1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tDLTensor<span class=\"token operator\">*</span> out0<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  ccompiler_01_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>arg0<span class=\"token operator\">-</span><span class=\"token operator\">></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>arg1<span class=\"token operator\">-</span><span class=\"token operator\">></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>out0<span class=\"token operator\">-</span><span class=\"token operator\">></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">#ifdef __cplusplus</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>extern <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">#endif</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>TVM_DLL int32_t ccompiler_01<span class=\"token punctuation\">(</span>TVMValue<span class=\"token operator\">*</span> args<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token operator\">*</span> type_code<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span> num_args<span class=\"token punctuation\">,</span> TVMValue<span class=\"token operator\">*</span> out_value<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token operator\">*</span> out_type_code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  DLTensor<span class=\"token operator\">*</span> arg0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DLTensor<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>TVMValue<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v_handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  DLTensor<span class=\"token operator\">*</span> arg1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DLTensor<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>TVMValue<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v_handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  DLTensor<span class=\"token operator\">*</span> ret2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DLTensor<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>TVMValue<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v_handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  ccompiler_01_wrapper_<span class=\"token punctuation\">(</span>arg0<span class=\"token punctuation\">,</span>arg1<span class=\"token punctuation\">,</span>ret2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">#ifdef __cplusplus</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">#endif</span></pre></td></tr></table></figure><p>以上就是 ccompiler 编译器根据我们模型而生成的 C 源码。接下来结合 <code>x*(x+y)-y</code>  模型生成的 C 源码学习一下 ccompiler 代码：</p>\n<p><img loading=\"lazy\" data-src=\"1746967106488.jpg\" alt=\"ccompiler调用流程\"></p>\n<p>ccompiler 代码主要位于 <code>src/relay/backend/contrib/codegen_c/codegen.cc</code> ，它由函数 <code>CCompilerImpl()</code>  封装成一个 <code>Pass</code> 。</p>\n<p>从这个流程图中可以知道这个 pass 主要功能位于 <code>builder.VisitExpr()</code>  函数，它通过遍历抽象语法树 AST/Relay IR，生成 C 语言代码字符串。这个类是 <code>CodegenC</code> ，它继承自 TVM 提供的 AST/IR 遍历工具类 <code>ExprFunctor </code> 。</p>\n<p>我们知道遍历抽象语法树是编译器最基本的功能，为了方便，TVM 已经提供了用于遍历的工具类 <code>ExprFunctor </code> ，它主要提供了 VisitExpr 接口，并根据 Expr 的具体类型转发到对应的 VisitExpr_ 。我们只需要继承 <code>ExprFunctor </code> ，并重写 Expr 对应的 VisitExpr_ 方法，就可以方便得实现特定 Expr 的访问、修改等。大家可以阅读<a href=\"https://zhuanlan.zhihu.com/p/446976730\">《深度学习编译器 TVM 代码串讲》</a>以了解更多。</p>\n<p>再回到 ccompiler 编译器，其最主要重写的方法是 <code>VisitExpr_(const CallNode* call)</code> ，也就是将调用 Call 生成对应的 C 源代码。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Output<span class=\"token operator\">></span> <span class=\"token function\">VisitExpr_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> CallNode<span class=\"token operator\">*</span> call<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>ostringstream macro_stream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>ostringstream decl_stream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>ostringstream buf_stream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string func_name <span class=\"token operator\">=</span> ext_func_id_ <span class=\"token operator\">+</span> <span class=\"token string\">\"_\"</span> <span class=\"token operator\">+</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>func_idx<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// Make function declaration</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    macro_stream <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"CSOURCE_BINARY_OP_\"</span> <span class=\"token operator\">&lt;&lt;</span> call<span class=\"token operator\">-></span>args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"D(\"</span> <span class=\"token operator\">&lt;&lt;</span> func_name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 生成函数 CSOURCE_BINARY_OP_2D (ccompiler_01_0, -, 5, 5, float);</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>backend<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">IsOp</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">,</span> <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      macro_stream <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>backend<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">IsOp</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">,</span> <span class=\"token string\">\"subtract\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      macro_stream <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>backend<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">IsOp</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">,</span> <span class=\"token string\">\"multiply\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      macro_stream <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token function\">LOG</span><span class=\"token punctuation\">(</span>FATAL<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Unrecognized op\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">auto</span> in_shape <span class=\"token operator\">=</span> backend<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetShape</span><span class=\"token punctuation\">(</span>call<span class=\"token operator\">-></span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-></span><span class=\"token function\">checked_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> in_shape<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      macro_stream <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> in_shape<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">*</span> type_node <span class=\"token operator\">=</span> call<span class=\"token operator\">-></span><span class=\"token function\">checked_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">as</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>TensorTypeNode<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">ICHECK</span><span class=\"token punctuation\">(</span>type_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> dtype <span class=\"token operator\">=</span> <span class=\"token function\">GetDtypeString</span><span class=\"token punctuation\">(</span>type_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    macro_stream <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> dtype<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    macro_stream <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\");\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    func_decl_<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>macro_stream<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// Make function call when visiting arguments</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">bool</span> first <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 生成函数调用：ccompiler_01_2 (x0, y0, buf_0);</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    decl_stream <span class=\"token operator\">&lt;&lt;</span> func_name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> call<span class=\"token operator\">-></span>args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">auto</span> res <span class=\"token operator\">=</span> <span class=\"token function\">VisitExpr</span><span class=\"token punctuation\">(</span>call<span class=\"token operator\">-></span>args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> out <span class=\"token operator\">:</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>first<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>          decl_stream <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        first <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        decl_stream <span class=\"token operator\">&lt;&lt;</span> out<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string out <span class=\"token operator\">=</span> <span class=\"token string\">\"buf_\"</span> <span class=\"token operator\">+</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>buf_idx_<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 生成内存分配 ：  float* buf_0 = (float*) malloc (4 * 25);</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">auto</span> out_shape <span class=\"token operator\">=</span> backend<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetShape</span><span class=\"token punctuation\">(</span>call<span class=\"token operator\">-></span><span class=\"token function\">checked_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">int</span> out_size <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> out_shape<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      out_size <span class=\"token operator\">*=</span> out_shape<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    buf_stream <span class=\"token operator\">&lt;&lt;</span> dtype <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"* \"</span> <span class=\"token operator\">&lt;&lt;</span> out <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" = (\"</span> <span class=\"token operator\">&lt;&lt;</span> dtype <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*)malloc(4 * \"</span> <span class=\"token operator\">&lt;&lt;</span> out_size <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\");\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    buf_decl_<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>buf_stream<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    decl_stream <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> out <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\");\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    ext_func_body_<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>decl_stream<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// Update output buffer</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">// Note C codegen only handles TensorType. Therefore, we don't flatten</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// tuples and only return a single vaule.</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    Output output<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    output<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    output<span class=\"token punctuation\">.</span>dtype <span class=\"token operator\">=</span> dtype<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    output<span class=\"token punctuation\">.</span>need_copy <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    output<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> out_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>output<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>VisitExpr_(const CallNode* call)</code>  函数只是将一些 C 源码字符串，分门别类地存储起来，后续会将其整合成完整的 C 源码。比如流程中 <code>Finalize()</code>  函数，添加了头文件宏定义等，并将所有的代码整合起来。</p>\n<h1 id=\"后续编译和执行\"><a class=\"anchor\" href=\"#后续编译和执行\">#</a> 后续编译和执行</h1>\n<p>获得 <code>lib0.c</code> 、 <code>lib1.o</code> 、 <code>devc.o</code>  文件之后的流程：TVM 会生成如下指令，调用系统中的 C 语言编译器，将 <code>lib0.c</code> 、 <code>lib1.o</code> 、 <code>devc.o</code>  编译成动态库。可以见工程 python/tvm/runtime/module.py，函数 <code>export_library()</code>  结尾 <code>fcompile()</code>  函数调用的指令。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'/usr/bin/g++'</span>, <span class=\"token string\">'-shared'</span>, <span class=\"token string\">'-fPIC'</span>, <span class=\"token string\">'-o'</span>, <span class=\"token string\">'/home/user/tempworkspace/test_ccompiler.so'</span>, <span class=\"token string\">'/home/user/tempworkspace/lib0.c'</span>, <span class=\"token string\">'/home/user/tempworkspace/lib1.o'</span>, <span class=\"token string\">'/home/user/tempworkspace/devc.o'</span>, <span class=\"token string\">'-I/home/user/TVM/include'</span>, <span class=\"token string\">'-I/home/user/TVM/3rdparty/dlpack/include'</span>, <span class=\"token string\">'-I/home/user/TVM/3rdparty/dmlc-core/include'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>之后 TVM 重新加载动态库，并执行，具体还是见文章开头的 Python 脚本。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复！</p>\n",
            "tags": [
                "compile",
                "AI"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2025/02/05/aicompile04/",
            "url": "https://forcheetah.github.io/2025/02/05/aicompile04/",
            "title": "【AI编译】如何进行内存分配",
            "date_published": "2025-02-05T11:34:55.219Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本文讲解神经网络推理过程中的内存分配相关内容。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"tensor类型\"><a class=\"anchor\" href=\"#tensor类型\">#</a> Tensor 类型</h1>\n<p>不同的 tensor 有着不同的生命周期，神经网络推理过程中主要有三种 Tensor 类型：<br>\n1.<strong> 输入输出 tensor</strong><br>\n 输出 tensor 是下一节点的输入 tensor，它们一体两面，这种类型的 tensor 生命周期起于 “生产节点”，终于最后一个 “消费节点”。<br>\n2.<strong> 权重 tensor</strong><br>\n 权重 tensor 和算子绑定在一起，生命周期随着算子开始，也随算子结束。但也可能存在共享权重的情况，例如 tiling 操作产生的并行算子共享 Weight，<a href=\"https://tpumlir.org/docs/developer_manual/10_layergroup.html#mem\">算能 TPU 选择将 weight 常驻内存</a>。<br>\n3.<strong> 中间 tensor</strong><br>\n 中间 tensor 指的是算子计算时不得不开辟的临时空间，比如用来存储中间结果等，其大小和算子的具体实现有关。中间 tensor 的生命周期和权重 tensor 类似，随着算子开始，也随算子结束，但没有权重 tensor 的共享问题。</p>\n<h1 id=\"原地操作inplace-operation\"><a class=\"anchor\" href=\"#原地操作inplace-operation\">#</a> 原地操作（Inplace Operation）</h1>\n<p>原地覆盖不再需要的数据，不再开辟新的输出 tensor 空间。例如 Element-wise 算子、Relu 算子等可以在原地进行操作。</p>\n<p><img loading=\"lazy\" data-src=\"1738754981561.jpg\" alt=\"图 原地操作举例\"></p>\n<p>如图所示，B、C、D 三个 tensor 可以共用同一个内存空间。</p>\n<p><img loading=\"lazy\" data-src=\"1738755079647.jpg\" alt=\"图 原地操作举例2\"></p>\n<p>如图，当 B 的生命周期未结束时，C 不能共用 B 的内存空间。</p>\n<h1 id=\"内存共享memory-sharing\"><a class=\"anchor\" href=\"#内存共享memory-sharing\">#</a> 内存共享（Memory Sharing）</h1>\n<p>分析张量的生命周期，生命周期结束的张量及时释放，其所占据的空间可以被重复利用。拿算能 TPU 网站的图来举一个例子。如下图所示，这是一段简单的网络，有三个算子，分别是 Conv、Conv、和 Add。两个黑色的圆圈是权重，其余绿色的圆圈是输入输出 tensor 和中间 tensor。</p>\n<p><img loading=\"lazy\" data-src=\"1738755160616.jpg\" alt=\"图 算能TPU网络举例\"></p>\n<p>图源：<a href=\"https://tpumlir.org/docs/developer_manual/10_layergroup.html#mem\">算能 TPU 网络举例</a></p>\n<p><img loading=\"lazy\" data-src=\"1738755172523.jpg\" alt=\"图 算能TPU网络举例2\"></p>\n<p>图源：<a href=\"https://tpumlir.org/docs/developer_manual/10_layergroup.html#mem\">算能 TPU 内存生命周期</a></p>\n<p>上图展示了所有 tensor 的生命周期，三个算子的周期分别标记为 T2，T5 和 T7。</p>\n<ol>\n<li>0 号 tensor 是首个 Conv 节点的输入 tensor，W1 是权重，所以 T2 开始 T2 结束，及时释放；</li>\n<li>3 号 tensor 有两个消费节点，所以需要到 T7 才释放；<br>\n释放后的空间可以重复利用。</li>\n</ol>\n<h1 id=\"简单的分析规则\"><a class=\"anchor\" href=\"#简单的分析规则\">#</a> 简单的分析规则</h1>\n<p><img loading=\"lazy\" data-src=\"1738755220468.jpg\" alt=\"图 分析规则\"></p>\n<p>这里给出一个基本的 Tensor 生命周期分析流程，如图所示。可以通过这个流程来确定输入输出的生命周期。</p>\n<p>先初始化 tensor 的生命周期，它等于 tensor 的出度，也就是后面连着几个 “消费者节点”。<br>\n再按照执行顺序遍历网络结构，①如果当前节点的输入 Input 的生命周期大于 1，意味着它不能被释放，也不能被覆盖，需要为 Ouput 开辟新空间，同时 Input 生命周期减一；②如果当前节点的输入 Input 的生命周期等于 1，则进一步判断是否是 Inplace 节点；③如果不是 Inplace 节点，则仍需要为 Output 开辟空间，计算完成后 Input 可以释放；④是 Inplace 节点，则可以原地计算。</p>\n<h1 id=\"内存拼图游戏\"><a class=\"anchor\" href=\"#内存拼图游戏\">#</a> 内存拼图游戏</h1>\n<p>在完成网络的 Tensor 生命周期分析之后，就要尝试进行实际的内存分配，以确定设备内存是否足够放得下。建立一个坐标系，以横轴为时间 (Time)，纵轴为空间 (Addr)，把所有 tensor 作为一个图块拼进去，图块与图块之间不能有交叠，就像一个拼图游戏。<br>\n下图是算能 TPU 给出的内存分配例子，可供参考。不过这个图是以横轴为空间 (Addr)，纵轴为时间 (Time)。</p>\n<p><img loading=\"lazy\" data-src=\"1738755258225.jpg\" alt=\"图 算能TPU内存分配\"></p>\n<p>图源：<a href=\"https://tpumlir.org/docs/developer_manual/10_layergroup.html#mem\">算能 TPU 内存分配</a></p>\n<p>这个拼图游戏并没有看起来那么容易，当网络结构复杂的时候，tensor 大小多样，拼图的方式也多样。不同的拼图方式可能直接决定内存分配的成功与失败。这里举个简单的例子，如图所示：</p>\n<p><img loading=\"lazy\" data-src=\"1738755278680.jpg\" alt=\"图 内存分配例子\"></p>\n<p>假设有三个内存块需要分配，他们所占空间和生命周期都已经确定。设备内存只有 20 大小。假如按照左图的拼图方式，会发现图块③没有空间存放，超出内存限制。而采用右图的拼图方式，内存分配就顺利实现。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "compile",
                "AI"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2025/01/15/aicompile03/",
            "url": "https://forcheetah.github.io/2025/01/15/aicompile03/",
            "title": "【AI编译】layer-group之后如何tiling",
            "date_published": "2025-01-15T13:12:53.246Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇讲解笔者实现 tiling 算法的一些经验。<br>\n前述文章 <a href=\"https://forcheetah.github.io/2025/01/14/aicompile02/\">《如何进行 layer-group》</a>讲解了 layer group 的内容。<a href=\"https://forcheetah.github.io/2024/10/18/aicompile01/\">《Tiling 操作能优化哪些时间》</a>提到 Tiling 的概念和作用。感兴趣的话可以阅读。</p>\n<p>本篇文章参考过 <a href=\"https://baijiahao.baidu.com/s?id=1787593090401250411&amp;wfr=spider&amp;for=pc\">《超强干货！地平线编译器大牛的编译优化实践总结》</a>，<a href=\"https://github.com/Arm-China/Compass_Optimizer\">《Arm 周易编译器工程》</a>，<a href=\"https://tpumlir.org/docs/developer_manual/10_layergroup.html#group\">《算能 TPU layer group 讲解》</a>，<a href=\"https://www.bilibili.com/video/BV1wo4y1z7AG/\">《算能 TPU 视频讲解》</a> 等文章和工程，欢迎大家参考。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"回顾\"><a class=\"anchor\" href=\"#回顾\">#</a> 回顾</h1>\n<p><img loading=\"lazy\" data-src=\"1736946396882.jpg\" alt=\"回顾流程\"></p>\n<p>如图所示，AI 编译优化的基本流程是 1. 图优化 (算子融合，常量折叠等) 2. 拆分 (layer group 和 tiling) 3. 并行和调度。最后得到当前编译的时间消耗。</p>\n<h1 id=\"分支结构tiling\"><a class=\"anchor\" href=\"#分支结构tiling\">#</a> 分支结构 Tiling</h1>\n<p><img loading=\"lazy\" data-src=\"1736946520498.jpg\" alt=\"分支结构\"></p>\n<p>假设现在对某个 layer group 做 tiling，需要对当前这个 layer group 按照 tiling 块数构建平行分支。</p>\n<p>上图来自<a href=\"https://tpumlir.org/docs/developer_manual/10_layergroup.html#group\">《算能 TPU layer group 讲解》</a>。如图所示，含有三个卷积算子的 layer group ，将其 tiling 成四块，则 group 的图结构变成右边的形状，图上也表明了 tiling 之后 tensor 的大小。可以使用 crop 算子完成 tensor 的切分，使用 concat 算子实现 tensor 的合并。图中没有画出 crop 算子和 concat 算子。</p>\n<p>神经网络结构复杂多样，分支结构、多前序节点、多后续节点等给 tiling 的实际操作带来很大困难。根据前述的 layer group 动态搜索划分，我们可能需要在各种各样的结构上进行 tiling 操作。下图是一种较为复杂的分支结构在 tiling 前后的对比图，可以给 tiling 结构的创建带来更直观的感受。</p>\n<p><img loading=\"lazy\" data-src=\"1736946566779.jpg\" alt=\"复杂分支结构tiling\"></p>\n<p>这是一个虚构的、较为复杂的分支结构。中间彩色的五个节点是当前要做 tiling 的 layer group，而上方和下方是当前 layer group 的前序节点和后续节点。<br>\n为方便，只 tiling 成两块。</p>\n<p>tiling 后的结构如图右侧所示，原有彩色算子部分复制成两份；layer group 有几个输出端（当前 group 有两个输出端：Conv 和 Fc）就有几个 concat 节点。layer group 的输入端（Add 节点和 Relu 节点）前面要添加 crop 节点，当输入端有多个前序节点时（Add 有两个前序节点），每个都要添加 crop。</p>\n<p>大致的结构重建就是这个样子。在实际操作中可能还有些不同，例如为保持所有节点都只能有一个输出 tensor 的原则，Crop 节点不能输出两个 tensor。</p>\n<h1 id=\"tiling维度\"><a class=\"anchor\" href=\"#tiling维度\">#</a> Tiling 维度</h1>\n<p>现有方案基本都选择在 N H W，也就是批次、高度、宽度这三个维度上做 tiling。</p>\n<p>N（批次）方向分块是最简单的方案，可以随意划分，对整个网络的运行没有影响。但是也许模型在推理的时候批次只有 1，无法 tiling。所以批次方向不是在所有情况下都适用。</p>\n<p>高度和宽度方向 tiling，比批次方向稍复杂，需要重新 infer shape 和调整参数（下一节讲解），但好在原有的算子推理仍然适用。</p>\n<p>基本上不考虑 C（通道）方向 tiling。通道方向分块，不仅要调整权重偏置 tensor，还需要在算子运算后加减 tensor，破坏了原有算子推理。<br>\n现有方案基本支持批次、高度、宽度这三个维度上做 tiling。</p>\n<h1 id=\"tiling逆向推理\"><a class=\"anchor\" href=\"#tiling逆向推理\">#</a> Tiling 逆向推理</h1>\n<p>上面只完成了 layer group 在 tiling 之后的结构重建。想要实现模型的正确推理，还需要更新好多信息。</p>\n<h2 id=\"逆向shape-推理\"><a class=\"anchor\" href=\"#逆向shape-推理\">#</a> 逆向 shape 推理</h2>\n<p>推理 shape，在 tensor 分块后，维度大小自然需要更新。下图是一个简单的分支结构的 tensor shape 推理例子。</p>\n<p><img loading=\"lazy\" data-src=\"1736946730182.jpg\" alt=\"逆向推理\"></p>\n<p>图①是推理之前的网络结构，仅包含两个卷积算子（均为 3*3，pad=1）。图上已经标明了每个算子的输入输出 tensor 的大小。现在将此 group 从 H（高）维度 tiling 成两份，也就是输出端（Add 节点）的输出 tensor 设置为 5*10。</p>\n<p>从输出端（Add 节点）开始逆序推导各个算子的输入输出 shape。如图②，普通算子如 Add，输入 tensor 的 shape 于输出 tensor 相同。而 Conv 这样的算子，需要根据参数、所在位置、输出 shape 来计算输入 tensor 的 shape。例如图②中 Conv_2 的输入变成 [6,10]，参数中 pad 需要修改为 [1,0,1,1]。</p>\n<p>现在出现一个问题：从 Add 节点直接往前推，Conv_1 的输出应该是 [5,10]，而走 Add-&gt;Conv_2 路径，Conv_1 的输出应该是 [6,10]。Conv_1 不可能同时输出 [6,10] 和 [5,10] 两个 tensor。如何处理当前的歧义呢？</p>\n<p>也许增加一个 crop 节点是个可选的方法。如图③所示，增加一个新的 Crop 节点，将 Conv_1 的输出 tensor 从 [6,10] 变成 [5,10]。</p>\n<h2 id=\"逆向深度优先搜索\"><a class=\"anchor\" href=\"#逆向深度优先搜索\">#</a> 逆向深度优先搜索</h2>\n<p>从逆向 shape 推理过程的分析来看，更新 layer group 的 shape，需要从输出端开始，逆向深度优先搜索每个分支，更新 shape 信息，还得判断采用哪些信息（如上一节中 Conv_1 的输出是 [6,10] 还是 [5,10]）。</p>\n<p>逆向深度优先搜索每个分支的意思如下图所示：从输出端搜索到输入端的每一条通路。下图结构中有四条通路。</p>\n<p><img loading=\"lazy\" data-src=\"1736946743244.jpg\" alt=\"深度优先搜索\"></p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "compile",
                "AI"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2025/01/14/aicompile02/",
            "url": "https://forcheetah.github.io/2025/01/14/aicompile02/",
            "title": "【AI编译】如何进行layer-group",
            "date_published": "2025-01-14T12:09:18.353Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇介绍 AI 编译领域 layer-group 算法。</p>\n<p>本篇文章参考过 <a href=\"https://baijiahao.baidu.com/s?id=1787593090401250411&amp;wfr=spider&amp;for=pc\">《超强干货！地平线编译器大牛的编译优化实践总结》</a>，<a href=\"https://github.com/Arm-China/Compass_Optimizer\">《Arm 周易编译器工程》</a>，<a href=\"https://tpumlir.org/docs/developer_manual/10_layergroup.html#group\">《算能 TPU layer group 讲解》</a>，<a href=\"https://www.bilibili.com/video/BV1wo4y1z7AG/\">《算能 TPU 视频讲解》</a> 等文章和工程，欢迎大家参考。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"layer-group\"><a class=\"anchor\" href=\"#layer-group\">#</a> Layer group</h1>\n<p>如图所示，AI 编译优化的基本流程是 1. 图优化 (算子融合，常量折叠等) 2. 拆分 (layer group 和 tiling) 3. 并行和调度。最后得到当前编译的时间消耗。</p>\n<p><img loading=\"lazy\" data-src=\"1736856461365.jpg\" alt=\"如图1所示\"></p>\n<p>在 AI 编译领域，LayerGroup 指的是将神经网络中的多个层（layers (Operator) ）组合成一个逻辑单元或模块的过程。</p>\n<p>一般而言设备的运行内存很大，比如电脑的运行内存 16GB，但是它的速度比较慢，我们把它叫做 Global Memory。而做神经网络推理的专用 NPU 芯片，它的高速缓存速度很快，但是空间可能只有几 MB，我们把它叫做 Cache。我们无法将网络模型所有 layer 全部加载到 cache 中，那么意味着每个算子都需要 Cache 和外部 Global Memory 的交互，load 输入数据、store 结果。</p>\n<p>所以需要将网络拆分成小的 layer group。一般默认只有进入和退出 layer group 的时候，才需要和外部的 Global Memory 做 Load/Store 操作去交互。把需要的数据 load 进来，将结果数据 store 出去。layer group 减少了 Load/Store 操作，同时 layer group 也是后续 tiling、调度等操作的基本单元，降低了问题复杂度。</p>\n<h1 id=\"动态规划搜索\"><a class=\"anchor\" href=\"#动态规划搜索\">#</a> 动态规划搜索</h1>\n<p><img loading=\"lazy\" data-src=\"1736856461365.jpg\" alt=\"如图1所示\"></p>\n<p>还是这张图，如何划分 layer group 呢？图里面只有四个算子，可以 1,2 划分一组，3,4 划分一组；也可以 1 划为一组，2,3,4 划分另一组；甚至 1,2,3,4 全部划分为一组。不同的划分方式，最后得到的 Cost 也不同。<br>\n为了找到最优的划分方式，不得不搜索所有划分方案。</p>\n<p>假设网络有 n 层，则 n 层中间有 n-1 个间隔。选取 0 个间隔，也就是 n 层全部划分为一组，是 C (n-1, 0)；选取 1 个间隔，也就是分成两组，是 C (n-1,1)；选取 2 个间隔，也就是划分三组，是 C (n-1,2)；以此类推， C (n-1, 0)+C (n-1,1)+C (n-1,2)+……+C (n-1,n-1)，根据二项式定理，需要 2^(n-1) 次搜索。</p>\n<p>指数式增长计算量太大，是不可接受的。</p>\n<p>可以采用动态规划的思想来减少搜索次数。</p>\n<p>我们以 100 层网络为例。设 <code>f(n)</code>  为从第 0 层到达第 n 层最短用时。令  <code>f(-1) = 0</code>  ， <code>cost(x,y)</code>  为从 x 层到 y 层作为一个 group 的开销。则：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">98</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这就需要提前计算一个 cost table。</p>\n<p><img loading=\"lazy\" data-src=\"1736856527679.jpg\" alt=\"如图2所示\"></p>\n<p>cost table 如图所示。我们要做的就是以从 x 层到 y 层作为一个 group，计算开销 <code>cost(x,y)</code>  并保存下来。对于一个 n 层的网络来说，需要搜索的 layer group 数量为： 1+2+…+n = n (n+1)/2 。搜索次数从原来的 2^(n-1) 指数函数，已经降到幂函数。</p>\n<p>但是当网络层数过多时，搜索量还是很大，可以限制最大搜索长度，例如最长支持 50 层，那么 cost table 就变成下面这个样子：</p>\n<p><img loading=\"lazy\" data-src=\"1736856542354.jpg\" alt=\"如图3所示\"></p>\n<p>现在对于 n 层网络，搜索数量降到 50*n 。</p>\n<p>还可以启发式的剪枝优化，优化掉明显不会有收益的分支，进一步降低搜索的时间消耗。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！global_info)</p>\n<p><code>runtime_mod</code></p>\n",
            "tags": [
                "compile",
                "AI"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/10/18/aicompile01/",
            "url": "https://forcheetah.github.io/2024/10/18/aicompile01/",
            "title": "【AI编译】Tiling操作能优化什么时间",
            "date_published": "2024-10-18T13:44:56.351Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇讲解 Tiling 操作为什么能够优化神经网络推理。</p>\n<p>也可以参考 <a href=\"https://www.hiascend.com/developer/techArticles/20240920-1?envFlag=1\">《Ascend C 算子优化实用技巧 04——Tiling 优化》</a></p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"什么是tiling\"><a class=\"anchor\" href=\"#什么是tiling\">#</a> 什么是 tiling</h1>\n<p>无法完整的容纳算子的输入与输出，需要每次搬运一部分输入进行计算然后搬出，再搬运下一部分输入进行计算，直到得到完整的最终结果，这个数据切分、分块计算的过程称之为 Tiling，切分数据的算法称为 Tiling 算法或者 Tiling 策略。</p>\n<h1 id=\"tile算子和tiling的区别\"><a class=\"anchor\" href=\"#tile算子和tiling的区别\">#</a> tile 算子和 tiling 的区别</h1>\n<p>我们先问一问语言大模型两者的区别：</p>\n<h2 id=\"神经网络推理中的tile算子\"><a class=\"anchor\" href=\"#神经网络推理中的tile算子\">#</a> 神经网络推理中的 Tile 算子</h2>\n<p>在神经网络中，会发现 tile 作为一个节点算子出现。Tile 算子（或称为 Tiling 操作）是一种张量操作，它的功能是将输入张量沿着指定的维度重复一定次数。该算子需要指定两个参数：</p>\n<ul>\n<li>1.reps<br>\n（重复次数）：这是一个整数列表，定义了每个维度上的重复次数。列表的长度必须与输入张量的维度相匹配，或者至少与你想要扩展的那些维度相匹配。如果对于某个维度你不希望进行复制，可以设置为 1。</li>\n<li>2.axis<br>\n（轴 / 维度）：虽然某些框架可能不需要显式指定轴，因为它们可以通过 reps 的结构来推断，但有些情况下需要明确指出哪些维度应该被复制。</li>\n</ul>\n<p>例如，假设有一个形状为 (2, 3) 的二维张量，并且你想沿第一个维度（行方向）重复两次，沿第二个维度（列方向）重复三次，那么你可以使用 Tile 算子并设置 reps=[2, 3]。这样操作后，输出张量将会是一个形状为 (4, 9) 的新张量，其中原始张量的内容被按照指定的方式进行了复制。</p>\n<p>在不同的深度学习库中，Tile 算子的实现可能会有所不同。例如，在 TensorFlow 中，它是 tf.tile () 函数；而在 PyTorch 中，则对应的是 torch.tile () 或者 .repeat () 方法。每种实现都有其特定的语法和用法，但核心概念是一致的。</p>\n<h2 id=\"ai编译优化中的tiling操作\"><a class=\"anchor\" href=\"#ai编译优化中的tiling操作\">#</a> AI 编译优化中的 tiling 操作</h2>\n<p>在 AI 编译领域，特别是针对深度学习模型的优化过程中，“tiling”（平铺）操作是指一种将计算任务分解成更小、更易于管理的子任务的技术。这种技术通常用于提高计算效率和内存使用效率，尤其是在处理大规模数据集或高维度张量时。</p>\n<p>Tiling 的主要目的是：</p>\n<ul>\n<li>1. 减少内存访问开销：通过将大块数据划分为较小的 “瓦片”，可以将这些小块数据加载到高速缓存中，从而减少对外部存储器的访问次数。这有助于利用 CPU 或 GPU 的高速缓存来加速计算过程。</li>\n<li>2. 并行化处理：每个 “瓦片” 可以独立处理，这意味着它们可以在多核处理器上并行执行，或者在 GPU 等并行计算架构上高效地分发给不同的线程或流处理器。</li>\n<li>3. 更好地利用硬件资源：通过适当调整瓦片大小，可以确保计算单元能够被充分利用，同时避免因单个任务过大导致的资源浪费。</li>\n<li>4. 改善局部性：合理设置的瓦片尺寸可以帮助保持良好的空间局部性和时间局部性，使得数据在被处理前已经被预取到了更快的存储层次中。</li>\n<li>5. 降低峰值内存需求：对于某些运算来说，一次性加载整个输入可能需要大量的内存。通过 tilling，我们可以仅处理当前所需的那部分数据，从而降低了对系统内存的需求。<br>\n例如，在卷积神经网络 (CNN) 中，一个常见的做法是将图像分割成多个小块，并且只在这些小块上进行卷积运算，而不是在整个图像上进行。这样做不仅可以减少每次计算所需的数据量，还能促进更好的并行化。</li>\n</ul>\n<p>Tiling 策略的选择取决于具体的硬件特性以及所处理数据的特点。在实际应用中，通常需要根据目标平台和具体应用场景来精心设计合适的 tilling 方案。一些自动化的工具和框架如 TensorFlow XLA、TVM (Tensor Virtual Machine) 等提供了高级别的 API 来帮助开发者实现高效的 tilling 优化。</p>\n<h2 id=\"两个tile是完全不同的概念\"><a class=\"anchor\" href=\"#两个tile是完全不同的概念\">#</a> 两个 tile 是完全不同的概念</h2>\n<p>两个 “tile” 概念虽然名字相似，但它们在不同的上下文中使用，并且具有不同的含义和用途：</p>\n<p>1. 神经网络中的 Tile 算子：</p>\n<ul>\n<li>在这个上下文中，Tile 是指一种张量操作，它将输入张量沿着指定维度重复一定次数。</li>\n<li>它主要用于数据处理阶段，例如当你需要复制或扩展张量以匹配某些特定的尺寸要求时。</li>\n<li>例子包括 TensorFlow 中的 tf.tile () 函数或 PyTorch 中的.repeat () 方法。</li>\n</ul>\n<p>2.AI 编译领域的 Tiling（平铺）：</p>\n<ul>\n<li>这里的 Tiling 是一种优化技术，用于将计算任务分解成更小的、可管理的部分，以便于更好地利用硬件资源，如缓存和并行计算能力。</li>\n<li>它通常是在模型优化阶段使用的，目的是提高计算效率、减少内存访问开销、促进并行化处理等。</li>\n<li>Tiling 可以应用于各种类型的运算，比如卷积运算中将图像分割成小块来处理。</li>\n</ul>\n<p>总结来说，尽管两者都涉及到了 “复制” 或 “分块” 的概念，但是神经网络中的 Tile 算子更多地关注于数据结构的操作，而 AI 编译领域的 Tiling 则是一个优化策略，旨在提升程序执行的性能。这两个概念分别属于数据处理和性能优化的不同领域。</p>\n<h1 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h1>\n<p>一台电脑的内存很大，现在主流配置 16GB，甚至 32GB，虽然空间很大，但是它的速度比较慢，我们把它叫做 Global Memory。</p>\n<p>专用的 NPU 芯片用来做神经网络推理，它的高速缓存速度很快，但是空间可能只有几 MB，我们把它叫做 Cache。</p>\n<p>为了获取更快的运算速度，tensor 需要加载到 Cache 中进行计算，但是当算子需要占用的空间超过 Cache 的空间时，需要不断的进行数据搬运，导致算子搬入或搬出数据变为算子整个运行过程的性能瓶颈。</p>\n<p><img loading=\"lazy\" data-src=\"1729258859529.jpg\" alt=\"AI\"></p>\n<p>如上图所示：</p>\n<p>假设现在有 300 个数，需要连续经过三个 add 算子进行加操作，分别是 <code>add_1</code> ， <code>add_2</code>  和 <code>add_3</code> ，最终仍然输出 300 个数。</p>\n<p>但是 Cache 只能够存放 100 个数。</p>\n<p>在没有 tiling 操作的情况下：计算 <code>add_1</code>  时，需要将 (0,100) 个数 load 到 Cache，计算完毕后，需要将这 (0,100) store 回 global memory，为下一百个数腾出空间【接下来的计算 Cache 未命中】；然后加载 load (100,200) 的数据，继续计算 <code>add_1</code> 。以此类推，在没有 tiling 操作的情况下，计算完 <code>add_1</code> ， <code>add_2</code>  和 <code>add_3</code>  需要 load 和 store 操作的数据都是 900。</p>\n<p>在 tiling 的情况下，会提前将数据分块，分成 (0,100)，(100,200) 和 (200,300)。加载 (0,100)，接连计算 <code>add_1</code> ， <code>add_2</code>  和 <code>add_3</code> 。计算 <code>add_2</code>  时发现 Cache 中的数据正是所需要的数据【Cache 命中】。计算流程如图所示，整个计算下来，load 和 store 操作的数据都是 300。</p>\n<p><img loading=\"lazy\" data-src=\"a.jpg\" alt=\"图片\"></p>\n<p>tiling 操作提高了 cache 的命中率，避免了频繁搬运带来的时间损耗。<br>\n从图上看，同一 group 中包含的超出 cache 算子越多，tiling 带来的收益越大。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "compile",
                "AI"
            ]
        }
    ]
}