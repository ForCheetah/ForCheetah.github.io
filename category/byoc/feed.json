{
    "version": "https://jsonfeed.org/version/1",
    "title": "Пусть этот камень будет более крепким, чем человек • All posts by \"byoc\" category",
    "description": "有自己的博客很帅，但是我很懒，要命！！！",
    "home_page_url": "https://forcheetah.github.io",
    "items": [
        {
            "id": "https://forcheetah.github.io/2025/10/06/tvmByoc02/",
            "url": "https://forcheetah.github.io/2025/10/06/tvmByoc02/",
            "title": "【BYOC】TVM切分子图",
            "date_published": "2025-10-06T08:19:48.714Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇通过举例说明 TVM 切分子图的方法。</p>\n<p>TVM 切分子图，是将整个图中的部分算子拆分出来，包装为一个函数。TVM 把它称为复合函数。切分子图有很多用处，比如算子融合、跨平台优化、做 layergroup 等。TVM 为子图切分提供了好用的工具，本篇文章将结 <a href=\"https://forcheetah.github.io/2025/05/11/tvmByoc01/\">《【BYOC】TVM 添加自定义编译器 ccompiler》</a>，来介绍一下如何使用 TVM 的工具切分子图，令自定义编译器 ccompiler 支持的子图在 ccompiler 执行，不支持的子图在 CPU 运行的。</p>\n<p>参考链接：<a href=\"https://forcheetah.github.io/2025/05/11/tvmByoc01/\">《【BYOC】TVM 添加自定义编译器 ccompiler》</a></p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"tvm工具\"><a class=\"anchor\" href=\"#tvm工具\">#</a> TVM 工具</h1>\n<p>TVM 需要一个注释器，为需要切分的图结构的起止地点标记出来，之后 TVM 就可以帮助将子图切分出来。<br>\n例如 TVM 支持 这个 DNNL 的外部编译器，那么可以使用  <code>mod = transform.AnnotateTarget([&quot;dnnl&quot;])(ref_mod)</code>  这个注释器来标记 DNNL 支持的子图结构（TVM 已经提供了 DNNL 的注释器），然后使用  <code>mod = transform.PartitionGraph()(mod)</code>  将子图切分出来。</p>\n<p>我们以 “将 ccompiler 支持的子图切分出来” 这个目标为例，介绍这个过程。<br>\nccompiler 只支持   <code>+ - *</code>  三个算子，目标是将所有 ccompiler 支持的算子切分成子图，交给 ccompiler 编译和计算，其他算子交给 CPU 计算。<br>\n如下图所示：<br>\n这个图中出现了一个  <code>/</code>  算子，需要将该算子留下来，其余算子切成子图，交给 ccompiler 进行编译和计算。</p>\n<p><img loading=\"lazy\" data-src=\"1759738691631.jpg\" alt=\"含有除法的图结构\"></p>\n<p>原图结构如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fn <span class=\"token punctuation\">(</span>%x: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span>, %w0: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span>, %w1: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, flot32<span class=\"token punctuation\">]</span>, %w2: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span>, %w3: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span>, %w4: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  %0 <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span>%x, %w1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  %1 <span class=\"token operator\">=</span> multiply<span class=\"token punctuation\">(</span>%x, %w0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  %2 <span class=\"token operator\">=</span> subtract<span class=\"token punctuation\">(</span>%0, %w2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  %3 <span class=\"token operator\">=</span> divide<span class=\"token punctuation\">(</span>%1, %2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  %4 <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span>%3, %w3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  divide<span class=\"token punctuation\">(</span>%4, %w4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接下来需要将 ccompiler 支持的子图结构标记出来，标记原理如图所示：</p>\n<p><img loading=\"lazy\" data-src=\"1759738769337.jpg\" alt=\"标记子图的起始和终止节点\"></p>\n<p>图示比较清楚：将连续的、支持的算子，用 <code>begin</code>  和  <code>end</code>  隔离出来，形成一个子图。注释器的参考写法、调用例子，可以参考 TVM 官方代码。</p>\n<p>添加注释之后的图结构：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>def @main<span class=\"token punctuation\">(</span>%x: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span>, %w0: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span>, %w1: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, flot32<span class=\"token punctuation\">]</span>, %w2: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span>, %w3: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span>, %w4: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  %0 <span class=\"token operator\">=</span> annotation.compiler_begin<span class=\"token punctuation\">(</span>%x, meta<span class=\"token punctuation\">[</span>relay.attrs.CompilerAttrs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  %1 <span class=\"token operator\">=</span> annotation.compiler_begin<span class=\"token punctuation\">(</span>%w0, meta<span class=\"token punctuation\">[</span>relay.attrs.CompilerAttrs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  %2 <span class=\"token operator\">=</span> multiply<span class=\"token punctuation\">(</span>%0, %1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  %3 <span class=\"token operator\">=</span> annotation.compiler_begin<span class=\"token punctuation\">(</span>%x, meta<span class=\"token punctuation\">[</span>relay.attrs.CompilerAttrs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  %4 <span class=\"token operator\">=</span> annotation.compiler_begin<span class=\"token punctuation\">(</span>%w1, meta<span class=\"token punctuation\">[</span>relay.attrs.CompilerAttrs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  %5 <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span>%3, %4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  %6 <span class=\"token operator\">=</span> annotation.compiler_begin<span class=\"token punctuation\">(</span>%w2, meta<span class=\"token punctuation\">[</span>relay.attrs.CompilerAttrs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  %7 <span class=\"token operator\">=</span> subtract<span class=\"token punctuation\">(</span>%5, %6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  %8 <span class=\"token operator\">=</span> annotation.compiler_end<span class=\"token punctuation\">(</span>%2, meta<span class=\"token punctuation\">[</span>relay.attrs.CompilerAttrs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  %9 <span class=\"token operator\">=</span> annotation.compiler_end<span class=\"token punctuation\">(</span>%7, meta<span class=\"token punctuation\">[</span>relay.attrs.CompilerAttrs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  %10 <span class=\"token operator\">=</span> divide<span class=\"token punctuation\">(</span>%8, %9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  %11 <span class=\"token operator\">=</span> annotation.compiler_begin<span class=\"token punctuation\">(</span>%10, meta<span class=\"token punctuation\">[</span>relay.attrs.CompilerAttrs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  %12 <span class=\"token operator\">=</span> annotation.compiler_begin<span class=\"token punctuation\">(</span>%w3, meta<span class=\"token punctuation\">[</span>relay.attrs.CompilerAttrs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  %13 <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span>%11, %12<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  %14 <span class=\"token operator\">=</span> annotation.compiler_end<span class=\"token punctuation\">(</span>%13, meta<span class=\"token punctuation\">[</span>relay.attrs.CompilerAttrs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  divide<span class=\"token punctuation\">(</span>%14, %w4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>添加注释之后，直接调用 TVM 的切分工具： <code>mod = transform.PartitionGraph()(mod)</code> ，实现子图切分。</p>\n<p>切分之后的结构：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>def @main<span class=\"token punctuation\">(</span>%x: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */, %w0: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */, %w1: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */, %w2: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */, %w3: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */, %w4: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */<span class=\"token punctuation\">)</span> -<span class=\"token operator\">></span> Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  %0 <span class=\"token operator\">=</span> @tvmgen_default_ccompiler_main_0<span class=\"token punctuation\">(</span>%x, %w0<span class=\"token punctuation\">)</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  %1 <span class=\"token operator\">=</span> @tvmgen_default_ccompiler_main_2<span class=\"token punctuation\">(</span>%x, %w1, %w2<span class=\"token punctuation\">)</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  %2 <span class=\"token operator\">=</span> divide<span class=\"token punctuation\">(</span>%0, %1<span class=\"token punctuation\">)</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  %3 <span class=\"token operator\">=</span> @tvmgen_default_ccompiler_main_5<span class=\"token punctuation\">(</span>%2, %w3<span class=\"token punctuation\">)</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  divide<span class=\"token punctuation\">(</span>%3, %w4<span class=\"token punctuation\">)</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>def @tvmgen_default_ccompiler_main_0<span class=\"token punctuation\">(</span>%ccompiler_0_i0: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */, %ccompiler_0_i1: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */, <span class=\"token assign-left variable\">Compiler</span><span class=\"token operator\">=</span><span class=\"token string\">\"ccompiler\"</span>, <span class=\"token assign-left variable\">Primitive</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>, <span class=\"token assign-left variable\">Inline</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>, <span class=\"token assign-left variable\">global_symbol</span><span class=\"token operator\">=</span><span class=\"token string\">\"tvmgen_default_ccompiler_main_0\"</span><span class=\"token punctuation\">)</span> -<span class=\"token operator\">></span> Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  multiply<span class=\"token punctuation\">(</span>%ccompiler_0_i0, %ccompiler_0_i1<span class=\"token punctuation\">)</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>def @tvmgen_default_ccompiler_main_2<span class=\"token punctuation\">(</span>%ccompiler_2_i0: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */, %ccompiler_2_i1: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */, %ccompiler_2_i2: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */, <span class=\"token assign-left variable\">Compiler</span><span class=\"token operator\">=</span><span class=\"token string\">\"ccompiler\"</span>, <span class=\"token assign-left variable\">Primitive</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>, <span class=\"token assign-left variable\">Inline</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>, <span class=\"token assign-left variable\">global_symbol</span><span class=\"token operator\">=</span><span class=\"token string\">\"tvmgen_default_ccompiler_main_2\"</span><span class=\"token punctuation\">)</span> -<span class=\"token operator\">></span> Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  %4 <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span>%ccompiler_2_i0, %ccompiler_2_i1<span class=\"token punctuation\">)</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  subtract<span class=\"token punctuation\">(</span>%4, %ccompiler_2_i2<span class=\"token punctuation\">)</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>def @tvmgen_default_ccompiler_main_5<span class=\"token punctuation\">(</span>%ccompiler_5_i0: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */, %ccompiler_5_i1: Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */, <span class=\"token assign-left variable\">Compiler</span><span class=\"token operator\">=</span><span class=\"token string\">\"ccompiler\"</span>, <span class=\"token assign-left variable\">Primitive</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>, <span class=\"token assign-left variable\">Inline</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>, <span class=\"token assign-left variable\">global_symbol</span><span class=\"token operator\">=</span><span class=\"token string\">\"tvmgen_default_ccompiler_main_5\"</span><span class=\"token punctuation\">)</span> -<span class=\"token operator\">></span> Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  add<span class=\"token punctuation\">(</span>%ccompiler_5_i0, float32<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  add<span class=\"token punctuation\">(</span>%ccompiler_5_i0, %ccompiler_5_i1<span class=\"token punctuation\">)</span> /* <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">=</span>Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>, <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, float32<span class=\"token punctuation\">]</span> */</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到三个子图 <code>@tvmgen_default_ccompiler_main_0</code> ， <code>@tvmgen_default_ccompiler_main_2</code> ， <code>@tvmgen_default_ccompiler_main_5</code>  用单独的函数进行包装，在主函数中进行调用。</p>\n<p>可以通过 TVM 官方例子来学习如何写这个注释器。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复！</p>\n",
            "tags": [
                "compile",
                "AI"
            ]
        }
    ]
}