{
    "version": "https://jsonfeed.org/version/1",
    "title": "Пусть этот камень будет более крепким, чем человек • All posts by \"tvm\" category",
    "description": "有自己的博客很帅，但是我很懒，要命！！！",
    "home_page_url": "https://forcheetah.github.io",
    "items": [
        {
            "id": "https://forcheetah.github.io/2024/10/17/tvm03/",
            "url": "https://forcheetah.github.io/2024/10/17/tvm03/",
            "title": "【TVM】通过代码学习编译流程【3】模型编译",
            "date_published": "2024-10-17T12:03:36.801Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本系列文章将从代码和流程图入手，详细介绍 TVM AI 编译器的编译流程。本文章为第三篇，对应的 TVM 版本为当前最新版本 1.7。</p>\n<p>网络上有不少 TVM 工程的教程资源，如果本博客也是其他教程的简单重复的话，则网络的角落里又多了一份纯粹的空间占用者。所以我在想，本文章有什么特点才值得一看呢？我觉得有两个优点: 1、本文从代码出发，不会泛泛而谈，能够从细节了解 TVM；2、自认为结构流程图画的不错，能够从整体上把握 TVM 的脉络。所以，也许值得一看呢。</p>\n<p>本篇文章介绍 TVM 对模型的编译流程。文章 <a href=\"https://forcheetah.github.io/2024/10/13/tvm02/\">《【TVM】通过代码学习编译流程【2】模型转换》</a> 已经介绍了 onnx 模型转换为 TVM 高级中间表示 Relay IRModule 的过程，得到了 Relay IRModule。本篇文章则介绍该模型后续的编译从 Relay IRModule 转换为 <code>GraphExecutorFactory</code>  的过程。</p>\n<p>因为代码量巨大，模型编译会分成若干篇文章进行解析。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"python脚本\"><a class=\"anchor\" href=\"#python脚本\">#</a> Python 脚本</h1>\n<p>这里提供一个简单的 Python 脚本，调用 TVM Python 前端，实现 onnx 模型的编译过程。tvm 通过代码学习编程流程系列文章将基本采用这个脚本帮助追踪代码。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> onnx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> tvm<span class=\"token punctuation\">.</span>relay <span class=\"token keyword\">as</span> relay</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> tvm</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> tvm<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> graph_executor</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">######################################    路径信息    ##########################################</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>model_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/resnet18.onnx\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>save_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/pythonSave/\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>onnx_model <span class=\"token operator\">=</span> onnx<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>model_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">##################################    图片信息    ##############################################</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>img_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/.tvm_test_data/data/imagenet_cat.png\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Resize it to 224x224</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>resized_image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>img_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>asarray<span class=\"token punctuation\">(</span>resized_image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># Our input image is in HWC layout while ONNX expects CHW input, so convert the array</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>img_data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Normalize according to the ImageNet input specification</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>imagenet_mean <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.485</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.406</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>imagenet_stddev <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.229</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.225</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>norm_img_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>img_data <span class=\"token operator\">/</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> imagenet_mean<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> imagenet_stddev</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># Add the batch dimension, as we are expecting 4-dimensional input: NCHW.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>norm_img_data<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">####################################     模型编译     ###########################################</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>input_name <span class=\"token operator\">=</span> <span class=\"token string\">\"data\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>target <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>Target<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>shape_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>input_name<span class=\"token punctuation\">:</span> img_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>mod<span class=\"token punctuation\">,</span> params <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>frontend<span class=\"token punctuation\">.</span>from_onnx<span class=\"token punctuation\">(</span>onnx_model<span class=\"token punctuation\">,</span> shape_dict<span class=\"token punctuation\">,</span> export_node_renamed_model_path<span class=\"token operator\">=</span>save_path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建 IRModule  高级 Relay IR</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">with</span> tvm<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>PassContext<span class=\"token punctuation\">(</span>opt_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    lib <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> target<span class=\"token operator\">=</span>target<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 创建 GraphExecutorFactoryModule  </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#######################################     模型保存      ########################################</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># save</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># 保存编译后的库文件（.so）</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>lib_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.so\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>lib<span class=\"token punctuation\">.</span>get_lib<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>export_library<span class=\"token punctuation\">(</span>lib_fname<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># 保存模型参数（.params）</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>params_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.params\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>params_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> param_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    param_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>relay<span class=\"token punctuation\">.</span>save_param_dict<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_params<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># 保存 JSON 格式的计算图（.json）</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>json_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.json\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>json_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> json_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    json_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_executor_config<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>dev <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>module <span class=\"token operator\">=</span> graph_executor<span class=\"token punctuation\">.</span>GraphModule<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">[</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># graph_executor.GraphModule</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">############################       运行    ##########################################</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>module<span class=\"token punctuation\">.</span>set_input<span class=\"token punctuation\">(</span>input_name<span class=\"token punctuation\">,</span> img_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>module<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>output_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>tvm_output <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>get_output<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tvm_output<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"tvm编译\"><a class=\"anchor\" href=\"#tvm编译\">#</a> TVM 编译</h1>\n<p>下面的函数实现了 TVM 的编译过程。该过程的输入 <code>mod, target=target, params=params</code>  分别是 Relay IRModule 中间表示， <code>target</code>  目标设备， <code>params</code>  参数。</p>\n<p><code>params</code>  参数在上一篇文章中有讲到， <code>freeze_params=True</code>  的情况下该 <code>params</code>  为空的字典。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> tvm<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>PassContext<span class=\"token punctuation\">(</span>opt_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    lib <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> target<span class=\"token operator\">=</span>target<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 创建 GraphExecutorFactoryModule</span></pre></td></tr></table></figure><p>下图是 <code>relay.build()</code>  函数的总体流程图。</p>\n<p><img loading=\"lazy\" data-src=\"1729165916609.jpg\" alt=\"总体流程图\"></p>\n<h2 id=\"pass上下文-passcontext\"><a class=\"anchor\" href=\"#pass上下文-passcontext\">#</a> Pass 上下文   PassContext</h2>\n<p><code>Pass</code> ：在编译器设计中，“pass” 通常指的是编译过程中的一轮或多轮处理。一个 “pass” 是指对源代码或者其某种表示形式（如抽象语法树或中间表示）进行一次完整的扫描或处理。</p>\n<p><code>with tvm.transform.PassContext(opt_level=3)</code>  代码初始化了 TVM 转换 Pass 的上下文。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token decorator annotation punctuation\">@tvm<span class=\"token punctuation\">.</span>_ffi<span class=\"token punctuation\">.</span>register_object</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transform.PassContext\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PassContext</span><span class=\"token punctuation\">(</span>tvm<span class=\"token punctuation\">.</span>runtime<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"The basis where a Relay optimization/analysis runs on.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Each pass context contains a number of auxiliary information that is used</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    to help an optimization pass. Such information includes the error reporter</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    to record the errors of during the optimization, etc.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    opt_level : Optional[int]</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        The optimization level of this pass.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    required_pass : Optional[Union[List[str], Set[str], Tuple[str]]]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        The list of passes that are required by a certain pass.</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    disabled_pass : Optional[Union[List[str], Set[str], Tuple[str]]]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        The list of passes that are disabled.</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    instruments : Optional[Sequence[PassInstrument]]</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        The list of pass instrument implementations.</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    config : Optional[Dict[str, Object]]</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        Additional configurations for specific passes.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    trace: Optional[relax.tuning.Trace]</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        Initial trace for trace mode.</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    trace_stack: Optional[List[relax.tuning_api.Trace]]</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        Initial trace stack for trace mode.</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    make_traceable: Optional[List[str]]</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        List of passes to make traceable.</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    num_evals: int</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        initial number of evaluations conducted in the pipeline.</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    tuning_api_database: Optional[relax.tuning_api.JSONDatabase]</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    \"\"\"</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        opt_level<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        required_pass<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        disabled_pass<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        instruments<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        config<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        trace<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        trace_stack<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        make_traceable<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        num_evals<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        tuning_api_database<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        required <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>required_pass<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> required_pass <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>required<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">raise</span> TypeError<span class=\"token punctuation\">(</span><span class=\"token string\">\"required_pass is expected to be the type of \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"list/tuple/set.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        disabled <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>disabled_pass<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> disabled_pass <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>disabled<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">raise</span> TypeError<span class=\"token punctuation\">(</span><span class=\"token string\">\"disabled_pass is expected to be the type of \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"list/tuple/set.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        instruments <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>instruments<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> instruments <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>instruments<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">raise</span> TypeError<span class=\"token punctuation\">(</span><span class=\"token string\">\"instruments is expected to be the type of \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"list/tuple/set.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\"># Convert to Map&lt;String, bool></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\"># TODO(sunggg): Replace this to Set equivalent if exists</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        make_traceable <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span> <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> make_traceable<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">if</span> make_traceable <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> trace_stack<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            trace_stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>trace<span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> trace <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        config <span class=\"token operator\">=</span> config <span class=\"token keyword\">if</span> config <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        self<span class=\"token punctuation\">.</span>__init_handle_by_constructor__<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            _ffi_transform_api<span class=\"token punctuation\">.</span>PassContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            opt_level<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            required<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            disabled<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            instruments<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            config<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            trace_stack<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            make_traceable<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            num_evals<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            tuning_api_database<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上述代码可以看到，PassContext 在初始化的时候， <code>opt_level</code> pass 优化级别，可以指定  <code>required_pass</code>  需要的 pass 列表， <code>disabled_pass</code>  需要排除的 pass 列表等。</p>\n<p>之后调用 <code>self.__init_handle_by_constructor__()</code>  函数创建 PassContext 类。其中 <code>_ffi_transform_api.PassContext</code>  是构造函数，其余参数是构造函数的参数。 <code>self.__init_handle_by_constructor__()</code>  调用 C++ 后端注册函数 <code>&quot;transform.PassContext&quot;</code> ，该函数如下所示：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">TVM_REGISTER_GLOBAL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transform.PassContext\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">set_body_typed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> opt_level<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> required<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> disabled<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                       Array<span class=\"token operator\">&lt;</span>instrument<span class=\"token double-colon punctuation\">::</span>PassInstrument<span class=\"token operator\">></span> instruments<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                       Optional<span class=\"token operator\">&lt;</span>Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> ObjectRef<span class=\"token operator\">>></span> config<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>ObjectRef<span class=\"token operator\">></span> trace_stack<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                       Optional<span class=\"token operator\">&lt;</span>Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Bool<span class=\"token operator\">>></span> make_traceable<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num_evals<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                       Optional<span class=\"token operator\">&lt;</span>ObjectRef<span class=\"token operator\">></span> tuning_api_database<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">auto</span> pctx <span class=\"token operator\">=</span> <span class=\"token class-name\">PassContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      pctx<span class=\"token operator\">-></span>opt_level <span class=\"token operator\">=</span> opt_level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      pctx<span class=\"token operator\">-></span>required_pass <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>required<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      pctx<span class=\"token operator\">-></span>disabled_pass <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>disabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      pctx<span class=\"token operator\">-></span>instruments <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>instruments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        pctx<span class=\"token operator\">-></span>config <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      pctx<span class=\"token operator\">-></span>trace_stack <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>trace_stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      pctx<span class=\"token operator\">-></span>make_traceable <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>make_traceable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      pctx<span class=\"token operator\">-></span>num_evals <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>num_evals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      pctx<span class=\"token operator\">-></span>tuning_api_database <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>tuning_api_database<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token class-name\">PassConfigManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">Legalize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>pctx<span class=\"token operator\">-></span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">return</span> pctx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>通过 <code>TVM_REGISTER_GLOBAL(&quot;transform.PassContext&quot;)</code>  注册为全局函数，接收所有参数，通过 <code>auto pctx = PassContext::Create();</code>  创建 <code>PassContext</code>  类。</p>\n<h2 id=\"编译过程-bld_mod-buildmodule\"><a class=\"anchor\" href=\"#编译过程-bld_mod-buildmodule\">#</a> 编译过程   bld_mod = BuildModule ()</h2>\n<p><img loading=\"lazy\" data-src=\"1729165916609.jpg\" alt=\"总体流程图\"></p>\n<p>创建完 Pass 上下文之后，接下来在回到 Python 脚本，看 <code>lib = relay.build(mod, target=target, params=params)</code> ，该函数将 Relay IRModule 编译成为 <code>GraphExecutorFactoryModule</code> ，对应于 C++ 后端的 <code>GraphExecutorFactory</code>  类。</p>\n<p><code>relay.build()</code>  函数如下所示：其中  <code>ir_mod</code>  是前述模型转换得到的 Relay IRModule， <code>target</code>  是计划部署的加速硬件或设备 如 llvm cuda metal 等，甚至可以指定多种加速硬件或设备。  <code>target_host</code>  是指定主机端（通常是 CPU）的编译目标，例如当  <code>target</code>  是一个设备（如 GPU）时，通常还需要一些 cpu 来处理与设备驱动程序的交互、内存分配等任务。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ir_mod<span class=\"token punctuation\">,</span>          <span class=\"token comment\"># Relay IRModule</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    target<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\"># 计划部署的加速硬件或设备 如 llvm cuda metal 等</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    target_host<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 指定主机端（通常是 CPU）的编译目标 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    executor<span class=\"token operator\">=</span>Executor<span class=\"token punctuation\">(</span><span class=\"token string\">\"graph\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    runtime<span class=\"token operator\">=</span>Runtime<span class=\"token punctuation\">(</span><span class=\"token string\">\"cpp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    workspace_memory_pools<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    constant_memory_pools<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    params<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    mod_name<span class=\"token operator\">=</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Helper function that builds a Relay function to run on TVM graph executor.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Parameters</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ----------</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ir_mod : :py:class:`~tvm.IRModule`</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        The IR module to build. Using relay.Function is deprecated.</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    target : None, or any multi-target like object, see Target.canon_multi_target</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        For homogeneous compilation, the unique build target.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        For heterogeneous compilation, a dictionary or list of possible build targets.</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        Defaults to the current target in the environment if None.</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    target_host : None, or any target like object, see Target.canon_target</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        Host compilation target, if target is device.</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    executor : Optional[Executor]</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        The executor configuration with which to build the model.</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        Defaults to \"graph\" if no executor specified.</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    runtime : Optional[Runtime]</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        Runtime configuration to use when building the model.</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        Defaults to \"cpp\" if no runtime specified.</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    workspace_memory_pools : Optional[WorkspaceMemoryPools]</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        The object that contains an Array of WorkspacePoolInfo objects</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        that hold properties of read-write workspace pools that could be</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        used by the inference.</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    constant_memory_pools : Optional[ConstantMemoryPools]</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        The object that contains an Array of ConstantPoolInfo objects</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        that hold properties of read-only pools that could be</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        used by the inference.</pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    params : dict of str to NDArray</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        Input parameters to the graph that do not change</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        during inference time. Used for constant folding.</pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    mod_name: Optional[str]</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        The module name we will build</pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    Returns</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    -------</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    factory_module : tvm.relay.backend.executor_factory.ExecutorFactoryModule</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            The runtime factory for the TVM graph executor.</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    \"\"\"</pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>ir_mod<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>IRModule<span class=\"token punctuation\">,</span> _function<span class=\"token punctuation\">.</span>Function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Type of input parameter mod must be tvm.IRModule\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>ir_mod<span class=\"token punctuation\">,</span> _function<span class=\"token punctuation\">.</span>Function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">if</span> params<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            ir_mod <span class=\"token operator\">=</span> bind_params_by_name<span class=\"token punctuation\">(</span>ir_mod<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        ir_mod <span class=\"token operator\">=</span> IRModule<span class=\"token punctuation\">.</span>from_expr<span class=\"token punctuation\">(</span>ir_mod<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        warnings<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token string\">\"Please use input parameter mod (tvm.IRModule) \"</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token string\">\"instead of deprecated parameter mod (tvm.relay.function.Function)\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            DeprecationWarning<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    raw_targets <span class=\"token operator\">=</span> Target<span class=\"token punctuation\">.</span>canon_multi_target_and_host<span class=\"token punctuation\">(</span>Target<span class=\"token punctuation\">.</span>target_or_current<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> target_host<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>raw_targets<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    target_host <span class=\"token operator\">=</span> raw_targets<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>host</pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token comment\"># If current dispatch context is fallback context (the default root context),</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\"># then load pre-tuned parameters from TopHub</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>autotvm<span class=\"token punctuation\">.</span>DispatchContext<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">,</span> autotvm<span class=\"token punctuation\">.</span>FallbackContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        tophub_context <span class=\"token operator\">=</span> autotvm<span class=\"token punctuation\">.</span>tophub<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>raw_targets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        tophub_context <span class=\"token operator\">=</span> autotvm<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>EmptyContext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">with</span> tophub_context<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        bld_mod <span class=\"token operator\">=</span> BuildModule<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        graph_json<span class=\"token punctuation\">,</span> runtime_mod<span class=\"token punctuation\">,</span> params <span class=\"token operator\">=</span> bld_mod<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            mod<span class=\"token operator\">=</span>ir_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            target<span class=\"token operator\">=</span>raw_targets<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            executor<span class=\"token operator\">=</span>executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            runtime<span class=\"token operator\">=</span>runtime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            workspace_memory_pools<span class=\"token operator\">=</span>workspace_memory_pools<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            constant_memory_pools<span class=\"token operator\">=</span>constant_memory_pools<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            mod_name<span class=\"token operator\">=</span>mod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        func_metadata <span class=\"token operator\">=</span> bld_mod<span class=\"token punctuation\">.</span>get_function_metadata<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        devices <span class=\"token operator\">=</span> bld_mod<span class=\"token punctuation\">.</span>get_devices<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        lowered_ir_mods <span class=\"token operator\">=</span> bld_mod<span class=\"token punctuation\">.</span>get_irmodule<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        executor_codegen_metadata <span class=\"token operator\">=</span> bld_mod<span class=\"token punctuation\">.</span>get_executor_codegen_metadata<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">if</span> executor<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"aot\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            executor_factory <span class=\"token operator\">=</span> _executor_factory<span class=\"token punctuation\">.</span>AOTExecutorFactoryModule<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                ir_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                lowered_ir_mods<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                raw_targets<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                runtime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                runtime_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                mod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                func_metadata<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                executor_codegen_metadata<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                devices<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token keyword\">elif</span> executor<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"graph\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            executor_factory <span class=\"token operator\">=</span> _executor_factory<span class=\"token punctuation\">.</span>GraphExecutorFactoryModule<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                ir_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                raw_targets<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                graph_json<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                runtime_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                mod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                func_metadata<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            <span class=\"token keyword\">assert</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Executor \"</span> <span class=\"token operator\">+</span> executor <span class=\"token operator\">+</span> <span class=\"token string\">\" not supported\"</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">return</span> executor_factory</pre></td></tr></table></figure><p>简单看下流程：</p>\n<p><code>if not isinstance(ir_mod, (IRModule,_function.Function))</code>  检查输入模型的格式，如果不是 <code>IRModule,_function.Function</code>  中的一个，报错！</p>\n<p><code>if isinstance(ir_mod, _function.Function)</code>  则检查如果是 <code> _function.Function</code> ，则帮助将该表达式重新封装为 Relay IRModule，并提醒你不要直接把 Function 表达式传进来，而是要先封装成 IRModule</p>\n<p><code>if isinstance(autotvm.DispatchContext.current, autotvm.FallbackContext)</code>  检查是否有提前计算的最优调度.<br>\n <code>bld_mod = BuildModule()</code>  初始化一个 <code>class BuildModule(object)</code> ，如下代码。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BuildModule</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Build an IR module to run on TVM graph executor. This class is used</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    to expose the `RelayBuildModule` APIs implemented in C++.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \"\"\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>mod <span class=\"token operator\">=</span> _build_module<span class=\"token punctuation\">.</span>_BuildModule<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C++ 类：RelayBuildModule</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_graph_json <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_graph_json\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_module <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_module\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_build <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"build\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_optimize <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"optimize\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_set_params_func <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"set_params\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_params_func <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_params\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_function_metadata <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_function_metadata\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_executor_codegen_metadata <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_executor_codegen_metadata\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_devices <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_devices\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_irmodule <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_irmodule\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        target<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        target_host<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        executor<span class=\"token operator\">=</span>Executor<span class=\"token punctuation\">(</span><span class=\"token string\">\"graph\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        runtime<span class=\"token operator\">=</span>Runtime<span class=\"token punctuation\">(</span><span class=\"token string\">\"cpp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        workspace_memory_pools<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        constant_memory_pools<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        params<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        mod_name<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">from</span> tvm<span class=\"token punctuation\">.</span>auto_scheduler <span class=\"token keyword\">import</span> is_auto_scheduler_enabled</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">from</span> tvm<span class=\"token punctuation\">.</span>meta_schedule <span class=\"token keyword\">import</span> is_meta_schedule_enabled</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\"># pylint: enable=import-outside-toplevel</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\"># Setup the params.</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span> params<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_set_params<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\"># Build the IR module. If auto_scheduler is not enabled,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\"># then use the TOPI-defined schedule.</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\"># Turn off AutoTVM config not found warnings if auto_scheduler is enabled.</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        old_autotvm_silent <span class=\"token operator\">=</span> autotvm<span class=\"token punctuation\">.</span>GLOBAL_SCOPE<span class=\"token punctuation\">.</span>silent</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        autotvm<span class=\"token punctuation\">.</span>GLOBAL_SCOPE<span class=\"token punctuation\">.</span>silent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            is_auto_scheduler_enabled<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> is_meta_schedule_enabled<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> old_autotvm_silent</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        mod_name <span class=\"token operator\">=</span> mangle_module_name<span class=\"token punctuation\">(</span>mod_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_build<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            target<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            target_host<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            runtime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            workspace_memory_pools<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            constant_memory_pools<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            mod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        autotvm<span class=\"token punctuation\">.</span>GLOBAL_SCOPE<span class=\"token punctuation\">.</span>silent <span class=\"token operator\">=</span> old_autotvm_silent</pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\"># Get artifacts</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        mod <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_module<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        params <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_params<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        executor_config <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_graph_json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> executor<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"graph\"</span> <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">return</span> executor_config<span class=\"token punctuation\">,</span> mod<span class=\"token punctuation\">,</span> params</pre></td></tr></table></figure><p><code>bld_mod</code>  是 Python 中的类 <code>BuildModule</code> ，在初始化的时候：<br>\n <code>self.mod = _build_module._BuildModule()</code>  将 <code>mod</code>  字段注册为 C++ 后端类 <code>RelayBuildModule</code> 。具体过程是先调用 C++ 的注册全局函数 <code>relay.build_module._BuildModule</code> ，随即调用 <code>RelayBuildModule</code>  类创建函数 <code>RelayBuildCreate</code> 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">TVM_REGISTER_GLOBAL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"relay.build_module._BuildModule\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set_body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token function\">RelayBuildCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> runtime<span class=\"token double-colon punctuation\">::</span>Module <span class=\"token function\">RelayBuildCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">auto</span> exec <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_object</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>RelayBuildModule<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Module</span><span class=\"token punctuation\">(</span>exec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>RelayBuildModule</code> Relay 模型创建类用于帮助创建 Relay IRModule。从下方 <code>RelayBuildModule</code>  类的具体内容中可以看到，该类的 <code>GetFunction()</code>  函数通过名字注册了许多函数，如 <code>get_graph_json</code> 、 <code>get_module</code> 、 <code>build</code>  等。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">RelayBuildModule</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">ModuleNode</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">RelayBuildModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  PackedFunc <span class=\"token function\">GetFunction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ObjectPtr<span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> sptr_to_self<span class=\"token punctuation\">)</span> <span class=\"token keyword\">final</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_graph_json\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">GetGraphJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_module\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">GetModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">ICHECK_EQ</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>num_args<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"list_params\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">ListParamNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_params\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">GetParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"set_params\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Constant<span class=\"token operator\">></span> params <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> kv <span class=\"token operator\">:</span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">SetParam</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> kv<span class=\"token punctuation\">.</span>second<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_devices\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">ListDevices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_irmodule\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetIRModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_external_modules\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetExternalModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_function_metadata\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetFunctionMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_executor_codegen_metadata\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetExecutorCodegenMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"optimize\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token function\">ICHECK_EQ</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>num_args<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">Optimize</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token function\">LOG</span><span class=\"token punctuation\">(</span>FATAL<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Unknown packed function: \"</span> <span class=\"token operator\">&lt;&lt;</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>再回到 Python 前端类 <code>BuildModule</code> 。</p>\n<p>在注册 <code>self.mod</code>  为 C<ins> 类 <code>RelayBuildModule</code>  后，又将 C</ins> 类 <code>RelayBuildModule</code>  的 <code>get_graph_json</code> 、 <code>get_module</code> 、 <code>build</code>  等功能函数一一赋给自身成员：即 <code>self._get_graph_json = self.mod[&quot;get_graph_json&quot;]</code> ， <code>self._get_module = self.mod[&quot;get_module&quot;]</code> 、 <code>self._build = self.mod[&quot;build&quot;]</code>  等。</p>\n<p>也就是说 C++ 类 <code>RelayBuildModule</code>  与 Python 前端类 <code>BuildModule</code>  功能一一对应，可以视为同一个类。</p>\n<h2 id=\"编译过程-bld_modbuild\"><a class=\"anchor\" href=\"#编译过程-bld_modbuild\">#</a> 编译过程   bld_mod.build ()</h2>\n<p><img loading=\"lazy\" data-src=\"1729165916609.jpg\" alt=\"总体流程图\"></p>\n<p>继续看 <code>relay.build()</code>  函数， <code>bld_mod.build()</code>  函数完成了 Relay IRModule 编译的绝大多数流程。</p>\n<p><code>bld_mod.build()</code>  函数以 Relay IRModule  <code>ir_mod</code>  为输入，输出 runtime::Module  <code>runtime_mod</code> 。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>graph_json<span class=\"token punctuation\">,</span> runtime_mod<span class=\"token punctuation\">,</span> params <span class=\"token operator\">=</span> bld_mod<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            mod<span class=\"token operator\">=</span>ir_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            target<span class=\"token operator\">=</span>raw_targets<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            executor<span class=\"token operator\">=</span>executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            runtime<span class=\"token operator\">=</span>runtime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            workspace_memory_pools<span class=\"token operator\">=</span>workspace_memory_pools<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            constant_memory_pools<span class=\"token operator\">=</span>constant_memory_pools<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            mod_name<span class=\"token operator\">=</span>mod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如前所述， <code>bld_mod.build()</code>  函数调用的就是 C++ 类 <code>RelayBuildModule</code>  的函数 <code>build</code> 。  <code>build</code>  流程包含了将 Relay IRModule 降级为低级中间表示 TIR，然后再转换为 Runtime::Module 的过程。</p>\n<p>后续文章《【TVM】通过代码学习编译流程【4~...】》将介绍 C++ 类 <code>RelayBuildModule</code>  的 <code>build</code>  流程。</p>\n<p>接下来的 <code>_executor_factory.GraphExecutorFactoryModule()</code>  构造函数将编译后的 runtime::Module  <code>runtime_mod</code>  封装成 <code>GraphExecutorFactory</code>  类。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>executor_factory <span class=\"token operator\">=</span> _executor_factory<span class=\"token punctuation\">.</span>GraphExecutorFactoryModule<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ir_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    raw_targets<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    graph_json<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    runtime_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    mod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    func_metadata<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>该函数的参数已经提到不少了，剩下的:</p>\n<p><code>graph_json</code> ：Relay IRModule 经降级后低级中间表示 TIR Module 对应的图结构，用 json 表示。下面截取一段展示：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"nodes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>    # 节点</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token property\">\"op\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span>  # 输入节点</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token property\">\"inputs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  # 输入节点没有其他输入</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token property\">\"op\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tvm_op\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tvmgen_default_fused_layout_transform\"</span><span class=\"token punctuation\">,</span>  # layout_transform节点</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token property\">\"attrs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>  # 属性</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token property\">\"num_outputs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token property\">\"num_inputs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token property\">\"flatten_data\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token property\">\"func_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tvmgen_default_fused_layout_transform\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token property\">\"src_layout\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NCHW\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token property\">\"dst_layout\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NCHW3c\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token property\">\"hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ba3dc2c95d3171fd\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token property\">\"inputs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>  # 以<span class=\"token number\">0</span>号节点data为输入</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p><code>func_metadata</code> ：函数的元数据信息，下面是打印的某个简单模型的元数据信息，包含 workspace_sizes、constant_sizes 等，tir_primfuncs 则是一系列降级后的低级中间表示 TIR 函数。</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"tvmgen_default_fused_layout_transform\"</span><span class=\"token operator\">:</span> FunctionInfoNode(</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>workspace_sizes=<span class=\"token punctuation\">&#123;</span>llvm -keys=cpu -mtriple=x86_64-pc-linux-gnu<span class=\"token operator\">:</span> <span class=\"token number\">602112</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  constant_sizes=<span class=\"token punctuation\">&#123;</span>llvm -keys=cpu -mtriple=x86_64-pc-linux-gnu<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  tir_primfuncs=<span class=\"token punctuation\">&#123;</span>llvm -keys=cpu -mtriple=x86_64-pc-linux-gnu<span class=\"token operator\">:</span>  <span class=\"token punctuation\">[</span>一系列 @T.prim_func<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>)<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>_executor_factory.GraphExecutorFactoryModule()</code>  类构造函数如下所示。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GraphExecutorFactoryModule</span><span class=\"token punctuation\">(</span>ExecutorFactoryModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Graph executor factory module.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    This is a module of graph executor factory</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \"\"\"</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ir_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        target<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        graph_json_str<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        libmod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        libmod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        function_metadata<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">assert</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>graph_json_str<span class=\"token punctuation\">,</span> string_types<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        fcreate <span class=\"token operator\">=</span> get_global_func<span class=\"token punctuation\">(</span><span class=\"token string\">\"tvm.graph_executor_factory.create\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> params<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            args<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            args<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ndarray<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        self<span class=\"token punctuation\">.</span>ir_mod <span class=\"token operator\">=</span> ir_mod</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        self<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> target</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        self<span class=\"token punctuation\">.</span>executor <span class=\"token operator\">=</span> executor</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        self<span class=\"token punctuation\">.</span>module <span class=\"token operator\">=</span> fcreate<span class=\"token punctuation\">(</span>graph_json_str<span class=\"token punctuation\">,</span> libmod<span class=\"token punctuation\">,</span> libmod_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        self<span class=\"token punctuation\">.</span>graph_json <span class=\"token operator\">=</span> graph_json_str</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        self<span class=\"token punctuation\">.</span>lib <span class=\"token operator\">=</span> libmod</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        self<span class=\"token punctuation\">.</span>libmod_name <span class=\"token operator\">=</span> libmod_name</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        self<span class=\"token punctuation\">.</span>params <span class=\"token operator\">=</span> params</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        self<span class=\"token punctuation\">.</span>iter_cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        self<span class=\"token punctuation\">.</span>function_metadata <span class=\"token operator\">=</span> function_metadata</pre></td></tr></table></figure><p>通过 <code>get_global_func(&quot;tvm.graph_executor_factory.create&quot;)</code>  获取全局函数 —— <code>GraphExecutorFactory</code>  的构造函数 <code>fcreate</code> ，并执行，将其复制给 <code>self.module</code>  字段。</p>\n<p>在 <code>src/runtime/graph_executor/graph_executor_factory.cc</code>  路径下可以找到注册的 C++ 全局函数 <code>TVM_REGISTER_GLOBAL(&quot;tvm.graph_executor_factory.create&quot;)</code> ，如下面所示。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">TVM_REGISTER_GLOBAL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tvm.graph_executor_factory.create\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">set_body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span>NDArray<span class=\"token operator\">></span> params<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>size_t<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>string name <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">operator</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        params<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">operator</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">NDArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">auto</span> exec <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_object</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>GraphExecutorFactory<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      exec<span class=\"token operator\">-></span><span class=\"token function\">Import</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token function\">Module</span><span class=\"token punctuation\">(</span>exec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中 <code> make_object&lt;GraphExecutorFactory&gt;</code>  构建了 <code>GraphExecutorFactory</code>  类，并将 <code>args[1]</code>  注册到该类的 <code>std::vector&lt;Module&gt; imports_;</code>  字段底下。该字段存储当前模型所依赖的其他 runtime::Module，而 <code>args[1]</code>  指的是 <code>fcreate(graph_json_str, libmod, libmod_name, *args)</code>  函数的 <code>libmod</code>  参数，即前述 runtime::Module  <code>runtime_mod</code> 。</p>\n<p>所以  <code>GraphExecutorFactory</code>  类 依赖于 Relay IRModule 经【relay -&gt; tir】【tir -&gt; runtime】过程得到的  <code>runtime_mod</code> 。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "tvm",
                "compile"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/10/13/tvm02/",
            "url": "https://forcheetah.github.io/2024/10/13/tvm02/",
            "title": "【TVM】通过代码学习编译流程【2】模型转换",
            "date_published": "2024-10-13T12:29:30.047Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本系列文章将从代码和流程图入手，详细介绍 TVM AI 编译器的编译流程。本文章为第二篇，对应的 TVM 版本为当前最新版本 1.7。</p>\n<p>网络上有不少 TVM 工程的教程资源，如果本博客也是其他教程的简单重复的话，则网络的角落里又多了一份纯粹的空间占用者。所以我在想，本文章有什么特点才值得一看呢？我觉得有两个优点: 1、本文从代码出发，不会泛泛而谈，能够从细节了解 TVM；2、自认为结构流程图画的不错，能够从整体上把握 TVM 的脉络。所以，也许值得一看呢。</p>\n<p>本篇文章以 onnx 为例，介绍主流模型转换为 TVM 高级中间表示 Relay IR 的过程。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"onnx结构\"><a class=\"anchor\" href=\"#onnx结构\">#</a> Onnx 结构</h1>\n<p>先来了解一下 onnx 模型的结构信息：下图是一个简单的 onnx 模型的结构（只选取了代表性的一部分）</p>\n<p>全局信息：  版本信息： <code>ir_version: 7</code>  ； 来源： <code>producer_name: &quot;pytorch&quot;</code>    来源版本 ： <code>producer_version: &quot;2.1.0&quot;</code> <br>\n 图信息：包含在 graph 字段中。</p>\n<ul>\n<li>节点信息 node：指明输入 input 输出 output 张量，本身的名字 name，节点类型 type，参数信息 attribute</li>\n<li>张量信息 initializer：维度 dims，类型信息 data_type，名字 name，具体数值 raw_data。</li>\n<li>输入张量 input</li>\n<li>输出张量 output</li>\n</ul>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ir_version<span class=\"token operator\">:</span> <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>producer_name<span class=\"token operator\">:</span> <span class=\"token string\">\"pytorch\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>producer_version<span class=\"token operator\">:</span> <span class=\"token string\">\"2.1.0\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>graph <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  node <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    input<span class=\"token operator\">:</span> <span class=\"token string\">\"start\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    input<span class=\"token operator\">:</span> <span class=\"token string\">\"onnx::Conv_28\"</span>    # kernal</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    input<span class=\"token operator\">:</span> <span class=\"token string\">\"onnx::Conv_29\"</span>    # bias</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    output<span class=\"token operator\">:</span> <span class=\"token string\">\"/conv1/Conv_output_0\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"/conv1/Conv\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    op_type<span class=\"token operator\">:</span> <span class=\"token string\">\"Conv\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    attribute <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"dilations\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      type<span class=\"token operator\">:</span> INTS</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    attribute <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"group\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      i<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      type<span class=\"token operator\">:</span> INT</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    attribute <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"kernel_shape\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      type<span class=\"token operator\">:</span> INTS</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    attribute <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"pads\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      type<span class=\"token operator\">:</span> INTS</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  node <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    input<span class=\"token operator\">:</span> <span class=\"token string\">\"/conv1/Conv_output_0\"</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    output<span class=\"token operator\">:</span> <span class=\"token string\">\"/relu1/Relu_output_0\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"/relu1/Relu\"</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    op_type<span class=\"token operator\">:</span> <span class=\"token string\">\"Relu\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  initializer <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    dims<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    dims<span class=\"token operator\">:</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    data_type<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"fc.weight\"</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    raw_data<span class=\"token operator\">:</span> <span class=\"token string\">\"]&amp;\\212>`\\201\\213\\274@\\227\\224\\275\\274\\331p\\276b@N>\\017\\305\\223>&amp;&amp;\\263\\276(UD=\\300\\257q\\275\\320\\231\\246\\275\\320\\341\\276=\\372\\273&#125;>C\\226\\236> e)\\275\\357\\222\\236>\\212\\\\8>\"</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  initializer <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    dims<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    data_type<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"fc.bias\"</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    raw_data<span class=\"token operator\">:</span> <span class=\"token string\">\"\\3451\\232\\276\\200\\247(=\"</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  input <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"start\"</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    type <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      tensor_type <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        elem_type<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        shape <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  output <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"end\"</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    type <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      tensor_type <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        elem_type<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        shape <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>opset_import <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  version<span class=\"token operator\">:</span> <span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"python脚本\"><a class=\"anchor\" href=\"#python脚本\">#</a> Python 脚本</h1>\n<p>这里提供一个简单的 Python 脚本，调用 TVM Python 前端，实现 onnx 模型的编译过程。tvm 通过代码学习编程流程系列文章将基本采用这个脚本帮助追踪代码。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> onnx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> tvm<span class=\"token punctuation\">.</span>relay <span class=\"token keyword\">as</span> relay</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> tvm</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> tvm<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> graph_executor</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">######################################    路径信息    ##########################################</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>model_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/resnet18.onnx\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>save_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/pythonSave/\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>onnx_model <span class=\"token operator\">=</span> onnx<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>model_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">##################################    图片信息    ##############################################</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>img_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/.tvm_test_data/data/imagenet_cat.png\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Resize it to 224x224</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>resized_image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>img_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>asarray<span class=\"token punctuation\">(</span>resized_image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># Our input image is in HWC layout while ONNX expects CHW input, so convert the array</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>img_data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Normalize according to the ImageNet input specification</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>imagenet_mean <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.485</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.406</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>imagenet_stddev <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.229</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.225</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>norm_img_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>img_data <span class=\"token operator\">/</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> imagenet_mean<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> imagenet_stddev</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># Add the batch dimension, as we are expecting 4-dimensional input: NCHW.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>norm_img_data<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">####################################     模型编译     ###########################################</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>input_name <span class=\"token operator\">=</span> <span class=\"token string\">\"data\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>target <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>Target<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>shape_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>input_name<span class=\"token punctuation\">:</span> img_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>mod<span class=\"token punctuation\">,</span> params <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>frontend<span class=\"token punctuation\">.</span>from_onnx<span class=\"token punctuation\">(</span>onnx_model<span class=\"token punctuation\">,</span> shape_dict<span class=\"token punctuation\">,</span> export_node_renamed_model_path<span class=\"token operator\">=</span>save_path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建 IRModule  高级 Relay IR</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">with</span> tvm<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>PassContext<span class=\"token punctuation\">(</span>opt_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    lib <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> target<span class=\"token operator\">=</span>target<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 创建 GraphExecutorFactoryModule  </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#######################################     模型保存      ########################################</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># save</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># 保存编译后的库文件（.so）</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>lib_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.so\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>lib<span class=\"token punctuation\">.</span>get_lib<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>export_library<span class=\"token punctuation\">(</span>lib_fname<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># 保存模型参数（.params）</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>params_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.params\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>params_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> param_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    param_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>relay<span class=\"token punctuation\">.</span>save_param_dict<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_params<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># 保存 JSON 格式的计算图（.json）</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>json_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.json\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>json_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> json_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    json_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_executor_config<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>dev <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>module <span class=\"token operator\">=</span> graph_executor<span class=\"token punctuation\">.</span>GraphModule<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">[</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># graph_executor.GraphModule</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">############################       运行    ##########################################</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>module<span class=\"token punctuation\">.</span>set_input<span class=\"token punctuation\">(</span>input_name<span class=\"token punctuation\">,</span> img_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>module<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>output_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>tvm_output <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>get_output<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tvm_output<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这段代码实现了一个 onnx 格式的 resnet18 模型进行：模型编译、模型保存、模型推理运行的过程。本篇文章介绍模型编译过程中的模型转换部分，也就是 <code>relay.frontend.from_onnx</code>  函数，它将 onnx 模型转化为 TVM 的高级 IR：Relay IR。<br>\n下图是 <code>relay.frontend.from_onnx</code>  函数整体结构流程图，在后面的详细介绍中会截取部分进行展示。</p>\n<p><img loading=\"lazy\" data-src=\"1728821938299.jpg\" alt=\"总体流程图\"></p>\n<h1 id=\"模型转换流程\"><a class=\"anchor\" href=\"#模型转换流程\">#</a> 模型转换流程</h1>\n<p><img loading=\"lazy\" data-src=\"1728822135202.jpg\" alt=\"分图\"></p>\n<p><code>mod, params = relay.frontend.from_onnx(onnx_model, shape_dict)</code>  函数将一个 onnx model 转换成对等的 Relay module。</p>\n<p>首先看下这个函数的参数：</p>\n<p>其中 <code>freeze_params</code>  参数为布尔类型，当为 true 的时候，神经网络模型中的 weight 和 bias 以及 shape 等 Tensor 会被固化到 TVM 将要转换的 IRModule 模型当中，作为 Constants，这种情况下 TVM 的优化可以更加激进， <code>from_onnx()</code>  函数返回的 params 字典不再需要保存这些参数（为空）；当为 False 的时候，weight 和 bias 以及 shape 等 Tensor 会作为变量 variables，后续过程中可以修改、替换这些 tensor，这些 Tensor 会收集起来从 params 字典中返回。 因此建议该参数定为 True。</p>\n<p><code>export_node_renamed_model_path</code>  参数为字符串，因为有时输入模型的节点缺少 name，TVM 会生成新的节点名字，并将更改节点名字的 onnx 模型输出出来。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">from_onnx</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    model<span class=\"token punctuation\">,</span>          <span class=\"token comment\"># onnx 模型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    shape<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\"># 输入 Tensor 的 shape</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    dtype<span class=\"token operator\">=</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># 输入 Tensor 的 type</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    opset<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># onnx 版本</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    freeze_params<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    convert_config<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    export_node_renamed_model_path<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p><code>from_onnx()</code>  函数完成了输入模型的检查校验，之后的关键代码为 <code>mod, params = g.from_onnx(graph, opset)</code>  ，也就是结构流程图中的 <code>GraphProto.from_onnx()</code> 。</p>\n<p><code>GraphProto.from_onnx()</code>  函数具体的完成了 onnx 模型转 Relay IRModule 的过程。过程看下方代码。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">from_onnx</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">,</span> opset<span class=\"token punctuation\">,</span> get_output_expr<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        self<span class=\"token punctuation\">.</span>opset <span class=\"token operator\">=</span> opset</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_parse_graph_initializers<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_parse_graph_input<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_check_user_inputs_in_outermost_graph_scope<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_check_for_unsupported_ops<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_construct_nodes<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># now return the outputs</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>_parse_value_proto<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        outputs <span class=\"token operator\">=</span> outputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> _expr<span class=\"token punctuation\">.</span>Tuple<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> get_output_expr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> outputs</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        free_vars <span class=\"token operator\">=</span> analysis<span class=\"token punctuation\">.</span>free_vars<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        nodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>v<span class=\"token punctuation\">:</span> k <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        free_vars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>nodes<span class=\"token punctuation\">[</span>var<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> var <span class=\"token keyword\">in</span> free_vars<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> i_name <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            i_name <span class=\"token keyword\">in</span> free_vars <span class=\"token keyword\">and</span> i_name <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_inputs<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                self<span class=\"token punctuation\">.</span>_inputs<span class=\"token punctuation\">[</span>i_name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>i_name<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\"># Create a function from our output expression and all input variables.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        func <span class=\"token operator\">=</span> _function<span class=\"token punctuation\">.</span>Function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>v <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_inputs<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> IRModule<span class=\"token punctuation\">.</span>from_expr<span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_params</pre></td></tr></table></figure><p><code>self._parse_graph_initializers(graph)</code>  函数将 onnx 模型中的 tensor 转换为 constant 节点，装进字典 node 中。代码中 <code>_expr.const(array)</code>  一路调用 <code>Constant()</code> ， <code>_ffi_api.Constant</code> ，将 tensor 转换为 C++ 后端中的 <code>Constant</code>  类。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">_parse_graph_initializers</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Parse network inputs to relay, aka parameters.\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> init_tensor <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">.</span>initializer<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Tensor's name is required.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        array <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_parse_array<span class=\"token punctuation\">(</span>init_tensor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>_freeze_params<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _expr<span class=\"token punctuation\">.</span>const<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">[</span>init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new_var<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                shape<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">[</span>init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                dtype<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">[</span>init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>self._parse_graph_input(graph)</code>  函数作用是指定图的输入节点。</p>\n<p><code>self._check_user_inputs_in_outermost_graph_scope()</code>  函数用来检查 shape 定义的 tensor 都已经声明。</p>\n<p><code>self._check_for_unsupported_ops(graph)</code>  函数检查所有的算子是否位于支持列表中。</p>\n<p><code>self._construct_nodes(graph)</code>  函数不仅将 onnx 节点转换乘 tvm 算子，还在遍历节点的过程中生成 tvm 抽象语法树。下面是函数具体过程：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">_construct_nodes</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Nodes are stored as directed acyclic graph.\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        op_name <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>op_type</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        attr <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_parse_attr<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>attribute<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># Fill in span of inputs</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        node_source_name <span class=\"token operator\">=</span> get_source_name<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_op_type_dict<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_set_parameter_span<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> node_source_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># Create and populate input list.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        inputs <span class=\"token operator\">=</span> onnx_input<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> i <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                inputs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>_renames<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                inputs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        i_name <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_parse_value_proto<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        node_output <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_fix_outputs<span class=\"token punctuation\">(</span>op_name<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"tvm_custom\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"tvm_custom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i_name</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"tvm_custom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"num_outputs\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        op <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_convert_operator<span class=\"token punctuation\">(</span>op_name<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>opset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span> _expr<span class=\"token punctuation\">.</span>TupleWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            outputs_num <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            outputs_num <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> outputs_num <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            op <span class=\"token operator\">=</span> fold_constant<span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            op <span class=\"token operator\">=</span> _expr<span class=\"token punctuation\">.</span>TupleWrapper<span class=\"token punctuation\">(</span>fold_constant<span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">.</span>astuple<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        op <span class=\"token operator\">=</span> set_span<span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span> node_source_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> outputs_num <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\"># ONNX supports optional outputs for some nodes.</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\"># This block searches for missing outputs in the ONNX graph</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\"># and removes any unneeded ops</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            valid_outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> outputs_num</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> output <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token keyword\">if</span> output <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    valid_outputs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\"># If we have outputs ONNX isn't expecting, we need to drop them</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>valid_outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                tup <span class=\"token operator\">=</span> op<span class=\"token punctuation\">.</span>astuple<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token comment\"># TupleWrapper can also wrap ops with TupleType outputs</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>tup<span class=\"token punctuation\">,</span> _expr<span class=\"token punctuation\">.</span>Tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token comment\"># For tuples, we extract the fields instead of using GetTupleItem</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>tup<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> valid <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>valid_outputs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> valid<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token comment\"># For call nodes, we need to GetTupleItem</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>op<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> valid <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>valid_outputs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> valid<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token comment\"># Create the new op with valid outputs</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    op <span class=\"token operator\">=</span> outputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token keyword\">elif</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> outputs_num<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    op <span class=\"token operator\">=</span> _expr<span class=\"token punctuation\">.</span>TupleWrapper<span class=\"token punctuation\">(</span>_expr<span class=\"token punctuation\">.</span>Tuple<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token comment\"># Drop invalid outputs for the onnx node</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                outputs_num <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                node_output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>output <span class=\"token keyword\">for</span> output <span class=\"token keyword\">in</span> node_output <span class=\"token keyword\">if</span> output <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">assert</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> outputs_num</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Number of output mismatch </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> vs </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>outputs_num<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> in </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>op_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">if</span> outputs_num <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>node_output<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> op</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> op<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>从 <code>self._construct_nodes(graph)</code>  函数代码中可以看到，首先遍历所有图节点 <code>node</code> ，通过 <code>self._parse_attr()</code>  函数将节点的所有属性信息构造为 tvm 的 attr 算子，再根据算子类型 <code>op_name</code> 、输入 <code>inputs</code> , 和属性 <code>attr</code> ，通过函数 <code>self._convert_operator(op_name, inputs, attr, self.opset)</code>  创建 tvm 算子。这个过程中自然形成了 tvm 的抽象语法树，构造了所有算子的连接关系。其中还有一些细节：比如当一个算子的输出 tensor 有多个时，会在该算子后面添加一个元组算子 <code>_expr.TupleWrapper()</code> .</p>\n<p><img loading=\"lazy\" data-src=\"1728822347896.jpg\" alt=\"子图2\"></p>\n<p>我们着重看一下函数 <code>self._convert_operator()</code> ，也就是算子转换函数。它将卷积、池化、全链接等这些算子包装为 tvm 中的一个 <code>CallNode</code>  算子。参数 <code>op_name</code>  指明算子的类型，如 Convolution, FullyConnected， <code>inputs</code>  是前述存储在 <code>self._nodes</code>  字典中其他算子， <code>attrs</code>  是前述刚转换的属性， <code>Opset</code>  是 onnx 算子版本号。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">_convert_operator</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> op_name<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">,</span> opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Convert ONNX operator into a Relay operator.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    The converter must specify conversions explicitly for incompatible name, and</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    apply handlers to operator attributes.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Parameters</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ----------</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    op_name : str</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        Operator name, such as Convolution, FullyConnected</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    inputs : list of tvm.relay.function.Function</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        List of inputs.</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    attrs : dict</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        Dict of operator attributes</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    opset : int</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        Opset version</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Returns</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    -------</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    sym : tvm.relay.function.Function</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        Converted relay function</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    \"\"\"</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    convert_map <span class=\"token operator\">=</span> _get_convert_map<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> op_name <span class=\"token keyword\">in</span> _identity_list<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        sym <span class=\"token operator\">=</span> get_relay_op<span class=\"token punctuation\">(</span>op_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>inputs<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>attrs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">elif</span> op_name <span class=\"token keyword\">in</span> convert_map<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        sym <span class=\"token operator\">=</span> convert_map<span class=\"token punctuation\">[</span>op_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">raise</span> NotImplementedError<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Operator </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>op_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> not implemented.\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> sym</pre></td></tr></table></figure><p>通过 <code>_get_convert_map()</code>  函数获取转换字典，我们截取该函数部分内容。以卷积为例，CONV 算子通过 <code>Conv.get_converter(opset)</code>  函数获取卷积的转换函数。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">_get_convert_map</span><span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\"># defs/experimental</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"Identity\"</span><span class=\"token punctuation\">:</span> Renamer<span class=\"token punctuation\">(</span><span class=\"token string\">\"copy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"Optional\"</span><span class=\"token punctuation\">:</span> Optional_<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">\"OptionalHasElement\"</span><span class=\"token punctuation\">:</span> OptionalHasElement<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">\"OptionalGetElement\"</span><span class=\"token punctuation\">:</span> OptionalGetElement<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"Affine\"</span><span class=\"token punctuation\">:</span> Affine<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># Bitwise operators</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\"BitShift\"</span><span class=\"token punctuation\">:</span> BitShift<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"BitwiseAnd\"</span><span class=\"token punctuation\">:</span> BitwiseAnd<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">\"BitwiseNot\"</span><span class=\"token punctuation\">:</span> BitwiseNot<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">\"BitwiseOr\"</span><span class=\"token punctuation\">:</span> BitwiseOr<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token string\">\"BitwiseXor\"</span><span class=\"token punctuation\">:</span> BitwiseXor<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token string\">\"ThresholdedRelu\"</span><span class=\"token punctuation\">:</span> ThresholdedRelu<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token string\">\"ScaledTanh\"</span><span class=\"token punctuation\">:</span> ScaledTanh<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token string\">\"AveragePool\"</span><span class=\"token punctuation\">:</span> AveragePool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token string\">\"LpPool\"</span><span class=\"token punctuation\">:</span> LpPool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token string\">\"GlobalLpPool\"</span><span class=\"token punctuation\">:</span> GlobalLpPool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token string\">\"MaxPool\"</span><span class=\"token punctuation\">:</span> MaxPool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token string\">\"MaxUnpool\"</span><span class=\"token punctuation\">:</span> MaxUnpool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token string\">\"Conv\"</span><span class=\"token punctuation\">:</span> Conv<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token string\">\"ConvTranspose\"</span><span class=\"token punctuation\">:</span> ConvTranspose<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token string\">\"GlobalAveragePool\"</span><span class=\"token punctuation\">:</span> GlobalAveragePool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token string\">\"GlobalMaxPool\"</span><span class=\"token punctuation\">:</span> GlobalMaxPool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>TVM 先尝试从 <code>_identity_list:</code>  列表中获取转换方法，开发这如果需要添加自定义算子，可以考虑在该列表中添加，当前我们不用考虑这个列表。之后 TVM 从获取转换方法并执行 <code>convert_map[op_name](inputs, attrs, self._params)</code> ，仍然以卷积为例，执行的是下面类 <code>class Conv(OnnxOpConverter)</code>  中的 <code>def _impl_v1(cls, inputs, attr, params)</code>  方法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Conv</span><span class=\"token punctuation\">(</span>OnnxOpConverter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Operator converter for Conv.\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">_impl_v1</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># Use shape of input to determine convolution type.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        data <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        kernel <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        input_shape <span class=\"token operator\">=</span> infer_shape<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        ndim <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        kernel_type <span class=\"token operator\">=</span> infer_type<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        kernel_shapes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>get_const_tuple<span class=\"token punctuation\">(</span>kernel_type<span class=\"token punctuation\">.</span>checked_type<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token string\">\"kernel_shape\"</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> attr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"kernel_shape\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> kernel_shapes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token string\">\"auto_pad\"</span> <span class=\"token keyword\">in</span> attr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"SAME_UPPER\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SAME_LOWER\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\"># Warning: Convolution does not yet support dynamic shapes,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\"># one will need to run dynamic_to_static on this model after import</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                data <span class=\"token operator\">=</span> autopad<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    attr<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"strides\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>ndim <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"kernel_shape\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    attr<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"dilations\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>ndim <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    mode<span class=\"token operator\">=</span>attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">elif</span> attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"VALID\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"pads\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>ndim <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">elif</span> attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"NOTSET\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                msg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token string-interpolation\"><span class=\"token string\">f'Value </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> in attribute \"auto_pad\" of operator Conv '</span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token string-interpolation\"><span class=\"token string\">f\"is invalid.\"</span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">raise</span> tvm<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">.</span>OpAttributeInvalid<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            attr<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"channels\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> kernel_shapes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        out <span class=\"token operator\">=</span> AttrCvt<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            op_name<span class=\"token operator\">=</span>dimension_picker<span class=\"token punctuation\">(</span><span class=\"token string\">\"conv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            transforms<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token string\">\"kernel_shape\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"kernel_size\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token string\">\"dilations\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"dilation\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token string\">\"pads\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"padding\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token string\">\"group\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"groups\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            custom_check<span class=\"token operator\">=</span>dimension_constraint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        use_bias <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">if</span> use_bias<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            out <span class=\"token operator\">=</span> _op<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>bias_add<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> out</pre></td></tr></table></figure><p>其中 <code>AttrCvt()</code>  函数经过多层调用（见结构流程图），最终调用了 C++ 后端通过 <code>TVM_REGISTER_GLOBAL(&quot;relay.op.nn._make.conv2d&quot;)</code>  注册的 <code>MakeConv&lt;Conv2DAttrs&gt;()</code>  函数，该函数创建一个包含卷积所有信息的 <code>CallNode</code>  算子，见下面代码 <code>return Call(op, &#123;data, weight&#125;, Attrs(attrs), &#123;&#125;);</code> ，该函数位于 <code>/home/xianmu/CProject/tvm/src/relay/op/nn/convolution_make.h</code> 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">inline</span> Expr <span class=\"token function\">MakeConv</span><span class=\"token punctuation\">(</span>Expr data<span class=\"token punctuation\">,</span> Expr weight<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>IndexExpr<span class=\"token operator\">></span> strides<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>IndexExpr<span class=\"token operator\">></span> padding<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                     Array<span class=\"token operator\">&lt;</span>IndexExpr<span class=\"token operator\">></span> dilation<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> groups<span class=\"token punctuation\">,</span> IndexExpr channels<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                     Array<span class=\"token operator\">&lt;</span>IndexExpr<span class=\"token operator\">></span> kernel_size<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string data_layout<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                     std<span class=\"token double-colon punctuation\">::</span>string kernel_layout<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string out_layout<span class=\"token punctuation\">,</span> DataType out_dtype<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                     std<span class=\"token double-colon punctuation\">::</span>string op_name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">auto</span> attrs <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_object</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  attrs<span class=\"token operator\">-></span>strides <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>strides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  attrs<span class=\"token operator\">-></span>padding <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>padding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  attrs<span class=\"token operator\">-></span>dilation <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>dilation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  attrs<span class=\"token operator\">-></span>groups <span class=\"token operator\">=</span> groups<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  attrs<span class=\"token operator\">-></span>channels <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  attrs<span class=\"token operator\">-></span>kernel_size <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>kernel_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  attrs<span class=\"token operator\">-></span>data_layout <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>data_layout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  attrs<span class=\"token operator\">-></span>kernel_layout <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>kernel_layout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  attrs<span class=\"token operator\">-></span>out_layout <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>out_layout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  attrs<span class=\"token operator\">-></span>out_dtype <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>out_dtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">const</span> Op<span class=\"token operator\">&amp;</span> op <span class=\"token operator\">=</span> <span class=\"token class-name\">Op</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>op_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">Call</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Attrs</span><span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"1728822492980.jpg\" alt=\"子图3\"></p>\n<p>到这里模型拓扑结构就算建立完成了。让我们再回到 <code>GraphProto.from_onnx()</code>  函数。前述过程就像是搭积木，搭完这个拓扑结构之后，调用函数 <code>_function.Function([v for k, v in self._inputs.items()], outputs)</code>  将图结构封装成 <code>tvm.relay.Function</code>  表达式，位于 <code>/home/xianmu/CProject/tvm/include/tvm/relay/function.h</code> 。 <code>tvm.relay.Function</code>  是一个有输入输出的表达式集合。</p>\n<p>最后一步，通过 <code>IRModule.from_expr(func)</code>  函数，创建 tvm 高级 IR：Relay IRModule。整个调用过程在结构流程图中给出。下面是类  <code>IRModule</code>  的属性信息， <code>tvm.relay.Function</code>  就存储在 <code>IRModuleNode</code>  的 <code>Map&lt;GlobalVar, BaseFunc&gt; functions;</code>  字段下。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">IRModuleNode</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">/*! \\brief A map from ids to all global functions. */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span>GlobalVar<span class=\"token punctuation\">,</span> BaseFunc<span class=\"token operator\">></span> functions<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">/*! \\brief A map from global type vars to ADT type data. */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span>GlobalTypeVar<span class=\"token punctuation\">,</span> TypeData<span class=\"token operator\">></span> type_definitions<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">/*! \\brief The source map for the module. */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  SourceMap source_map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">/* \\brief Additional attributes storing meta-data about the module. */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  DictAttrs attrs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">/*! \\brief Globally static object that are referred by the IR itself */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>GlobalInfo<span class=\"token operator\">>></span> global_infos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">/*!</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   * \\brief A map from string names to global variables that</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   * ensures global uniqueness.</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   */</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> GlobalVar<span class=\"token operator\">></span> global_var_map_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">/*! \\brief A map from string names to global type variables (ADT names)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   * that ensures global uniqueness.</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   */</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> GlobalTypeVar<span class=\"token operator\">></span> global_type_var_map_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">/*! \\brief A map from constructor tags to constructor objects</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   * for convenient access</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   */</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int32_t</span><span class=\"token punctuation\">,</span> Constructor<span class=\"token operator\">></span> constructor_tag_map_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">/*! \\brief The files previously imported, required to ensure</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      importing is idempotent for each module.</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   */</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unordered_set<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> import_set_<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>到此，tvm 的 <code>relay.frontend.from_onnx(onnx_model, shape_dict)</code>  函数已经介绍完毕，它将一个 onnx model 转换成对等的 Relay module。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "tvm",
                "compile"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/10/10/tvm01/",
            "url": "https://forcheetah.github.io/2024/10/10/tvm01/",
            "title": "【TVM】通过代码学习编译流程【1】必要知识",
            "date_published": "2024-10-10T12:12:43.910Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本系列文章将从代码和流程图入手，详细介绍 TVM AI 编译器的编译流程。本文章为第一篇，取名为 “必要知识”，约等于 “大杂烩”。食之无味，弃之可惜。但基于我个人的主观喜好和偏见，这些知识值得在整个代码讲解之前声明。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"工程结构\"><a class=\"anchor\" href=\"#工程结构\">#</a> 工程结构</h1>\n<p><a href=\"https://github.com/apache/tvm\">TVM</a> 主要由 C++ 语言和 Python 语言实现。</p>\n<ul>\n<li>\n<p>a.TVM C++ 后端核心代码   位于 /home/user/tvm/src<br>\nC++ 后端核心代码的功能是生成 <a href=\"http://libtvm.so\">libtvm.so</a> libtvm_runtime.so，分别是模型编译过程中的需要的 libtvm.so 库，和模型部署运行时需要的 libtvm_runtime.so 库。对应的头文件位于 /home/user/tvm/include.</p>\n<ul>\n<li>1. 其中 src/runtime 是模型部署相关 CPP 文件\n<ul>\n<li>src/runtime/graph_executor   最基本的图执行器</li>\n<li>src/runtime/module.cpp          运行时 Module 基类</li>\n<li>src/runtime/contrib                  BYOC 第三方设备运行及实现  包括 dnnl cblas cudnn ethosu 等等</li>\n<li>srd/runtime/cuda                    CUDA 运行时 Module</li>\n<li>还有其他设备的运行时 Module  如 opencl  hexagon   metal 等，以及一些接口文件</li>\n</ul>\n</li>\n<li>2.src/relay 是 TVM 高级中间表示 IR 的相关 CPP 文件</li>\n<li>3.src/relax TVM 正在发展的高级中间表示 IR，功能上等同于 Relay</li>\n<li>4.src/te      TVM 的 TE 表达式</li>\n<li>5.src/topi   算子的计算定义和后端调度</li>\n<li>6.src/tir      TVM 低级中介表示 IR，接近于硬件表示</li>\n<li>7.src/auto_shedule  TVM 自动优化调度相关</li>\n</ul>\n</li>\n<li>\n<p>b. TVM Python 前端代码      位于 /home/user/tvm/python<br>\nPython 前端代码为 C++ API 和执行编译的驱动代码，提供 Python 绑定。</p>\n</li>\n</ul>\n<p>表面上看 TVM 工程应当是 Python 前端调用 C++ 后端生成的 <a href=\"http://libtvm.so\">libtvm.so</a> libtvm_runtime.so ，实际上 TVM 支持 Python 和 C++ 的相互调用。例如一些算子的 compute 计算公式和 schedule 调度位于 Python 代码中，由 C++ 进行调用。</p>\n<p>在编译阶段，开发者编写 Python 代码，调用 TVM Python 前端，而 TVM 的 Python 前端又依赖于 C++ 后端生成的 libtvm.so libtvm_runtime.so 动态库。</p>\n<p>部署运行阶段即可以编写 Python 来执行，也可以直接编译 C++ 为可执行文件，参考<a href=\"https://github.com/ForCheetah/TvmCppDeploy\"> TVM C++ 部署</a></p>\n<h1 id=\"编译\"><a class=\"anchor\" href=\"#编译\">#</a> 编译</h1>\n<p>编译过程可以参考 TVM 英文文档和中文文档。文档中内容全面，这里只摘必要步骤，是最简单的部署安装方式。</p>\n<p>1. 编译 <a href=\"http://libtvm.so\">libtvm.so</a> libtvm_runtime.so</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build  <span class=\"token comment\"># 下载工程后进入工程目录 创新文件夹</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cp</span> cmake/config.cmake ./build</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># 将 cmake 配置文件拷贝到 build 目录，可以更改需要的额配置选项</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token parameter variable\">-j32</span></pre></td></tr></table></figure><p>2. 配置临时运行环境</p>\n<p>个人喜欢用临时环境运行项目，可以避免 .bashrc 文件中添加过多环境路径；特别是开发人员有多个 TVM 项目的时候，可以避免项目的混淆。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 指定 tvm 库路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/home/user/tvm/build:<span class=\"token environment constant\">$PATH</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 指定 tvm Python 路径</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">PYTHONPATH</span><span class=\"token operator\">=</span>/home/user/tvm/python:<span class=\"token variable\">$&#123;PYTHONPATH&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 运行</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>python3 ***.py</pre></td></tr></table></figure><h1 id=\"tvm-基类\"><a class=\"anchor\" href=\"#tvm-基类\">#</a> TVM 基类</h1>\n<p>大概从事工程项目开发的人员对 Object, ObjectPtr, ObjectRef 等写法相对熟悉，但是没有相关经验的算法研究人员，还是先认识一下 TVM 中的这三个基类。</p>\n<p>TVM 中大部分类都继承自三大基础类   Object, ObjectPtr, ObjectRef。想多了解一下的话，可以学习博客<a href=\"https://zhuanlan.zhihu.com/p/656435385\"> TVM: Object, ObjectPtr, ObjectRef (以 tir.sch 为例)</a> 。</p>\n<p>可能比较粗显的总结一下：TVM 中以 &quot;Node&quot; 结尾的类是 Object 的派生类，去掉 &quot;Node&quot; 的类是 ObjectRef 的派生类，Object 的派生类负责 &quot;做事&quot;，ObjectRef 的派生类方便程序员引用，ObjectPtr 是桥梁。但总之这三者是一个东西（刚学时我就被这搞晕了：(  ）。</p>\n<p>举例说明如何使用 TVM 的三大基础类构造对象:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Anode</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Object</span></span><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">Anode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">~</span><span class=\"token function\">Anode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token string\">\"instance\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">ObjectRef</span></span><span class=\"token punctuation\">&#123;</span>       </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">TVM_DEFINE_MUTABLE_OBJECT_REF_METHODS</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span>ObjectRef<span class=\"token punctuation\">,</span> Anode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span>ObjectPtr<span class=\"token operator\">&lt;</span>Anode<span class=\"token operator\">></span> n <span class=\"token operator\">=</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_object</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Anode<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 桥梁 Ptr = make_object (本体 node)    </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   A <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指针</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   ref<span class=\"token operator\">-></span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// Anode 指针，可以引用 a ()</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token comment\">//ref.get ()->a (); // 基类 Object 指针，error Object has no member a ()</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"1728562036320.jpg\" alt=\"Object 应用例子\"></p>\n<p>可以再看一下 TVM 工程中的例子，这段代码创建了本体 <code>CallNode</code> ，通过 make_object 生成桥梁 <code>ObjectPtr&lt;CallNode&gt;</code> ，最后赋值给指针 <code>Call</code>  的 <code>data_</code> 字段。</p>\n<h1 id=\"python和c相互调用\"><a class=\"anchor\" href=\"#python和c相互调用\">#</a> Python 和 C++ 相互调用</h1>\n<p>TVM 实现了 FFI (Foreign Function Interface) 机制，目标是使得任意语言下定义的函数都可以被任意其他语言调用。</p>\n<p>宏 TVM_REGISTER_GLOBAL</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * \\brief Register a function globally.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * \\code</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   TVM_REGISTER_GLOBAL(\"MyPrint\")</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   .set_body([](TVMArgs args, TVMRetValue* rv) &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   &#125;);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * \\endcode</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">TVM_REGISTER_GLOBAL</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>OpName<span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token expression\"><span class=\"token function\">TVM_STR_CONCAT</span><span class=\"token punctuation\">(</span>TVM_FUNC_REG_VAR_DEF<span class=\"token punctuation\">,</span> __COUNTER__<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Registry</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span>OpName<span class=\"token punctuation\">)</span></span></pre></td></tr></table></figure><p>在 C++ 后端同过 “TVM_REGISTER_GLOBAL” 这个宏将函数注册为全局函数，该全局函数的类型为 PackedFunc。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">TVM_REGISTER_GLOBAL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tvm.graph_executor_factory.create\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 注册为全局函数 PackedFunc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">set_body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token function\">Module</span><span class=\"token punctuation\">(</span>exec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 Python 前端可以通过 get_global_func () 函数来获取全局函数 PackedFunc 并执行</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fcreate <span class=\"token operator\">=</span> get_global_func<span class=\"token punctuation\">(</span><span class=\"token string\">\"tvm.graph_executor_facttory.create\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>self<span class=\"token punctuation\">.</span>module <span class=\"token operator\">=</span> fcreate<span class=\"token punctuation\">(</span>graph_json_str<span class=\"token punctuation\">,</span> libmod<span class=\"token punctuation\">,</span> libmod_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 C++ 端也可以通过名字获取 全局函数 PackedFunc</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PackedFunc pf <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">GetFunction</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>python 端有大量如下类似代码，将有相同后缀的 PackedFunc 注册到 Python 端</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"FFI APIs for tvm.ir\"\"\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> tvm<span class=\"token punctuation\">.</span>_ffi</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>tvm<span class=\"token punctuation\">.</span>_ffi<span class=\"token punctuation\">.</span>_init_api<span class=\"token punctuation\">(</span><span class=\"token string\">\"ir\"</span><span class=\"token punctuation\">,</span> __name__<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>Python 端获取并执行 PackedFunc</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_ffi_api<span class=\"token punctuation\">.</span>Module_UpdateGlobalInfo<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> global_info<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "tvm",
                "compile"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/06/18/deployTVMPython/",
            "url": "https://forcheetah.github.io/2024/06/18/deployTVMPython/",
            "title": "【TVM】Python脚本实现模型编译和保存",
            "date_published": "2024-06-18T13:01:39.606Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇博客提供简单的 Python 脚本代码，实现 onnx 模型转换编译，保存为 TVM 的  <code>.so .params .json</code>  文件 。</p>\n<blockquote>\n<p>望长城内外，惟余莽莽；大河上下，顿失滔滔。<br>\n--------------- 教员<br>\n ------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<h1 id=\"python脚本实现模型编译和保存\"><a class=\"anchor\" href=\"#python脚本实现模型编译和保存\">#</a> Python 脚本实现模型编译和保存</h1>\n<p>脚本中需要修改的就一些路径，很容易看明白，就不再过多介绍了。</p>\n<pre><code class=\"language-Python\">\nimport onnx\nfrom tvm.contrib.download import download_testdata\nfrom PIL import Image\nimport numpy as np\nimport tvm.relay as relay\nimport tvm\nfrom tvm.contrib import graph_executor\n\n\n# 图片\nimg_path = &quot;../image/imagenet_cat.png&quot;\n# img_url = &quot;https://s3.amazonaws.com/model-server/inputs/kitten.jpg&quot;\n# img_path = download_testdata(img_url, &quot;../image/imagenet_cat.png&quot;, module=&quot;data&quot;)\n\n# 重设大小为 224x224\nresized_image = Image.open(img_path).resize((224, 224))\nimg_data = np.array(resized_image).astype(&quot;float32&quot;)\n\n# 输入图像是 HWC 布局，而 ONNX 需要 CHW 输入，所以转换数组\nimg_data = np.transpose(img_data, (2, 0, 1))\n\n# 根据 ImageNet 输入规范进行归一化\nimagenet_mean = np.array([0.485, 0.456, 0.406]).reshape((3, 1, 1))\nimagenet_stddev = np.array([0.229, 0.224, 0.225]).reshape((3, 1, 1))\nnorm_img_data = (img_data / 255 - imagenet_mean) / imagenet_stddev\n\n\n# 添加 batch 维度，期望 4 维输入：NCHW。\nimg_data = np.expand_dims(norm_img_data, axis=0)\n# 保存为 bin 文件  \nnorm_img_data.astype(&quot;float32&quot;).tofile(&quot;../image/imagenet_cat.bin&quot;)\n\n\n# 目标设备配置\ntarget = 'llvm'  # 以CPU为例\n\ninput_name = &quot;data&quot;\nshape_dict = &#123;input_name: img_data.shape&#125;\n\nonnx_model = onnx.load(&quot;../model/simple.onnx&quot;)\n\nmod, params = relay.frontend.from_onnx(onnx_model, shape_dict)\n\nwith tvm.transform.PassContext(opt_level=3):\n    lib = relay.build(mod, target=target, params=params)\n\n\n# 运行相关\ndev = tvm.device(str(target), 0)\nmodule = graph_executor.GraphModule(lib[&quot;default&quot;](dev))\n\n# 保存库文件\nlib_fname = &quot;../lib/mod.so&quot;\nlib.export_library(lib_fname)\n\n# 保存模型参数\nparams_fname = &quot;../lib/mod.params&quot;\nwith open(params_fname, &quot;wb&quot;) as param_file:\n    param_file.write(relay.save_param_dict(lib.get_params()))\n\n# 保存JSON格式的计算图\njson_fname = &quot;../lib/mod.json&quot;\nwith open(json_fname, &quot;w&quot;) as json_file:\n    json_file.write(lib.get_executor_config())\n\ndtype = &quot;float32&quot;\nmodule.set_input(input_name, img_data)\nmodule.run()\noutput_shape = (1, 10)\ntvm_output = module.get_output(0, tvm.nd.empty(output_shape)).numpy()\n\nfrom scipy.special import softmax\n\n# 下载标签列表\nlabels_url = &quot;https://s3.amazonaws.com/onnx-model-zoo/synset.txt&quot;\nlabels_path = download_testdata(labels_url, &quot;synset.txt&quot;, module=&quot;data&quot;)\n\nwith open(labels_path, &quot;r&quot;) as f:\n    labels = [l.rstrip() for l in f]\n\n# 打开输出文件并读取输出张量\nscores = softmax(tvm_output)    #   直接输出模型结果\nscores = np.squeeze(tvm_output)\nranks = np.argsort(scores)[::-1]\nfor rank in ranks[0:5]:\n    print(&quot;class='%s' with probability=%f&quot; % (labels[rank], scores[rank]))\n\n</code></pre>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "tvm",
                "cmake",
                "runtime"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/06/10/deployTVM/",
            "url": "https://forcheetah.github.io/2024/06/10/deployTVM/",
            "title": "【TVM】C++部署运行TVM",
            "date_published": "2024-06-10T11:47:15.090Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇博客主要介绍如何通过 G++ 编译器编译 C++ 代码，部署 TVM。</p>\n<blockquote>\n<p>总感觉，属于我们的时代还没开始，就要结束了呢。<br>\n------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<h1 id=\"现状\"><a class=\"anchor\" href=\"#现状\">#</a> 现状</h1>\n<p>TVM 官方文档:<a href=\"https://tvm.apache.org/docs\"> 英文文档</a> <a href=\"https://tvm.hyper.ai/\">中文文档</a> 主要介绍了通过 Python 脚本和 Python 命令行 tvmc 来编译和部署 TVM。但是以这两种方式部署，部署设备还需要安装 Python 运行环境，带来额外空间占用和开销。显然不能以这种方式部署。</p>\n<p>TVM 项目的 <a href=\"https://github.com/apache/tvm/tree/main/apps/howto_deploy\">howto_deploy</a> 目录下提供了 G++ 编译 C++ 代码部署 TVM 的方式。遗憾的是给的例子没有包含模型的权重.params 和图结构.json 的加载，也没有输入图片的加载。</p>\n<p>因此本博客提供了一个简单的 C++ 部署 TVM 工程，可以在 <a href=\"https://github.com/ForCheetah/TvmCppDeploy\">TvmCppDeploy 项目</a> 找到并下载，用于你的 TVM 项目部署。</p>\n<p>该项目没有使用 <a href=\"https://github.com/apache/tvm/tree/main/apps/howto_deploy\">TVM 项目 howto_deploy</a> 中的 Makefile，而是重写了 CMakeLists.txt 文件，更方便读懂和修改。</p>\n<h1 id=\"使用方式\"><a class=\"anchor\" href=\"#使用方式\">#</a> 使用方式</h1>\n<p>下载 <a href=\"https://github.com/ForCheetah/TvmCppDeploy\">TvmCppDeploy 项目</a> 到你的本地，可以通过下载 zip 文件后解压缩，也可以直接 git：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/ForCheetah/TvmCppDeploy.git</pre></td></tr></table></figure><p>进入项目根目录，进行必要的路径修改。和 <a href=\"https://github.com/apache/tvm/tree/main/apps/howto_deploy\">TVM 项目 howto_deploy</a> 一样，本项目也提供了两种部署方式，所需要修改的内容也有些不同。</p>\n<h1 id=\"重新编译-tvm_runtime\"><a class=\"anchor\" href=\"#重新编译-tvm_runtime\">#</a> 重新编译 tvm_runtime</h1>\n<p>重新编译 tvm_runtime，和个人的 C++ 文件编译在一起，编译好的可执行文件可独立执行。</p>\n<ul>\n<li>第 1 步：打开  <code>src/Resnet50_deploy.cc </code> 文件，找到 81 行  <code>const std::string artifacts_folder(&quot;/home/xiamu/whs/temp/resnet50-tvm/&quot;);</code>  ，将其中的 <code>/home/xiamu/whs/temp/resnet50-tvm/</code>  修改为自己的已经编译好的模型路径，该路径下应该存在有  <code>mod.so, mod.params, mod.json</code> 。</li>\n<li>第 2 步：还是 <code>src/Resnet50_deploy.cc </code> 文件， 找到 132 行，将其中的图片路径 <code>/home/xiamu/whs/python/remote_tvm/imagenet_cat.bin</code>  改为自己的图片路径，该 bin 文件应当是已经转换好的 float 格式文件。</li>\n<li>第 3 步：打开   <code>src/tvm\\_runtime\\_pack.cc</code> ， 将文件中所有的路径中的  <code>/home/xiamu/tvm</code>   修改为你本地 TVM 工程的根目录路径。 修改完一定要检查一下对应的目录中是否有相应的文件。</li>\n<li>第 4 步：打开  <code>CMakeLists.txt</code> , 找到第 10 行  <code>set(TVM_ROOT /home/xianmu/tvm)</code> ，将其中的 <code>/home/xianmu/tvm</code>  改成你本地 TVM 工程的根目录路径。</li>\n<li>为防止编译报错，可以将 <code>部署方式二： tvm_runtime.so 作为动态链接库编译</code> 对应的代码（43 至 63 行） 注释掉（当前可能还没有对其进行修改）。</li>\n<li>第 5 步：编译和执行，在根目录下：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token parameter variable\">-j4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>./MyRunnable</pre></td></tr></table></figure><h1 id=\"tvm_runtimeso-作为动态链接库编译\"><a class=\"anchor\" href=\"#tvm_runtimeso-作为动态链接库编译\">#</a> tvm_runtime.so 作为动态链接库编译</h1>\n<p>tvm_runtime.so 作为动态链接库，仅编译个人的 C++ 文件，运行时需要链接 libtvm_runtime.so</p>\n<p>这种方式的修改与第一种方式略有不同，修改如下：</p>\n<ul>\n<li>第 1 步：打开  <code>src/Resnet50_deploy.cc </code> 文件，找到 81 行  <code>const std::string artifacts_folder(&quot;/home/xiamu/whs/temp/resnet50-tvm/&quot;);</code>  ，将其中的 <code>/home/xiamu/whs/temp/resnet50-tvm/</code>  修改为自己的已经编译好的模型路径，该路径下应该存在有  <code>mod.so, mod.params, mod.json</code> 。</li>\n<li>第 2 步：还是 <code>src/Resnet50_deploy.cc </code> 文件， 找到 132 行，将其中的图片路径 <code>/home/xiamu/whs/python/remote_tvm/imagenet_cat.bin</code>  改为自己的图片路径，该 bin 文件应当是已经转换好的 float 格式文件。</li>\n<li>第 3 步：打开  <code>CMakeLists.txt</code> , 找到第 10 行  <code>set(TVM_ROOT /home/xianmu/tvm)</code> ，将其中的 <code>/home/xianmu/tvm</code>  改成你本地 TVM 工程的根目录路径。将 62 行的 <code>$&#123;TVM_ROOT&#125;/build</code>  libtvm_runtime.so 路径修改为你存放 libtvm_runtime.so 库的路径。</li>\n<li>为防止编译报错，可以将 <code>部署方式一： 重新编译 tvm_runtime</code>  对应的代码（17 至 38 行）注释掉（当前可能还没有对其进行修改）。</li>\n<li>第 5 步：编译和执行，在根目录下：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token parameter variable\">-j4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>./MyExcute</pre></td></tr></table></figure><h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "tvm",
                "cmake",
                "runtime"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/05/24/tvm1/",
            "url": "https://forcheetah.github.io/2024/05/24/tvm1/",
            "title": "【TVM】根据例子走通代码库",
            "date_published": "2024-05-24T14:49:36.319Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>最近开始学习 TVM。感觉 TVM 英文文档中 <a href=\"https://tvm.apache.org/docs/dev/tutorial/codebase_walkthrough.html\">TVM Codebase Walkthrough by Example</a>    一节对于理解 TVM 工程非常有用。本篇文章只是翻译，可以直接跳转查看英文全文。</p>\n<blockquote>\n<p>这个时代有这么多愿意开源并将技术介绍给我们的行业大牛，真是我们的荣幸，膜拜！<br>\n------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<h1 id=\"codebase-structure-overview\"><a class=\"anchor\" href=\"#codebase-structure-overview\">#</a> Codebase Structure Overview</h1>\n<p>在 TVM 存储库的根目录中，我们有以下子目录，它们共同构成了大部分代码库。</p>\n<ul>\n<li><strong>src</strong><br>\nC++ code for operator compilation and deployment runtimes.<br>\n 算子编译 、 runtime 部署 的 C++ 代码</li>\n<li><strong>src/relay</strong><br>\nImplementation of Relay, a new functional IR for deep learning framework.<br>\nRelay IR 的实现      算子的映射关系在 src/relay/op</li>\n<li><strong>python</strong><br>\nPython frontend that wraps C++ functions and objects implemented in src.<br>\npython 前端</li>\n<li><strong>src/topi</strong><br>\nCompute definitions and backend schedules for standard neural network operators.<br>\n 计算标准神经网络算子的定义和后端调度</li>\n</ul>\n<p>TVM 中 Python 和 C++ 的互操作性不是单向的。尽管在 TVM 中 C++ 完成繁重的内部执行工作，Python 完成用户接口， TVM 中也存在 C++ 调用 Python 的情况：For example, the convolution operator is implemented in Python, and its implementation is invoked from C++ code in Relay.（Relay 中的 C++ 调用 Python 实现的卷积算子）</p>\n<h1 id=\"vector-add-example\"><a class=\"anchor\" href=\"#vector-add-example\">#</a> Vector Add Example</h1>\n<p>使用 vector add 的例子来查看底层 TVM API.</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">1024</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>A <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>te<span class=\"token punctuation\">.</span>placeholder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>B <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>te<span class=\"token punctuation\">.</span>placeholder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>C <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>te<span class=\"token punctuation\">.</span>compute<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> i<span class=\"token punctuation\">:</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> B<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里面 A、B、C 都是  <code>tvm.tensor.Tensor</code>   其 Python 定义位于 <code>python/tvm/te/tensor.py</code> . 支撑的 C++ 定义位于 <code>include/tvm/te/tensor.h</code>  和 <code>src/te/tensor.cc</code>  所有的 Python 类型定义都能找到对应的相同名字的 C++ 定义。</p>\n<p>Python 对 C++ 的包装位于  <code>python/tvm/_ffi/</code> 。</p>\n<p>一个 Tensor 包含一个 Operation 类，定义于 python/tvm/te/tensor.py，对应的 C++ 实现位于 <code>include/tvm/te/operation.h</code>  和 <code>src/tvm/te/operation</code>  。 <code>Tensor</code>  是  <code>Operation</code>  类的输出。</p>\n<p>我们将输出张量 C 对应的操作传递给 <code>tvm.te.create_schedule()</code>  函数 （来自于 <code>python/tvm/te/schedule.py</code> 。）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>te<span class=\"token punctuation\">.</span>create_schedule<span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">.</span>op<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这个函数映射到 C++ 函数 <code>include/tvm/schedule.h</code> 。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>inline Schedule create_schedule<span class=\"token punctuation\">(</span>Array<span class=\"token operator\">&lt;</span>Operation<span class=\"token operator\">></span> ops<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> Schedule<span class=\"token punctuation\">(</span>ops<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>Schedule</code>  包含 <code>Stage</code>  输出  <code>Operation</code>  的集合。</p>\n<p><code>Stage</code>  对应于一个操作 <code>Operation</code> 。上面的 vector add 操作中有两个 placeholder ops 和一个 compute op. 所以 <code>Schedule s</code>  有三个状态  <code>Stage</code> ，每个 <code>Stage</code>  持有以下信息： 循环嵌套结构、每个循环的类型（ <code>Parallel，Vectorized，Unrolled</code> ）、以及在下一个循环嵌套 <code>Stage</code>  中在哪里执行它自己的计算。</p>\n<p><code>Schedule</code>  和 <code>Stage</code>  本身定义在 <code>tvm/python/te/schedule.py</code> ，  <code>include/tvm/te/schedule.h</code> ， 和 <code>src/te/schedule/schedule_ops.cc</code> 。</p>\n<p>为简单起见，我们使用 <code>tvm.build(...)</code>  处理上方 <code>create_schedule()</code>  函数创建的默认 <code>Schedule s</code>  和 &lt;em&gt;。我们必须添加必要的线程绑定，来使得其能在 GPU 上运行：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>target <span class=\"token operator\">=</span> <span class=\"token string\">\"cuda\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bx<span class=\"token punctuation\">,</span> tx <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">.</span>op<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> factor<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span>bx<span class=\"token punctuation\">,</span> tvm<span class=\"token punctuation\">.</span>te<span class=\"token punctuation\">.</span>thread_axis<span class=\"token punctuation\">(</span><span class=\"token string\">\"blockIdx.x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span> tvm<span class=\"token punctuation\">.</span>te<span class=\"token punctuation\">.</span>thread_axis<span class=\"token punctuation\">(</span><span class=\"token string\">\"threadIdx.x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fadd <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>tvm.build(...)</code> ，定义在 <code>python/tvm/driver/build_module.py</code> ， 需要输入一个 <code>Schedule</code> ;  <code>input</code> , <code>output Tensor</code> ; 以及一个 <code>target</code> 。返回一个 <code>tvm.runtime.Module</code> 。</p>\n<p>整个 <code>tvm.build(...)</code>  过程可以分成两步：</p>\n<ul>\n<li>\n<p>i. 降级 高级的、初始的循环嵌套结构被转换为 最终的、低级的 IR</p>\n</li>\n<li>\n<p>ii. 代码生成 low level IR 生成目标机器码</p>\n</li>\n</ul>\n<p>降级是通过 <code>tvm.lower()</code>  函数完成的，它定义在 <code>python/tvm/build\\_module.py</code> 。第一，指定绑定推理，一个最初的循环嵌套结构就创建好了。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">lower</span><span class=\"token punctuation\">(</span>sch<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>          args<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>          name<span class=\"token operator\">=</span><span class=\"token string\">\"default_function\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          binds<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          simple_mode<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   bounds <span class=\"token operator\">=</span> schedule<span class=\"token punctuation\">.</span>InferBound<span class=\"token punctuation\">(</span>sch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   stmt <span class=\"token operator\">=</span> schedule<span class=\"token punctuation\">.</span>ScheduleOps<span class=\"token punctuation\">(</span>sch<span class=\"token punctuation\">,</span> bounds<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>边界推断是推断所有循环边界和中间缓冲区大小的过程。如果你的目标是 CUDA，且你用了 share memory，它需要的最小 size 在此处确定。绑定推理时在 <code>src/te/schedule/bound.cc，src/te/schedule/graph.cc </code>  和  <code>src/te/schedule/message\\_passing.cc</code>  中实现的。</p>\n<p><code>stmt</code> ， <code>ScheduleOps()</code>  的输出，表示一个初识的循环嵌套结构。如果在 schedule 中已经应用了 <code>reorder</code>  和 <code>split</code>  原语，那么初始的循环嵌套结构已经反映了这些变化。 <code>ScheduleOps()</code>  定义在 <code>rc/te/schedule/schedule_ops.cc</code> 。</p>\n<p>接下来应用一些 lowering passes to  <code>stmt</code>  . 这些 passes 在 <code>src/tir/pass</code>  子文件夹下实现。举个例子，如果在你的 <code>schedule</code>  中应用了 <code>vectorize</code>  或者 <code>unroll</code>  原语，他们会被应用到循环 vectorization 和 unrolling passes。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>stmt <span class=\"token operator\">=</span> ir_pass<span class=\"token punctuation\">.</span>VectorizeLoop<span class=\"token punctuation\">(</span>stmt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>stmt <span class=\"token operator\">=</span> ir_pass<span class=\"token punctuation\">.</span>UnrollLoop<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    stmt<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cfg<span class=\"token punctuation\">.</span>auto_unroll_max_step<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cfg<span class=\"token punctuation\">.</span>auto_unroll_max_depth<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cfg<span class=\"token punctuation\">.</span>auto_unroll_max_extent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cfg<span class=\"token punctuation\">.</span>unroll_explicit<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>在降级 lowering 结束后， <code>build()</code>  函数生成目标机器代码。如果你的设备是 X86, 这个代码可能包含 SSE 或者 AVX 指令；如果是 CUDA 设备，将包含 PTX 指令。 此外，除了目标特定的机器代码之外，TVM 还生成负责内存管理、内核启动等的主机端代码。</p>\n<p><code>build\\_module()</code>  函数完成代码生成，定义在 <code>python/tvm/target/codegen.py</code> 。在 C++ 端代码生成定义在 <code>src/target/codegen</code> 。 <code>build\\_module()</code>  Python 函数会搜索在 <code>src/target/codegen/codegen.cc</code>  中的 <code>build()</code>  函数。</p>\n<p><code>build()</code>  函数 <code>PackedFunc</code>  注册表中为目标设备查找代码生成器，并调用找到的函数。例如， <code>codegen.build\\_cuda</code>  函数注册在 <code>src/codegen/build_cuda_on.cc</code> ，就像这样：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>TVM_REGISTER_GLOBAL<span class=\"token punctuation\">(</span><span class=\"token string\">\"codegen.build_cuda\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span>set_body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> BuildCUDA<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上方的 <code>BuildCUDA()</code>  函数使用定义在 <code>src/codegen/codegen_cuda.cc</code>  的 <code>CodeGenCUDA</code>  类，从 lowered IR 生成 CUDA kernel source，并使用 NVRTC 编译 kernel。如果你的目标设备使用 LLVM，包括 X86、ARM、NVPTX 和 AMDGPU，代码可由定义在 <code>src/codegen/llvm/codegen_llvm.cc</code>  的 <code>CodeGenLLVM</code>  来生成。 <code>CodeGenLLVM</code>  将 TVM IR 转换成 LLVM IR，运行一些 LLVM 优化 passes，以及生成目标机器码。</p>\n<p>在 <code>src/codegen/codegen.cc</code>  中的 <code>Build()</code>  函数会返回一个 <code>runtime::Module</code>  类，它定义在 <code>include/tvm/runtime/module.h</code>  和 <code>src/runtime/module.cc</code> 。一个 <code>Module</code>  类是一个潜在目标 设备的特定 <code>ModuleNode</code>  的容器。</p>\n<p>每个后端都实现一个 <code>ModuleNode</code>  的子类，来添加目标特定的 runtime API 调用。 例如，CUDA 后端在 <code>src/runtime/cuda/cuda_module.cc</code>  实现 <code>CUDAModuleNode</code>  类，来管理 CUDA 驱动 API。上方的 <code>BuildCUDA()</code>  函数用 <code>runtime::Module</code>  包装了 <code>CUDAModuleNode</code> ，并包装到 Python 端。LLVM 后端在 <code>src/codegen/llvm/llvm_module.cc</code>  实现了 <code>LLVMModuleNode</code> ，处理了 JIT 执行和编译代码。其他对应各个后端的 <code>ModuleNode</code>  子类可以在 <code>src/runtime</code>  子文件夹找到。<br>\n返回的 <code>module</code> ，可以被认作编译函数和设备 API 的组合，可以被 TVM 的 NDArray objects 调用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dev <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>uniform<span class=\"token punctuation\">(</span>size<span class=\"token operator\">=</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dev<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>b <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>uniform<span class=\"token punctuation\">(</span>size<span class=\"token operator\">=</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dev<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>c <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>C<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dev<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fadd<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>output <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在幕后，TVM 会自动分配设备内存并管理内存传输。为了实现这个目标，每个后端都需要继承在 <code>include/tvm/runtime/device_api.h</code>  定义的 <code>DeviceAPI</code>  类，使用设备特定的 API 重写里面的内存管理方法。例如，CUDA 后端在 <code>src/runtime/cuda/cuda_device_api.cc</code>  使用 <code>cudaMalloc</code> 、 <code>cudaMemcpy</code>  实现了 <code>CUDADeviceAPI</code> .</p>\n<p>第一次使用 <code>fadd(a, b, c)</code>  调用编译后的模块时，会调用  <code>ModuleNode</code>  的  <code>GetFunction()</code>  方法来获取可用于内核调用的  <code>PackedFunc</code> 。例如，在 <code>src/runtime/cuda/cuda_module.cc</code>  CUDA 后端实现了 <code>CUDAModuleNode::GetFunction()</code>  函数如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PackedFunc CUDAModuleNode<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>GetFunction<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      const std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      const std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>shared_ptr<span class=\"token operator\">&lt;</span>ModuleNode<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> sptr_to_self<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  auto it <span class=\"token operator\">=</span> fmap_<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  const FunctionInfo<span class=\"token operator\">&amp;</span> info <span class=\"token operator\">=</span> it<span class=\"token operator\">-</span><span class=\"token operator\">></span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  CUDAWrappedFunc f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  f<span class=\"token punctuation\">.</span>Init<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">,</span> sptr_to_self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>arg_types<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>launch_param_tags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> PackFuncVoidAddr<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>arg_types<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>PackedFunc</code>  的重载函数 <code>operator()</code>  会被调用。从而会调用定义在 <code>src/runtime/cuda/cuda_module.cc</code>  的 <code>CUDAWrappedFunc</code>  的 <code>operator()</code>  函数，最终我们会看到 <code>cuLaunchKernel</code>  驱动会调用：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CUDAWrappedFunc</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                  TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                  <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> void_args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> device_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">CUDA_CALL</span><span class=\"token punctuation\">(</span><span class=\"token function\">cudaGetDevice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>device_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fcache_<span class=\"token punctuation\">[</span>device_id<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      fcache_<span class=\"token punctuation\">[</span>device_id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> m_<span class=\"token operator\">-></span><span class=\"token function\">GetFunc</span><span class=\"token punctuation\">(</span>device_id<span class=\"token punctuation\">,</span> func_name_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    CUstream strm <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CUstream<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CUDAThreadEntry</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ThreadLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    ThreadWorkLoad wl <span class=\"token operator\">=</span> launch_param_config_<span class=\"token punctuation\">.</span><span class=\"token function\">Extract</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    CUresult result <span class=\"token operator\">=</span> <span class=\"token function\">cuLaunchKernel</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        fcache_<span class=\"token punctuation\">[</span>device_id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        wl<span class=\"token punctuation\">.</span><span class=\"token function\">grid_dim</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        wl<span class=\"token punctuation\">.</span><span class=\"token function\">grid_dim</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        wl<span class=\"token punctuation\">.</span><span class=\"token function\">grid_dim</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        wl<span class=\"token punctuation\">.</span><span class=\"token function\">block_dim</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        wl<span class=\"token punctuation\">.</span><span class=\"token function\">block_dim</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        wl<span class=\"token punctuation\">.</span><span class=\"token function\">block_dim</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> strm<span class=\"token punctuation\">,</span> void_args<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>本文概括了 TVM 如何编译和执行函数。 虽然本文没有详细说明 TOPI 或 Relay，但最终所有神经网络算子都会经历与上述相同的编译过程。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "accelerate",
                "conv",
                "tvm"
            ]
        }
    ]
}