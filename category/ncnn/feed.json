{
    "version": "https://jsonfeed.org/version/1",
    "title": "Пусть этот камень будет более крепким, чем человек • All posts by \"ncnn\" category",
    "description": "有自己的博客很帅，但是我很懒，要命！！！",
    "home_page_url": "https://forcheetah.github.io",
    "items": [
        {
            "id": "https://forcheetah.github.io/2025/04/16/ncnn01/",
            "url": "https://forcheetah.github.io/2025/04/16/ncnn01/",
            "title": "【NCNN】学习ncnn模型转换",
            "date_published": "2025-04-16T13:23:06.055Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇通过代码介绍 NCNN 的模型转换过程。模型转换过程逻辑简单，所以本篇文章只对关键节点进行介绍。<a href=\"https://github.com/Tencent/ncnn\">NCNN 工程地址</a>。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>NCNN 是由 腾讯优图实验室 开发的 开源神经网络推理框架，专注于为 移动端和嵌入式设备 提供高效、轻量的深度学习模型部署解决方案。自 2017 年开源（基于 BSD 3-Clause 协议）以来，因其高性能、低功耗和跨平台特性，成为移动端 AI 推理的主流框架之一。</p>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>ncnn 编译部署方法，网络上很多，也可以参考工程中的 ：docs/how-to-build/how-to-build.md。编译时出现 Protoc 报错，可以参考工程中的 ：docs/how-to-use-and-FAQ/FAQ-ncnn-protobuf-problem.zh.md</p>\n<p>编译完成之后的使用命令，以 onnx 模型为例：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># onnx 模型转换为 ncnn 模型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./build/tools/onnx/onnx2ncnn  /home/user/yourpath/model.onnx /home/user/yourpath/model_ncnn.param /home/user/yourpath/model_ncnn.bin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 如果量化的话，需要构建一个校准数据集列表 imagelist.txt  linux 命令可方便的构建这个列表</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">find</span> yourpath/dataset/img/ <span class=\"token parameter variable\">-type</span> f <span class=\"token operator\">></span> imagelist.txt</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 量化步骤 1：生成 table 文件。tabel 文件记录根据校准数据集得到的量化因子</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>./build/tools/quantize/ncnn2table /home/user/yourpath/model_ncnn.param  /home/user/yourpath/model_ncnn.bin /home/user/yourpath/dataset/imagelist.txt /home/user/yourpath/model_ncnn.table <span class=\"token assign-left variable\">mean</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0,0</span>,0<span class=\"token punctuation\">]</span> <span class=\"token assign-left variable\">norm</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1,1</span>,1<span class=\"token punctuation\">]</span> <span class=\"token assign-left variable\">shape</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">224,224</span>,3<span class=\"token punctuation\">]</span>  <span class=\"token assign-left variable\">thread</span><span class=\"token operator\">=</span><span class=\"token number\">8</span> <span class=\"token assign-left variable\">method</span><span class=\"token operator\">=</span>kl <span class=\"token assign-left variable\">pixel</span><span class=\"token operator\">=</span>RGB</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 量化步骤 2：完成参数量化。根据 table 中的量化因子，将权重和参数量化为 int8</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>./build/tools/quantize/ncnn2int8 /home/user/yourpath/model_ncnn.param  /home/user/yourpath/model_ncnn.bin   /home/user/yourpath/model_ncnn_int8.param  /home/user/yourpath/model_ncnn_int8.bin  /home/user/yourpath/model_ncnn.table</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 执行。 执行例子在 example 文件夹下，可以参考这些运行例子自己写一个，调用编译好的模型，执行。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>./build/examples/simple_net /home/user/yourpath/dataset/img/img.jpg</pre></td></tr></table></figure><h1 id=\"模型\"><a class=\"anchor\" href=\"#模型\">#</a> 模型</h1>\n<p>构建模型的代码：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">modeltest</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inp_c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> istrain<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>modeltest<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>in_channels<span class=\"token operator\">=</span>inp_c<span class=\"token punctuation\">,</span> out_channels<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> groups<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>bn1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>relu1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        self<span class=\"token punctuation\">.</span>maxpool <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        self<span class=\"token punctuation\">.</span>conv2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>in_channels<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> out_channels<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> groups<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        self<span class=\"token punctuation\">.</span>bn2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        self<span class=\"token punctuation\">.</span>relu2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        self<span class=\"token punctuation\">.</span>avgpool <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>AdaptiveAvgPool2d<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        self<span class=\"token punctuation\">.</span>fc <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bn1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bn2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>avgpool<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>flatten<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>fc<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    x_ <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span>x_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    model <span class=\"token operator\">=</span> modeltest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    model<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    torch<span class=\"token punctuation\">.</span>onnx<span class=\"token punctuation\">.</span>export<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> <span class=\"token string\">\"models/simple.onnx\"</span><span class=\"token punctuation\">,</span> opset_version<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                      input_names<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> output_names<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><a href=\"https://netron.app/\">Netron</a> 支持多种神经网络模型的可视化，包括 onnx 和 ncnn 的 param。</p>\n<p>以该模型为例，展示 ncnn 的模型转换过程。</p>\n<p><img loading=\"lazy\" data-src=\"1744809573966.jpg\" alt=\"onnx模型和param模型\"></p>\n<h1 id=\"模型转换\"><a class=\"anchor\" href=\"#模型转换\">#</a> 模型转换</h1>\n<p>模型转换使用的是工具文件夹下的 onnx2ncnn，它的源文件位于  <code>tools/onnx/onnx2ncnn.cpp</code></p>\n<h3 id=\"解析onnx的辅助工具\"><a class=\"anchor\" href=\"#解析onnx的辅助工具\">#</a> 解析 onnx 的辅助工具</h3>\n<p>源文件中有大量 onnx 命名空间下的类和函数，如 <code>onnx::ModelProto</code> ， <code>onnx::TensorProto</code>  等。<a href=\"http://xn--buildonnx-4b6nk3cm5ay10aouap0d8yowov5l0btjgjtj9naf74zwyguu2bzvn7krp76dhuxan96a.pb.cc\">这些类和函数链接到 build 编译文件夹下自动生成的 onnx.pb.cc</a> 和 onnx.pb.h 源文件。</p>\n<p>它们是怎么来的呢？</p>\n<p>1.Protocol Buffers</p>\n<p>Protocol Buffers 是一种由 Google 开发的语言无关、平台无关、可扩展的序列化数据格式。它允许定义数据结构，然后使用特定的编译器（protoc）生成不同编程语言的代码，用于读写这些数据结构。</p>\n<p>2.onnx.proto 文件</p>\n<p>onnx.proto 文件使用 Protocol Buffers 语法来定义 ONNX 模型的各种数据结构和消息类型，这些就属于元数据。它们描述了 ONNX 模型各个组成部分的结构和关系。</p>\n<p>可以从 ONNX 官方的 GitHub 仓库（<a href=\"https://github.com/onnx/onnx\">https://github.com/onnx/onnx</a> ）克隆代码，onnx.proto 文件就在 onnx 目录下。</p>\n<p><a href=\"http://3.onnx.pb.cc\">3.onnx.pb.cc</a> 和 onnx.pb.h 文件</p>\n<p>有了 protoc 编译器和 onnx.proto 文件之后，就能使用 <code>protoc --cpp_out=. onnx/onnx.proto</code>  命令来生成 <a href=\"http://onnx.pb.cc\">onnx.pb.cc</a> 和 onnx.pb.h 文件</p>\n<p>而 NCNN 是通过 CmakeLists.txt 中通过 <code>protobuf_generate_cpp(ONNX_PROTO_SRCS ONNX_PROTO_HDRS onnx.proto)</code>  命令，实现 <a href=\"http://onnx.pb.cc\">onnx.pb.cc</a> 和 onnx.pb.h 文件的生成。</p>\n<p>4. 解析 onnx</p>\n<p>调用 <a href=\"http://onnx.pb.cc\">onnx.pb.cc</a> 和 onnx.pb.h 文件中的类来解析 onnx 模型。</p>\n<h3 id=\"转换结果\"><a class=\"anchor\" href=\"#转换结果\">#</a> 转换结果</h3>\n<p>直接看转换结果。转换过程很长，但无非是将 onnx 模型中的信息按照顺序取出来，重新构建成 ncnn 要求的样子。</p>\n<p>model_ncnn.param（未加密文件）可以以文本的方式直接打开。该文件存储了网络结构上的所有信息。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">7767517</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">9</span> <span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Input            data                     <span class=\"token number\">0</span> <span class=\"token number\">1</span> data</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Convolution      /conv1/Conv              <span class=\"token number\">1</span> <span class=\"token number\">1</span> data /conv1/Conv_output_0 <span class=\"token assign-left variable\">0</span><span class=\"token operator\">=</span><span class=\"token number\">4</span> <span class=\"token assign-left variable\">1</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">11</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">2</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">12</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">3</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">13</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">4</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">14</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">15</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">16</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">5</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">6</span><span class=\"token operator\">=</span><span class=\"token number\">108</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ReLU             /relu1/Relu              <span class=\"token number\">1</span> <span class=\"token number\">1</span> /conv1/Conv_output_0 /relu1/Relu_output_0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Pooling          /maxpool/MaxPool         <span class=\"token number\">1</span> <span class=\"token number\">1</span> /relu1/Relu_output_0 /maxpool/MaxPool_output_0 <span class=\"token assign-left variable\">0</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">1</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">11</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">2</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token assign-left variable\">12</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token assign-left variable\">3</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">13</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">14</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">15</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">5</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Convolution      /conv2/Conv              <span class=\"token number\">1</span> <span class=\"token number\">1</span> /maxpool/MaxPool_output_0 /conv2/Conv_output_0 <span class=\"token assign-left variable\">0</span><span class=\"token operator\">=</span><span class=\"token number\">5</span> <span class=\"token assign-left variable\">1</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">11</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">2</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">12</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">3</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">13</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">4</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">14</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">15</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">16</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">5</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">6</span><span class=\"token operator\">=</span><span class=\"token number\">180</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ReLU             /relu2/Relu              <span class=\"token number\">1</span> <span class=\"token number\">1</span> /conv2/Conv_output_0 /relu2/Relu_output_0</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Pooling          /avgpool/GlobalAveragePool <span class=\"token number\">1</span> <span class=\"token number\">1</span> /relu2/Relu_output_0 /avgpool/GlobalAveragePool_output_0 <span class=\"token assign-left variable\">0</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">4</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Flatten          /Flatten                 <span class=\"token number\">1</span> <span class=\"token number\">1</span> /avgpool/GlobalAveragePool_output_0 /Flatten_output_0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>InnerProduct     /fc/Gemm                 <span class=\"token number\">1</span> <span class=\"token number\">1</span> /Flatten_output_0 end <span class=\"token assign-left variable\">0</span><span class=\"token operator\">=</span><span class=\"token number\">10</span> <span class=\"token assign-left variable\">1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">2</span><span class=\"token operator\">=</span><span class=\"token number\">50</span></pre></td></tr></table></figure><p>第一行 “7767517” 是个用作校验的魔数。</p>\n<p>第二行 9 9 是 9 个节点（node） + 9 个输入输出 tensor（middle tensor）</p>\n<p>之后的 9 行是所有的节点及其拓扑信息。</p>\n<p>例如  <code>Input            data                     0 1 data</code>  ，节点类型为 Input（输入节点），名称为 data，有 0 个输入，1 个输出，输出 tensor 的名字叫做 data。<br>\n <code>Convolution      /conv1/Conv              1 1 data /conv1/Conv_output_0 0=4 1=3 11=3 2=1 12=1 3=1 13=1 4=0 14=0 15=0 16=0 5=1 6=108</code>   这一行，节点类型是 Convolution，名称为 /conv1/Conv，有一个输入 tensor，名称为 data，有一个输出 tensor，名称为 /conv1/Conv_output_0， 后续的键值对的具体含义可以查阅  <code>tools/onnx/onnx2ncnn.cpp</code> 。例如键 1 和 11 都代表 kernel 的宽和高。不同类型的节点，其相同的键也可能代表不同的意思。</p>\n<p>model_ncnn.param 文件包含了结构信息，剩下的权重偏置数据存储在 model_ncnn.bin 文件中。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，并指明哪一篇博客，我看到一定及时回复！</p>\n",
            "tags": [
                "compiler"
            ]
        }
    ]
}