{
    "version": "https://jsonfeed.org/version/1",
    "title": "Пусть этот камень будет более крепким, чем человек",
    "description": "有自己的博客很帅，但是我很懒，要命！！！",
    "home_page_url": "https://forcheetah.github.io",
    "items": [
        {
            "id": "https://forcheetah.github.io/2025/02/05/aicompile04/",
            "url": "https://forcheetah.github.io/2025/02/05/aicompile04/",
            "title": "【AI编译】如何进行内存分配",
            "date_published": "2025-02-05T11:34:55.219Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本文讲解神经网络推理过程中的内存分配相关内容。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"tensor类型\"><a class=\"anchor\" href=\"#tensor类型\">#</a> Tensor 类型</h1>\n<p>不同的 tensor 有着不同的生命周期，神经网络推理过程中主要有三种 Tensor 类型：<br>\n1. 输入输出 tensor<br>\n 输出 tensor 是下一节点的输入 tensor，它们一体两面，这种类型的 tensor 生命周期起于 “生产节点”，终于最后一个 “消费节点”。<br>\n2. 权重 tensor<br>\n 权重 tensor 和算子绑定在一起，生命周期随着算子开始，也随算子结束。但也可能存在共享权重的情况，例如 tiling 操作产生的并行算子共享 Weight，<a href=\"https://tpumlir.org/docs/developer_manual/10_layergroup.html#mem\">算能 TPU 选择将 weight 常驻内存</a>。<br>\n3. 中间 tensor<br>\n 中间 tensor 指的是算子计算时不得不开辟的临时空间，比如用来存储中间结果等，其大小和算子的具体实现有关。中间 tensor 的生命周期和权重 tensor 类似，随着算子开始，也随算子结束，但没有权重 tensor 的共享问题。</p>\n<h1 id=\"原地操作inplace-operation\"><a class=\"anchor\" href=\"#原地操作inplace-operation\">#</a> 原地操作（Inplace Operation）</h1>\n<p>原地覆盖不再需要的数据，不再开辟新的输出 tensor 空间。例如 Element-wise 算子、Relu 算子等可以在原地进行操作。</p>\n<p><img loading=\"lazy\" data-src=\"1738754981561.jpg\" alt=\"图 原地操作举例\"></p>\n<p>如图所示，B、C、D 三个 tensor 可以共用同一个内存空间。</p>\n<p><img loading=\"lazy\" data-src=\"1738755079647.jpg\" alt=\"图 原地操作举例2\"></p>\n<p>如图，当 B 的生命周期未结束时，C 不能共用 B 的内存空间。</p>\n<h1 id=\"内存共享memory-sharing\"><a class=\"anchor\" href=\"#内存共享memory-sharing\">#</a> 内存共享（Memory Sharing）</h1>\n<p>分析张量的生命周期，生命周期结束的张量及时释放，其所占据的空间可以被重复利用。拿算能 TPU 网站的图来举一个例子。如下图所示，这是一段简单的网络，有三个算子，分别是 Conv、Conv、和 Add。两个黑色的圆圈是权重，其余绿色的圆圈是输入输出 tensor 和中间 tensor。</p>\n<p><img loading=\"lazy\" data-src=\"1738755160616.jpg\" alt=\"图 算能TPU网络举例\"></p>\n<p>图源：<a href=\"https://tpumlir.org/docs/developer_manual/10_layergroup.html#mem\">算能 TPU 网络举例</a></p>\n<p><img loading=\"lazy\" data-src=\"1738755172523.jpg\" alt=\"图 算能TPU网络举例2\"></p>\n<p>图源：<a href=\"https://tpumlir.org/docs/developer_manual/10_layergroup.html#mem\">算能 TPU 内存生命周期</a></p>\n<p>上图展示了所有 tensor 的生命周期，三个算子的周期分别标记为 T2，T5 和 T7。<br>\n1.0 号 tensor 是首个 Conv 节点的输入 tensor，W1 是权重，所以 T2 开始 T2 结束，及时释放；<br>\n2.3 号 tensor 有两个消费节点，所以需要到 T7 才释放；<br>\n释放后的空间可以重复利用。</p>\n<h1 id=\"简单的分析规则\"><a class=\"anchor\" href=\"#简单的分析规则\">#</a> 简单的分析规则</h1>\n<p><img loading=\"lazy\" data-src=\"1738755220468.jpg\" alt=\"图 分析规则\"></p>\n<p>这里给出一个基本的 Tensor 生命周期分析流程，如图所示。可以通过这个流程来确定输入输出的生命周期。</p>\n<p>先初始化 tensor 的生命周期，它等于 tensor 的出度，也就是后面连着几个 “消费者节点”。<br>\n再按照执行顺序遍历网络结构，①如果当前节点的输入 Input 的生命周期大于 1，意味着它不能被释放，也不能被覆盖，需要为 Ouput 开辟新空间，同时 Input 生命周期减一；②如果当前节点的输入 Input 的生命周期等于 1，则进一步判断是否是 Inplace 节点；③如果不是 Inplace 节点，则仍需要为 Output 开辟空间，计算完成后 Input 可以释放；④是 Inplace 节点，则可以原地计算。</p>\n<h1 id=\"内存拼图游戏\"><a class=\"anchor\" href=\"#内存拼图游戏\">#</a> 内存拼图游戏</h1>\n<p>在完成网络的 Tensor 生命周期分析之后，就要尝试进行实际的内存分配，以确定设备内存是否足够放得下。建立一个坐标系，以横轴为时间 (Time)，纵轴为空间 (Addr)，把所有 tensor 作为一个图块拼进去，图块与图块之间不能有交叠，就像一个拼图游戏。<br>\n下图是算能 TPU 给出的内存分配例子，可供参考。不过这个图是以横轴为空间 (Addr)，纵轴为时间 (Time)。</p>\n<p><img loading=\"lazy\" data-src=\"1738755258225.jpg\" alt=\"图 算能TPU内存分配\"></p>\n<p>图源：<a href=\"https://tpumlir.org/docs/developer_manual/10_layergroup.html#mem\">算能 TPU 内存分配</a></p>\n<p>这个拼图游戏并没有看起来那么容易，当网络结构复杂的时候，tensor 大小多样，拼图的方式也多样。不同的拼图方式可能直接决定内存分配的成功与失败。这里举个简单的例子，如图所示：</p>\n<p><img loading=\"lazy\" data-src=\"1738755278680.jpg\" alt=\"图 内存分配例子\"></p>\n<p>假设有三个内存块需要分配，他们所占空间和生命周期都已经确定。设备内存只有 20 大小。假如按照左图的拼图方式，会发现图块③没有空间存放，超出内存限制。而采用右图的拼图方式，内存分配就顺利实现。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "compile",
                "AI"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2025/01/21/zatanNoval2/",
            "url": "https://forcheetah.github.io/2025/01/21/zatanNoval2/",
            "title": "【感想】写作进度报告2",
            "date_published": "2025-01-21T13:21:26.955Z",
            "content_html": "<h1 id=\"进度\"><a class=\"anchor\" href=\"#进度\">#</a> 进度</h1>\n<p>小说文字数量已经超过 8 万，如果第一部的目标是 40 万字的话，那么现在已经完成了 1/5，可喜可贺。</p>\n<p>当世界观一点点建立完成之后，书里的人物就活了，他该如何行动，产生怎样的情况与冲突，都是自然而然的。这时候写故事发展，不是写他应该怎么去做，而是在那种情景中他会怎么去做。这么想想，作者仿佛变成一个观察这个微缩世界的旁观者。</p>\n<h1 id=\"需要改进\"><a class=\"anchor\" href=\"#需要改进\">#</a> 需要改进</h1>\n<p>1. 反派描写</p>\n<p>发现描写反派有些困难，毕竟我们平时接触不到，纯凭想象。如何把反派写活确实不容易。</p>\n<p>现实中的人都会相对中庸一点，而书中的人就要极端一点。</p>\n<p>在达到这个水平之后，还可以给反派一些其他的特点，比如杀人如麻中也对某些事情怀有温情，不可一世中也小心对待某些事情。人本来就是矛盾的复合体，这样的人才更有真实感。</p>\n<p>2. 讲话的个性</p>\n<p>现实生活中，每个人性格不同，讲话的风格也不同。由一个作者来模拟小说中不同人物的不同讲话风格，确实是个困难的事情。大段文章写下来会发现，书中的所有人都采用一种语气、一种习惯在讲话，这是不可接受的。所以接下来的写作，需要更多考虑讲话人的风格和习惯，是成熟稳重，还是调皮搞怪，并在讲话中体现这一点。</p>\n<p>3. 描写的丰富性</p>\n<p>以前看书的时候，偶尔会感叹：就这么一件破事儿，我一句话就能讲清楚，他竟然写了整整一章！</p>\n<p>当然，我并不是想学习将一件小事儿写成一章的能力，这有点儿太 “极端” 了。因为作为读者我绝对不想捏着鼻子看一些乱七八糟无关紧要的东西，看完之后感叹浪费时间。</p>\n<p>但是丰富的描写必不可少，这对叙事节奏，感官代入非常重要。在写作中需要格外注意。</p>\n<h1 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h1>\n<p>坦克模型制作搁置很长时间了，原因无非是懒、玩游戏、写小说、刷视频。</p>\n<p>还有一个重要的原因不得不说：《T110E3 卡迪夫蓝调》坦克模型的所有零件都已经打印完，剩下的就是上色组装过程。中间经历了一次搬家，打印机已经清洗打包装箱了，寻思着近期也不会再使用。后来我数了数轮子的数量，当时打印了 11 个，当时想的是，多出来的一个用作备件，万一哪个打印的不好或者损坏了可以备用。结果拿出坦克底盘，发现需要 12 个轮子。12 个轮子！！！</p>\n<p>物料管理的严重失误。这导致我继续完成它的意愿骤降。但也不急于将缺失的轮子打印出来，因为可能还会发现其他缺失或者需要更换的零件，还得等我哪天愿意把打印机装好，离型膜也该换了。</p>\n<p>生活就像一盒巧克力，你永远不知道下一颗是什么味道。</p>\n",
            "tags": [
                "novel"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2025/01/15/aicompile03/",
            "url": "https://forcheetah.github.io/2025/01/15/aicompile03/",
            "title": "【AI编译】layer-group之后如何tiling",
            "date_published": "2025-01-15T13:12:53.246Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇讲解笔者实现 tiling 算法的一些经验。<br>\n前述文章 <a href=\"https://forcheetah.github.io/2025/01/14/aicompile02/\">《如何进行 layer-group》</a>讲解了 layer group 的内容。<a href=\"https://forcheetah.github.io/2024/10/18/aicompile01/\">《Tiling 操作能优化哪些时间》</a>提到 Tiling 的概念和作用。感兴趣的话可以阅读。</p>\n<p>本篇文章参考过 <a href=\"https://baijiahao.baidu.com/s?id=1787593090401250411&amp;wfr=spider&amp;for=pc\">《超强干货！地平线编译器大牛的编译优化实践总结》</a>，<a href=\"https://github.com/Arm-China/Compass_Optimizer\">《Arm 周易编译器工程》</a>，<a href=\"https://tpumlir.org/docs/developer_manual/10_layergroup.html#group\">《算能 TPU layer group 讲解》</a>，<a href=\"https://www.bilibili.com/video/BV1wo4y1z7AG/\">《算能 TPU 视频讲解》</a> 等文章和工程，欢迎大家参考。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"回顾\"><a class=\"anchor\" href=\"#回顾\">#</a> 回顾</h1>\n<p><img loading=\"lazy\" data-src=\"1736946396882.jpg\" alt=\"回顾流程\"></p>\n<p>如图所示，AI 编译优化的基本流程是 1. 图优化 (算子融合，常量折叠等) 2. 拆分 (layer group 和 tiling) 3. 并行和调度。最后得到当前编译的时间消耗。</p>\n<h1 id=\"分支结构tiling\"><a class=\"anchor\" href=\"#分支结构tiling\">#</a> 分支结构 Tiling</h1>\n<p><img loading=\"lazy\" data-src=\"1736946520498.jpg\" alt=\"分支结构\"></p>\n<p>假设现在对某个 layer group 做 tiling，需要对当前这个 layer group 按照 tiling 块数构建平行分支。</p>\n<p>上图来自<a href=\"https://tpumlir.org/docs/developer_manual/10_layergroup.html#group\">《算能 TPU layer group 讲解》</a>。如图所示，含有三个卷积算子的 layer group ，将其 tiling 成四块，则 group 的图结构变成右边的形状，图上也表明了 tiling 之后 tensor 的大小。可以使用 crop 算子完成 tensor 的切分，使用 concat 算子实现 tensor 的合并。图中没有画出 crop 算子和 concat 算子。</p>\n<p>神经网络结构复杂多样，分支结构、多前序节点、多后续节点等给 tiling 的实际操作带来很大困难。根据前述的 layer group 动态搜索划分，我们可能需要在各种各样的结构上进行 tiling 操作。下图是一种较为复杂的分支结构在 tiling 前后的对比图，可以给 tiling 结构的创建带来更直观的感受。</p>\n<p><img loading=\"lazy\" data-src=\"1736946566779.jpg\" alt=\"复杂分支结构tiling\"></p>\n<p>这是一个虚构的、较为复杂的分支结构。中间彩色的五个节点是当前要做 tiling 的 layer group，而上方和下方是当前 layer group 的前序节点和后续节点。<br>\n为方便，只 tiling 成两块。</p>\n<p>tiling 后的结构如图右侧所示，原有彩色算子部分复制成两份；layer group 有几个输出端（当前 group 有两个输出端：Conv 和 Fc）就有几个 concat 节点。layer group 的输入端（Add 节点和 Relu 节点）前面要添加 crop 节点，当输入端有多个前序节点时（Add 有两个前序节点），每个都要添加 crop。</p>\n<p>大致的结构重建就是这个样子。在实际操作中可能还有些不同，例如为保持所有节点都只能有一个输出 tensor 的原则，Crop 节点不能输出两个 tensor。</p>\n<h1 id=\"tiling维度\"><a class=\"anchor\" href=\"#tiling维度\">#</a> Tiling 维度</h1>\n<p>现有方案基本都选择在 N H W，也就是批次、高度、宽度这三个维度上做 tiling。</p>\n<p>N（批次）方向分块是最简单的方案，可以随意划分，对整个网络的运行没有影响。但是也许模型在推理的时候批次只有 1，无法 tiling。所以批次方向不是在所有情况下都适用。</p>\n<p>高度和宽度方向 tiling，比批次方向稍复杂，需要重新 infer shape 和调整参数（下一节讲解），但好在原有的算子推理仍然适用。</p>\n<p>基本上不考虑 C（通道）方向 tiling。通道方向分块，不仅要调整权重偏置 tensor，还需要在算子运算后加减 tensor，破坏了原有算子推理。<br>\n现有方案基本支持批次、高度、宽度这三个维度上做 tiling。</p>\n<h1 id=\"tiling逆向推理\"><a class=\"anchor\" href=\"#tiling逆向推理\">#</a> Tiling 逆向推理</h1>\n<p>上面只完成了 layer group 在 tiling 之后的结构重建。想要实现模型的正确推理，还需要更新好多信息。</p>\n<h2 id=\"逆向shape-推理\"><a class=\"anchor\" href=\"#逆向shape-推理\">#</a> 逆向 shape 推理</h2>\n<p>推理 shape，在 tensor 分块后，维度大小自然需要更新。下图是一个简单的分支结构的 tensor shape 推理例子。</p>\n<p><img loading=\"lazy\" data-src=\"1736946730182.jpg\" alt=\"逆向推理\"></p>\n<p>图①是推理之前的网络结构，仅包含两个卷积算子（均为 3*3，pad=1）。图上已经标明了每个算子的输入输出 tensor 的大小。现在将此 group 从 H（高）维度 tiling 成两份，也就是输出端（Add 节点）的输出 tensor 设置为 5*10。</p>\n<p>从输出端（Add 节点）开始逆序推导各个算子的输入输出 shape。如图②，普通算子如 Add，输入 tensor 的 shape 于输出 tensor 相同。而 Conv 这样的算子，需要根据参数、所在位置、输出 shape 来计算输入 tensor 的 shape。例如图②中 Conv_2 的输入变成 [6,10]，参数中 pad 需要修改为 [1,0,1,1]。</p>\n<p>现在出现一个问题：从 Add 节点直接往前推，Conv_1 的输出应该是 [5,10]，而走 Add-&gt;Conv_2 路径，Conv_1 的输出应该是 [6,10]。Conv_1 不可能同时输出 [6,10] 和 [5,10] 两个 tensor。如何处理当前的歧义呢？</p>\n<p>也许增加一个 crop 节点是个可选的方法。如图③所示，增加一个新的 Crop 节点，将 Conv_1 的输出 tensor 从 [6,10] 变成 [5,10]。</p>\n<h2 id=\"逆向深度优先搜索\"><a class=\"anchor\" href=\"#逆向深度优先搜索\">#</a> 逆向深度优先搜索</h2>\n<p>从逆向 shape 推理过程的分析来看，更新 layer group 的 shape，需要从输出端开始，逆向深度优先搜索每个分支，更新 shape 信息，还得判断采用哪些信息（如上一节中 Conv_1 的输出是 [6,10] 还是 [5,10]）。</p>\n<p>逆向深度优先搜索每个分支的意思如下图所示：从输出端搜索到输入端的每一条通路。下图结构中有四条通路。</p>\n<p><img loading=\"lazy\" data-src=\"1736946743244.jpg\" alt=\"深度优先搜索\"></p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "compile",
                "AI"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2025/01/14/aicompile02/",
            "url": "https://forcheetah.github.io/2025/01/14/aicompile02/",
            "title": "【AI编译】如何进行layer-group",
            "date_published": "2025-01-14T12:09:18.353Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇介绍 AI 编译领域 layer-group 算法。</p>\n<p>本篇文章参考过 <a href=\"https://baijiahao.baidu.com/s?id=1787593090401250411&amp;wfr=spider&amp;for=pc\">《超强干货！地平线编译器大牛的编译优化实践总结》</a>，<a href=\"https://github.com/Arm-China/Compass_Optimizer\">《Arm 周易编译器工程》</a>，<a href=\"https://tpumlir.org/docs/developer_manual/10_layergroup.html#group\">《算能 TPU layer group 讲解》</a>，<a href=\"https://www.bilibili.com/video/BV1wo4y1z7AG/\">《算能 TPU 视频讲解》</a> 等文章和工程，欢迎大家参考。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"layer-group\"><a class=\"anchor\" href=\"#layer-group\">#</a> Layer group</h1>\n<p>如图所示，AI 编译优化的基本流程是 1. 图优化 (算子融合，常量折叠等) 2. 拆分 (layer group 和 tiling) 3. 并行和调度。最后得到当前编译的时间消耗。</p>\n<p><img loading=\"lazy\" data-src=\"1736856461365.jpg\" alt=\"如图1所示\"></p>\n<p>在 AI 编译领域，LayerGroup 指的是将神经网络中的多个层（layers (Operator) ）组合成一个逻辑单元或模块的过程。</p>\n<p>一般而言设备的运行内存很大，比如电脑的运行内存 16GB，但是它的速度比较慢，我们把它叫做 Global Memory。而做神经网络推理的专用 NPU 芯片，它的高速缓存速度很快，但是空间可能只有几 MB，我们把它叫做 Cache。我们无法将网络模型所有 layer 全部加载到 cache 中，那么意味着每个算子都需要 Cache 和外部 Global Memory 的交互，load 输入数据、store 结果。</p>\n<p>所以需要将网络拆分成小的 layer group。一般默认只有进入和退出 layer group 的时候，才需要和外部的 Global Memory 做 Load/Store 操作去交互。把需要的数据 load 进来，将结果数据 store 出去。layer group 减少了 Load/Store 操作，同时 layer group 也是后续 tiling、调度等操作的基本单元，降低了问题复杂度。</p>\n<h1 id=\"动态规划搜索\"><a class=\"anchor\" href=\"#动态规划搜索\">#</a> 动态规划搜索</h1>\n<p><img loading=\"lazy\" data-src=\"1736856461365.jpg\" alt=\"如图1所示\"></p>\n<p>还是这张图，如何划分 layer group 呢？图里面只有四个算子，可以 1,2 划分一组，3,4 划分一组；也可以 1 划为一组，2,3,4 划分另一组；甚至 1,2,3,4 全部划分为一组。不同的划分方式，最后得到的 Cost 也不同。<br>\n为了找到最优的划分方式，不得不搜索所有划分方案。</p>\n<p>假设网络有 n 层，则 n 层中间有 n-1 个间隔。选取 0 个间隔，也就是 n 层全部划分为一组，是 C (n-1, 0)；选取 1 个间隔，也就是分成两组，是 C (n-1,1)；选取 2 个间隔，也就是划分三组，是 C (n-1,2)；以此类推， C (n-1, 0)+C (n-1,1)+C (n-1,2)+……+C (n-1,n-1)，根据二项式定理，需要 2^(n-1) 次搜索。</p>\n<p>指数式增长计算量太大，是不可接受的。</p>\n<p>可以采用动态规划的思想来减少搜索次数。</p>\n<p>我们以 100 层网络为例。设 <code>f(n)</code>  为从第 0 层到达第 n 层最短用时。令  <code>f(-1) = 0</code>  ， <code>cost(x,y)</code>  为从 x 层到 y 层作为一个 group 的开销。则：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">98</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这就需要提前计算一个 cost table。</p>\n<p><img loading=\"lazy\" data-src=\"1736856527679.jpg\" alt=\"如图2所示\"></p>\n<p>cost table 如图所示。我们要做的就是以从 x 层到 y 层作为一个 group，计算开销 <code>cost(x,y)</code>  并保存下来。对于一个 n 层的网络来说，需要搜索的 layer group 数量为： 1+2+…+n = n (n+1)/2 。搜索次数从原来的 2^(n-1) 指数函数，已经降到幂函数。</p>\n<p>但是当网络层数过多时，搜索量还是很大，可以限制最大搜索长度，例如最长支持 50 层，那么 cost table 就变成下面这个样子：</p>\n<p><img loading=\"lazy\" data-src=\"1736856542354.jpg\" alt=\"如图3所示\"></p>\n<p>现在对于 n 层网络，搜索数量降到 50*n 。</p>\n<p>还可以启发式的剪枝优化，优化掉明显不会有收益的分支，进一步降低搜索的时间消耗。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！global_info)</p>\n<p><code>runtime_mod</code></p>\n",
            "tags": [
                "compile",
                "AI"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2025/01/03/quanti01/",
            "url": "https://forcheetah.github.io/2025/01/03/quanti01/",
            "title": "【量化】连续卷积层首尾量化的可行性",
            "date_published": "2025-01-03T13:12:09.420Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇文章探讨一下连续卷积层首尾量化的可行性。连续卷积指的是神经网络模型中接连出现若干个卷积 layer，中间没有 pooling、FC 等其他 layer；首尾量化指的是只在首端量化，仅在尾端反量化，中间不添加量化反量化操作。探索连续卷积层首尾量化的可行性，目的是试图降低每一层都进行繁杂的量化反量化运算的时间消耗。在上一篇文章<a href=\"https://forcheetah.github.io/2024/05/30/engine1/\">【推理引擎】NCNN 和 Tengine 量化推理逻辑对比</a> 中提到了这个想法，本篇文章将通过公式演算和代码仿真的方式探索其可行性。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"连续卷积层首尾量化\"><a class=\"anchor\" href=\"#连续卷积层首尾量化\">#</a> 连续卷积层首尾量化</h1>\n<p>借用上一篇文章<a href=\"https://forcheetah.github.io/2024/05/30/engine1/\">【推理引擎】NCNN 和 Tengine 量化推理逻辑对比</a> 中 NCNN 卷积量化计算流程图。流程显示：每一层卷积在计算前需要量化，在计算完成后需要反量化。</p>\n<p><img loading=\"lazy\" data-src=\"1735817961973.jpg\" alt=\"ncnn量化流程\"></p>\n<p>量化和反量化过程费时又费力，那么在连续卷积层的这种特殊情况下，能不能减少量化和反量化计算呢？</p>\n<p>连续卷积指的是神经网络模型中接连出现若干个卷积 layer，中间没有 pooling、FC 等其他 layer；首尾量化指的是只在首端量化，仅在尾端反量化，中间不添加量化反量化操作。</p>\n<p>假如这种做法可行，则可以减少中间层的量化、反量化计算。</p>\n<h1 id=\"公式演算\"><a class=\"anchor\" href=\"#公式演算\">#</a> 公式演算</h1>\n<p>首先从公式上推理计算流程。</p>\n<p>我们以三个连续的卷积层为例，下图是计算示意图。输入为 <code>input</code> ，经过三个卷积算子 <code>conv1</code> 、 <code>conv2</code> 、 <code>conv3</code>  得到输出 tensor  <code>output</code> 。三个卷积算子的权重用 <code>W*</code>  表示，偏置用 <code>B*</code>  表示。</p>\n<p><code>A</code>  表示输入输出 tensor 的量化因子 scale， <code>S</code>  表示权重 weight 的量化因子。<br>\n暂不考虑通常会在卷积层后面出现的激活层。（relu 激活不影响后续推理，但其他激活函数大概不行）</p>\n<p><img loading=\"lazy\" data-src=\"1735818104223.jpg\" alt=\"ncnn量化流程\"></p>\n<h2 id=\"float-推理\"><a class=\"anchor\" href=\"#float-推理\">#</a> float 推理：</h2>\n<p><img loading=\"lazy\" data-src=\"1735818152458.jpg\" alt=\"ncnn量化流程\"></p>\n<p><code>W</code>  代表权重， <code>B</code>  代表偏置。 <code>in</code>  代表输入 tensor，这里 <code>*</code>  代表卷积操作。</p>\n<p>上述公式便是一般情况下，连续计算三个卷积的流程。</p>\n<h2 id=\"量化推理\"><a class=\"anchor\" href=\"#量化推理\">#</a> 量化推理：</h2>\n<p><img loading=\"lazy\" data-src=\"1735818201772.jpg\" alt=\"ncnn量化流程\"></p>\n<p>将 float 推理流程改写为 NCNN 形式的量化流程。同时偏置的形式借鉴于 Tengine，也就是 int32 类型的 <code>B/(A*S)</code> 。</p>\n<p><code>A</code>  表示输入输出 tensor 的量化因子 scale， <code>S</code>  表示权重 weight 的量化因子。</p>\n<p><code>in/A1</code>  是将 float 的输入 tensor 量化为 int8， <code>W1/S1</code>  是将权重量化为 int8。输入 tensor 和权重的量化因子 <code>A1</code>  和 <code>S1</code>  确定后，偏置的量化因子和输出 tensor 的反量化因子就都确定了，是 <code>A1*S1</code> 。公式中 <code>*(A1S1)</code>  是反量化过程。</p>\n<p>重复三次（量化、卷积、反量化），上述公式的结果等价于 float 推理。</p>\n<h2 id=\"首尾量化推理\"><a class=\"anchor\" href=\"#首尾量化推理\">#</a> 首尾量化推理：</h2>\n<p>首尾量化公式整体是什么样子？全部写出来非常困难，所以我们可以先将其形式写出来，不确定的地方用符号代替。那么就是下方的第一个公式。公式中的方框代表量化因子，黑圈代表偏置，量化因子和偏置当前还没有确定。</p>\n<p>流程是这样的： <code>in/方框</code> 进行量化。 <code>*W1/S1+黑圈</code> 表示执行一次卷积，连续执行三次卷积。最后 <code>*方框</code> 进行反量化。</p>\n<p>这个公式只在首尾进行量化和反量化。</p>\n<p>权重 <code>W</code>  的量化因子 <code>S</code>  是固定的，因为权重在模型中是固定的，其对应的量化因子 <code>S</code>  不会改变，于前述公式中相同。</p>\n<p><img loading=\"lazy\" data-src=\"1735818262776.jpg\" alt=\"ncnn量化流程\"></p>\n<p>接下来是填充方框和黑圈中的数据。填充结果为第二个公式。</p>\n<p>填充规则首先是公式的等价性，公式要等价于 “量化推理” 和 “float 推理”。从前往后依次填充，结果如上，不再细讲。</p>\n<p>直观来看，整个公式没有问题，理论上可行。难道真的可以节省连续卷积层中间的量化和反量化时间？马不停蹄开始代码仿真。</p>\n<h1 id=\"代码仿真\"><a class=\"anchor\" href=\"#代码仿真\">#</a> 代码仿真</h1>\n<p>仿真代码如下所示：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"stdlib.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"math.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_info</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">float</span> weight<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">float</span> bias<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> weight_int8<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> bias_int<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">float</span> scale<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span>conv_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor_info</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">float</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> data_int8<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">float</span> scale<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span>tensor_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//  tensor 初始化</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">init_tensor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor_info</span><span class=\"token operator\">*</span> tensor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        tensor<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//  卷积 初始化</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">init_conv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_info</span><span class=\"token operator\">*</span> conv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> weight<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> bias<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        conv<span class=\"token operator\">-></span>weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        conv<span class=\"token operator\">-></span>bias<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bias<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//  卷积 计算量化因子</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">CalculateConvScale</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_info</span><span class=\"token operator\">*</span> conv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">float</span> abs_max<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> conv<span class=\"token operator\">-></span>weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span>abs_max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            abs_max <span class=\"token operator\">=</span> <span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    conv<span class=\"token operator\">-></span>scale <span class=\"token operator\">=</span> abs_max<span class=\"token operator\">/</span><span class=\"token number\">127.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token function\">round</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>conv<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        conv<span class=\"token operator\">-></span>weight_int8<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">//  卷积 计算 bias int8</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ClaculateConvBiasInt8</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_info</span><span class=\"token operator\">*</span> conv<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor_info</span><span class=\"token operator\">*</span> tensor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token function\">round</span><span class=\"token punctuation\">(</span>conv<span class=\"token operator\">-></span>bias<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>conv<span class=\"token operator\">-></span>scale<span class=\"token operator\">*</span>tensor<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        conv<span class=\"token operator\">-></span>bias_int<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">//  tensor 计算量化因子</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">CalculateTensorScale</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor_info</span><span class=\"token operator\">*</span> tensor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">float</span> abs_max<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> tensor<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span>abs_max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            abs_max <span class=\"token operator\">=</span> <span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    tensor<span class=\"token operator\">-></span>scale <span class=\"token operator\">=</span> abs_max<span class=\"token operator\">/</span><span class=\"token number\">127.0</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">//  卷积运算  float</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ConvFloat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor_info</span><span class=\"token operator\">*</span> input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_info</span><span class=\"token operator\">*</span> conv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor_info</span><span class=\"token operator\">*</span> output<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        output<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>conv<span class=\"token operator\">-></span>weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>conv<span class=\"token operator\">-></span>bias<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token comment\">//  卷积运算  int</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ConvInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor_info</span><span class=\"token operator\">*</span> input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_info</span><span class=\"token operator\">*</span> conv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor_info</span><span class=\"token operator\">*</span> output<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token comment\">// 量化</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">int</span> input_int8 <span class=\"token operator\">=</span> <span class=\"token function\">round</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> input<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token comment\">// 卷积</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">int</span> out_int8 <span class=\"token operator\">=</span> input_int8 <span class=\"token operator\">*</span> conv<span class=\"token operator\">-></span>weight_int8<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">// 偏置</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">int</span> out_bias_int8 <span class=\"token operator\">=</span> out_int8 <span class=\"token operator\">+</span> conv<span class=\"token operator\">-></span>bias_int<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token comment\">// 反量化</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        output<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> out_bias_int8 <span class=\"token operator\">*</span> input<span class=\"token operator\">-></span>scale <span class=\"token operator\">*</span> conv<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token comment\">//  首尾量化 更新 bias</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">updateBiasInt8</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_info</span><span class=\"token operator\">*</span> conv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> scale<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token function\">round</span><span class=\"token punctuation\">(</span>conv<span class=\"token operator\">-></span>bias<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        conv<span class=\"token operator\">-></span>bias_int<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token comment\">//  卷积运算  首尾</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ConvFrontTial</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor_info</span><span class=\"token operator\">*</span> input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_info</span><span class=\"token operator\">*</span> conv1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_info</span><span class=\"token operator\">*</span> conv2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">conv_info</span><span class=\"token operator\">*</span> conv3<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tensor_info</span><span class=\"token operator\">*</span> output<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token comment\">//  初次量化</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">int</span> input_int <span class=\"token operator\">=</span> <span class=\"token function\">round</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> input<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token comment\">//  第一步卷积</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token keyword\">int</span> input_int_1 <span class=\"token operator\">=</span> input_int <span class=\"token operator\">*</span> conv1<span class=\"token operator\">-></span>weight_int8<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> conv1<span class=\"token operator\">-></span>bias_int<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token comment\">//  第二步卷积</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token keyword\">int</span> input_int_2 <span class=\"token operator\">=</span> input_int_1 <span class=\"token operator\">*</span> conv2<span class=\"token operator\">-></span>weight_int8<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> conv2<span class=\"token operator\">-></span>bias_int<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token comment\">//  第三步卷积</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">int</span> input_int_3 <span class=\"token operator\">=</span> input_int_2 <span class=\"token operator\">*</span> conv3<span class=\"token operator\">-></span>weight_int8<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> conv3<span class=\"token operator\">-></span>bias_int<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token comment\">//  反量化</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        output<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input_int_3 <span class=\"token operator\">*</span> input<span class=\"token operator\">-></span>scale <span class=\"token operator\">*</span> conv1<span class=\"token operator\">-></span>scale <span class=\"token operator\">*</span> conv2<span class=\"token operator\">-></span>scale <span class=\"token operator\">*</span> conv3<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token comment\">//  *********************************  基本信息及初始化  ************************************</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    tensor_info<span class=\"token operator\">*</span> input <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tensor_info<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tensor_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token keyword\">float</span> input_data<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0.24</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.08</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.16</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.61</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token function\">init_tensor</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> input_data<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    conv_info<span class=\"token operator\">*</span> conv1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>conv_info<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>conv_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token keyword\">float</span> weight_data1<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0.02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.04</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">float</span> bias1<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">11.4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">6.3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">57.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.48</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token function\">init_conv</span><span class=\"token punctuation\">(</span>conv1<span class=\"token punctuation\">,</span> weight_data1<span class=\"token punctuation\">,</span> bias1<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    conv_info<span class=\"token operator\">*</span> conv2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>conv_info<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>conv_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token keyword\">float</span> weight_data2<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.25</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.69</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token keyword\">float</span> bias2<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10.4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">6.3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">31.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.48</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token function\">init_conv</span><span class=\"token punctuation\">(</span>conv2<span class=\"token punctuation\">,</span> weight_data2<span class=\"token punctuation\">,</span> bias2<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    conv_info<span class=\"token operator\">*</span> conv3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>conv_info<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>conv_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token keyword\">float</span> weight_data3<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">2.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.69</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token keyword\">float</span> bias3<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">5.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.24</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token function\">init_conv</span><span class=\"token punctuation\">(</span>conv3<span class=\"token punctuation\">,</span> weight_data3<span class=\"token punctuation\">,</span> bias3<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token comment\">//  *********************************  float 推理  ************************************</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n 1  ********   float 推理   ********  \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    tensor_info<span class=\"token operator\">*</span> middle1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tensor_info<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tensor_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    tensor_info<span class=\"token operator\">*</span> middle2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tensor_info<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tensor_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    tensor_info<span class=\"token operator\">*</span> output_res <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tensor_info<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tensor_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token function\">ConvFloat</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> conv1<span class=\"token punctuation\">,</span> middle1<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token function\">ConvFloat</span><span class=\"token punctuation\">(</span>middle1<span class=\"token punctuation\">,</span> conv2<span class=\"token punctuation\">,</span> middle2<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token function\">ConvFloat</span><span class=\"token punctuation\">(</span>middle2<span class=\"token punctuation\">,</span> conv3<span class=\"token punctuation\">,</span> output_res<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>         <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  %f \"</span><span class=\"token punctuation\">,</span> output_res<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token comment\">//  *********************************  量化推理  ************************************</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n 2 ********   量化推理   ********  \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token function\">CalculateConvScale</span><span class=\"token punctuation\">(</span>conv1<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token function\">CalculateConvScale</span><span class=\"token punctuation\">(</span>conv2<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token function\">CalculateConvScale</span><span class=\"token punctuation\">(</span>conv3<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token function\">CalculateTensorScale</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token function\">CalculateTensorScale</span><span class=\"token punctuation\">(</span>middle1<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token function\">CalculateTensorScale</span><span class=\"token punctuation\">(</span>middle2<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    <span class=\"token function\">ClaculateConvBiasInt8</span><span class=\"token punctuation\">(</span>conv1<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token function\">ClaculateConvBiasInt8</span><span class=\"token punctuation\">(</span>conv2<span class=\"token punctuation\">,</span> middle1<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    <span class=\"token function\">ClaculateConvBiasInt8</span><span class=\"token punctuation\">(</span>conv3<span class=\"token punctuation\">,</span> middle2<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token function\">ConvInt</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> conv1<span class=\"token punctuation\">,</span> middle1<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token function\">ConvInt</span><span class=\"token punctuation\">(</span>middle1<span class=\"token punctuation\">,</span> conv2<span class=\"token punctuation\">,</span> middle2<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token function\">ConvInt</span><span class=\"token punctuation\">(</span>middle2<span class=\"token punctuation\">,</span> conv3<span class=\"token punctuation\">,</span> output_res<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  %f \"</span><span class=\"token punctuation\">,</span> output_res<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"169\"></td><td><pre><span class=\"token comment\">//  *********************************  量化推理  ************************************</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n 3 ********   首尾量化推理   ********  \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    <span class=\"token function\">updateBiasInt8</span><span class=\"token punctuation\">(</span>conv1<span class=\"token punctuation\">,</span> input<span class=\"token operator\">-></span>scale<span class=\"token operator\">*</span>conv1<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>    <span class=\"token function\">updateBiasInt8</span><span class=\"token punctuation\">(</span>conv2<span class=\"token punctuation\">,</span> input<span class=\"token operator\">-></span>scale<span class=\"token operator\">*</span>conv1<span class=\"token operator\">-></span>scale<span class=\"token operator\">*</span>conv2<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    <span class=\"token function\">updateBiasInt8</span><span class=\"token punctuation\">(</span>conv3<span class=\"token punctuation\">,</span> input<span class=\"token operator\">-></span>scale<span class=\"token operator\">*</span>conv1<span class=\"token operator\">-></span>scale<span class=\"token operator\">*</span>conv2<span class=\"token operator\">-></span>scale<span class=\"token operator\">*</span>conv3<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    <span class=\"token function\">ConvFrontTial</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> conv1<span class=\"token punctuation\">,</span> conv2<span class=\"token punctuation\">,</span> conv3<span class=\"token punctuation\">,</span> output_res<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  %f \"</span><span class=\"token punctuation\">,</span> output_res<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"180\"></td><td><pre>    <span class=\"token comment\">//  信息打印</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n【第一个卷积】  输入scale：%f   权重scale：%f  \\n\"</span><span class=\"token punctuation\">,</span> input<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">,</span> conv1<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"weight_scaled(int8):%d  bias_scaled(int32):%d  \"</span><span class=\"token punctuation\">,</span>conv1<span class=\"token operator\">-></span>weight_int8<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> conv1<span class=\"token operator\">-></span>bias_int<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n【第二个卷积】  输入scale：%f   权重scale：%f  \\n\"</span><span class=\"token punctuation\">,</span> middle1<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">,</span> conv2<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"weight_scaled(int8):%d  bias_scaled(int32):%d  \"</span><span class=\"token punctuation\">,</span>conv2<span class=\"token operator\">-></span>weight_int8<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> conv2<span class=\"token operator\">-></span>bias_int<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n【第三个卷积】  输入scale：%f   权重scale：%f  \\n\"</span><span class=\"token punctuation\">,</span> middle2<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">,</span> conv3<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"weight_scaled(int8):%d  bias_scaled(int32):%d  \"</span><span class=\"token punctuation\">,</span>conv3<span class=\"token operator\">-></span>weight_int8<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> conv3<span class=\"token operator\">-></span>bias_int<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>仿真包含 float 推理、量化推理、首尾量化推理三部分。</p>\n<p>卷积运算简化为乘运算  <code>input-&gt;data[i]*conv-&gt;weight[i]+conv-&gt;bias[i];</code> ，这种简化不影响结果判断。</p>\n<p>输入 tensor 和权重 tensor 均简化为一个长度为 4 的向量。同样不影响结果判断。</p>\n<p>代码中给出了三种推理方式的计算流程。</p>\n<p><img loading=\"lazy\" data-src=\"1735909708546.jpg\" alt=\"计算结果\"></p>\n<p>分别打印三种推理方式的计算结果，如上图所示<br>\n。<br>\n首先是 float 推理的结果，一行四个数分别是 <code>-46.782913   -43.201283   21.810884   9.627323</code> ，可以作为正确与否的评判标准。</p>\n<p>量化推理的结果位于第二行，与 float 推理结果相同，证明量化推理没有问题。</p>\n<p>惊讶地发现首尾量化推理的结果出错？公式演算和算法仿真都没有问题，那么结果为什么不对呢？</p>\n<p>打印一下首尾量化推理的相关数据：<br>\n量化后的 int8 类型的权重 weight 都没有问题，范围在 - 127 到 127 之间。<br>\n但是量化后的 int32 类型的 bias 为什么这么大？想来 bias 确实很大，量化因子普遍在 10E-3，因此第一个卷积的量化 bias ( <code>B1/(A1S1)</code> ) 已经达到 10 的六次方级别，第二个卷积的时候部分量化偏置出现溢出，第三个卷积的量化偏置已经普遍溢出。上图中打印的数字也证明了这一点： <code>-214748364</code>  这个数据已经溢出。</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>连续卷积层首尾量化不具有可行性，因为连两层卷积都会出现偏置溢出现象，导致结果计算错误。</p>\n<p>那么</p>\n<ul>\n<li>\n<ol>\n<li>将偏置 bias 改用 int64 存储？偏置大小呈指数上升，int64 也无法保证三层卷积首尾量化不溢出，收益不高。</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>将偏置 bias 改用 float 保存？  浮点数无法精确的表示很大的整数。</li>\n</ol>\n</li>\n</ul>\n<p>总之，连续首尾量化无法实用。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "conv",
                "quantize"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/12/24/conv6/",
            "url": "https://forcheetah.github.io/2024/12/24/conv6/",
            "title": "【Gemm】内存对齐",
            "date_published": "2024-12-24T12:44:31.294Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇文章梳理内存对齐的相关概念和知识，并借上一篇文章<a href=\"https://forcheetah.github.io/2024/12/20/conv5/\">《【Gemm】Gemm 计算加速》</a> 来简单探讨一下内存排布对计算加速的重要作用。</p>\n<p>本篇文章参考和引用了 <a href=\"https://github.com/Tencent/ncnn\">《nihui 大佬的 ncnn 工程》</a>，<a href=\"https://zhuanlan.zhihu.com/p/336359747?utm_id=0\">《ncnn 初探二：图解 ncnn::Mat 的内存排布》</a>，<a href=\"https://github.com/Tencent/ncnn/issues/334\">关于 mat 中 data 的内存排列问题</a>，<a href=\"https://zhuanlan.zhihu.com/p/632640984\">《Linux 内核：内存管理 —— 内存对齐》</a>等，并询问过大语言模型通义千问、文心一言等。如有不清楚的地方可以点击链接查阅。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"处理器的对齐访问\"><a class=\"anchor\" href=\"#处理器的对齐访问\">#</a> 处理器的对齐访问</h1>\n<p>对齐访问的定义：对齐访问是指处理器在访问内存时，要求访问的起始地址是某个特定数值（通常是 2 的幂）的整数倍。这种对齐方式有助于简化内存访问的电路设计和提高访问效率。</p>\n<p>例如某处理器读取 int 类型数据时，内存读取粒度为 4，只能从 0x10000， 0x10004 这种 4 的整数倍地址为起始地址读取内存。当该 int 类型数据恰好存储在这样的地址时，称为自然对齐。</p>\n<p>那么，处理器只能进行对齐访问吗？大语言模型给出这样解答：</p>\n<pre><code>一、处理器在访问内存时，并不总是只能进行对齐访问，这取决于处理器的具体架构和设计。\n    1.某些处理器要求对齐访问：\n例如，一些ARM架构的处理器在访问内存时要求对齐。如果访问的起始地址不满足对齐要求，处理器可能会产生异常或错误。\n    2.复杂指令集处理器（如x86架构）的灵活性：\nx86架构的处理器通常能够处理非对齐的内存访问。虽然它们可能不是一次性读出所需的数据，而是采取多次读取对齐的内存并进行数据拼接的方式来实现非对齐数据访问，但这仍然表明x86处理器在处理非对齐访问方面具有一定的灵活性。\n\n二、处理器单次访问的对齐要求\n    为了保持硬件设计的简单性和高效性，单次内存访问确实要求是对齐的。这是因为对齐访问可以确保数据在内存中的布局与处理器的数据路径相匹配，从而避免额外的处理步骤和性能损失。\n\n</code></pre>\n<p>从上面来看，处理器单次内存访问是要求对齐访问的，所谓支持的非对齐访问也是由多次对齐访问，再加上舍弃和拼接实现的。</p>\n<h1 id=\"内存对齐\"><a class=\"anchor\" href=\"#内存对齐\">#</a> 内存对齐</h1>\n<p>内存对齐：如果一个变量的内存地址刚好位于它本身长度的整数倍，他就被称做自然对齐。</p>\n<p>这里比较一下内存对齐 和 内存没有对齐的情况下， 处理器内存访问效率。</p>\n<p><img loading=\"lazy\" data-src=\"1735043896070.jpg\" alt=\"图1\"></p>\n<p>假设现在需要将四个字节的 float 数据搬到寄存器，上图的 float 数据自然对齐，位于 0x1000，那么将该 float 数据搬到寄存器只需要访问一次内存。</p>\n<p>下图 float 数据没有自然对齐，位于 0x1002，那么需要将 0x1000 到 0x1003 的数据取出，留下 0x1002 到 0x1003 两个字节。再将 0x1004 到 0x1007 的数据取出，留下 0x1004 到 0x1005 两个字节，最终拼成需要的 float 数据。</p>\n<p>在没有自然对齐的情况下，需要两次内存访问，还要消耗数据拼接等指令的时间。</p>\n<h1 id=\"编译器内存对齐\"><a class=\"anchor\" href=\"#编译器内存对齐\">#</a> 编译器内存对齐</h1>\n<p>为实现高效的内存访问，编译器有一套内存对齐的规则。</p>\n<p>例如下面的代码，在 64 位系统中，char 类型占 1 个字节，double 类型占 8 个字节。但是下面的结构体占用内存并不是 9 个字节，而是 16 个字节。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">double</span> ff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> struct_elem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    struct_elem sclass<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>struct_elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addr_char:%p   addr_double:%p  \\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sclass<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sclass<span class=\"token punctuation\">.</span>ff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>16\naddr_char:0x7ffc631cdd70   addr_double:0x7ffc631cdd78 \n</code></pre>\n<p>打印结果如上所示，char 数据的地址是 <code>0x7ffc631cdd70</code> ，为了让 double 数据也能自然对齐，char 数据后面空出来 7 个字节，直到第 8 个字节，也就是 <code>0x7ffc631cdd78</code>  才开始存储 double。</p>\n<p><img loading=\"lazy\" data-src=\"1735044044909.jpg\" alt=\"图2\"></p>\n<p>那么，如果将上述结构体中的 char 和 double 数据调换一下位置，是不是结构体的内存占用就变成 9 字节了呢？也不是，仍然是 16 字节。这就设计到下面的结构体内存分配规则了，这里不做讨论。</p>\n<pre><code>1.第一个成员在结构体变量偏移量为0 的地址处，也就是第一个成员必须从头开始。\n2.以后每个成员相对于结构体首地址的 offset 都是该成员大小的整数倍，如有需要编译器会在成员之间加上填充字节。\n3.结构体的总大小为 最大对齐数的整数倍（每个成员变量都有自己的对齐数），如有需要编译器会在最末一个成员之后加上填充字节。\n4.如果嵌套结构体，嵌套的结构体对齐到自己的最大对齐数的整数倍处，结构体的整体大小就是所有最大对齐数（包含嵌套结构体的对齐数）的整数倍。\n</code></pre>\n<h1 id=\"ncnn-内存对齐\"><a class=\"anchor\" href=\"#ncnn-内存对齐\">#</a> ncnn 内存对齐</h1>\n<p>既然编译器帮助我们实现了内存对齐，程序员是不是就不需要再关注内存对齐了呢？</p>\n<p>肯定是不行的，编译器只保证了基本自然对齐，在高性能计算、图形处理等方面，还需要程序员手动内存对齐。这里学习一下 NCNN 工程的矩阵排布方式：</p>\n<p>下面是 ncnn 源码中构建三维矩阵（c,h,w），也就是通道、高度、宽度三个维度，的内存开辟函数。</p>\n<p>变量的意义，来自<a href=\"https://zhuanlan.zhihu.com/p/336359747?utm_id=0\">《ncnn 初探二：图解 ncnn::Mat 的内存排布》</a></p>\n<pre><code>data: 表示Mat分配的内存的头地址, 是一个指针类型\nrefcount: 表示Mat的引用计数, 是一个指针类型\nallocator: 本章我们不太关系这个变量可以认为它的值始终为0, 是一个指针类型\ndims: 表示数据的维度, 是一个整数类型\nw: 表示数据的width, 是一个整数类型\nh: 表示数据的height, 是一个整数类型\nc: 表示数据的channel, 是一个整数类型\nelempack: 表示有多少个数据打包在一起, 是一个整数类型\nelemsize: 表示打包在一起的数据占的字节数, 是一个整数类型\ncstep: 表示channel step, 即走一个channel跨过的元素个数, 是一个整数类型\n</code></pre>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建 三维矩阵（c,h,w）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Mat</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> _w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _c<span class=\"token punctuation\">,</span> size_t _elemsize<span class=\"token punctuation\">,</span> Allocator<span class=\"token operator\">*</span> _allocator<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dims <span class=\"token operator\">==</span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span> w <span class=\"token operator\">==</span> _w <span class=\"token operator\">&amp;&amp;</span> h <span class=\"token operator\">==</span> _h <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">==</span> _c <span class=\"token operator\">&amp;&amp;</span> elemsize <span class=\"token operator\">==</span> _elemsize <span class=\"token operator\">&amp;&amp;</span> elempack <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> allocator <span class=\"token operator\">==</span> _allocator<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    elemsize <span class=\"token operator\">=</span> _elemsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    elempack <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    allocator <span class=\"token operator\">=</span> _allocator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    dims <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    w <span class=\"token operator\">=</span> _w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    h <span class=\"token operator\">=</span> _h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    d <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    c <span class=\"token operator\">=</span> _c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cstep <span class=\"token operator\">=</span> <span class=\"token function\">alignSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>w <span class=\"token operator\">*</span> h <span class=\"token operator\">*</span> elemsize<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> elemsize<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//w*h 16 字节对齐</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    size_t totalsize <span class=\"token operator\">=</span> <span class=\"token function\">alignSize</span><span class=\"token punctuation\">(</span><span class=\"token function\">total</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> elemsize<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//c*cstep 4 字节对齐</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>totalsize <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>allocator<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            data <span class=\"token operator\">=</span> allocator<span class=\"token operator\">-></span><span class=\"token function\">fastMalloc</span><span class=\"token punctuation\">(</span>totalsize <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>refcount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            data <span class=\"token operator\">=</span> <span class=\"token function\">fastMalloc</span><span class=\"token punctuation\">(</span>totalsize <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>refcount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        refcount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> totalsize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 连接计数器，放在了 data 最后</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token operator\">*</span>refcount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>再看一下  <code>alignSize</code>  函数：其用于返回不小于 <code>sz</code>  的 <code>n</code>  的最小倍数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">alignSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>sz <span class=\"token operator\">+</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>那么上述创建 三维矩阵（c,h,w）</p>\n<p>我们以（c,h,w）：（4,2,3）为例，通道为 4，高为 2，宽为 3，开辟的内存及数据存放如下图所示：</p>\n<pre><code>   0        1        2         3          4        5        6       7\nc0h0w0    c0h0w1    c0h0w2    c0h1w0    c0h1w1    c0h1w2    pad    pad\nc1h0w0    c1h0w1    c1h0w2    c1h1w0    c1h1w1    c1h1w2    pad    pad\nc2h0w0    c2h0w1    c2h0w2    c2h1w0    c2h1w1    c2h1w2    pad    pad\nc3h0w0    c3h0w1    c3h0w2    c3h1w0    c3h1w1    c3h1w2    pad    pad\n</code></pre>\n<p>高乘宽 h<em>w，长度为 6， <code>alignSize((size_t)w * h * elemsize, 16) / elemsize;</code>  按照 16 字节对齐，会分配 8 个元素的空间，当前 h</em>w 只占了六个元素的空间，其余两个空间 pad 补零。  <code>cstep</code>  为 8，而不是 6。</p>\n<p>访问：</p>\n<pre><code>mat.data -&gt; address of c0h0w0\nmat.row(1) -&gt; address of c0h1w0\nmat.channel(0).row(1) -&gt; address of c0h1w0\nmat.channel(1).row(1) -&gt; address of c1h1w0\n\n</code></pre>\n<p>所以 ncnn 的 16 字节对齐是每个通道 16 字节对齐。<br>\n访问每一个通道时，mat.channel (0)，所有 16 字节的数据，也就是 128bit 数据，能够一次内存访问加载到 SSE2 等 128 位寄存器中。</p>\n<p>采用 16 字节对齐有哪些优势呢？大语言模型的回答：</p>\n<ol>\n<li>提高数据访问效率</li>\n</ol>\n<ul>\n<li>SIMD 指令集优化：现代 CPU 支持单指令多数据（SIMD）指令集，如 SSE、AVX 等。这些指令可以在一个周期内处理多个数据点，但要求操作数在内存中是连续且对齐的。16 字节对齐确保了当使用 128 位宽的 SIMD 寄存器（例如 SSE 指令）时，数据可以直接加载到寄存器中而无需额外调整，从而提高了指令执行速度。</li>\n<li>缓存行利用：大多数 CPU 的缓存行大小为 64 字节或更大，16 字节对齐有助于更好地匹配缓存行边界，减少缓存未命中率，进而提升内存访问效率。</li>\n</ul>\n<ol start=\"2\">\n<li>减少内存访问延迟</li>\n</ol>\n<ul>\n<li>避免跨页访问：如果数据跨越了不同的内存页面，操作系统需要额外的时间来处理页面错误和更新页表。通过保持 16 字节对齐，可以降低这种跨页访问的可能性，特别是在处理大量小型数据结构时。</li>\n</ul>\n<h1 id=\"gemm内存对齐的好处\"><a class=\"anchor\" href=\"#gemm内存对齐的好处\">#</a> gemm 内存对齐的好处</h1>\n<p>以<a href=\"https://forcheetah.github.io/2024/12/20/conv5/\">《【Gemm】Gemm 计算加速》</a> 中的 《6. 使用 SIMD 指令》为例，如果矩阵 B（K*N）在宽度 N 方向进行 16 字节对齐（将 N pad 到 16 字节的倍数），那么算法最内存循环中的 <code>__m128 b_reg = _mm_loadu_ps(&amp;B(p, 0));</code> ，将会避免非对齐访问问题，在任何情况下读取的 16 字节数据都是自然对齐的。同时也避免了算法在矩阵 B 中的越界问题。</p>\n<p><img loading=\"lazy\" data-src=\"1735044231568.jpg\" alt=\"3333\"></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;emmintrin.h></span> <span class=\"token comment\">// SSE2</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">A</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>lda <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">B</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldb <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">C</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/* Routine for computing C = A * B + C */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AddDot4x4_SSE2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/* Point to the current elements in the four rows of A */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_0p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_1p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_2p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_3p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    __m128 c_p0_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    __m128 c_p1_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    __m128 c_p2_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    __m128 c_p3_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">register</span> <span class=\"token keyword\">float</span> a_0p_reg<span class=\"token punctuation\">,</span> a_1p_reg<span class=\"token punctuation\">,</span> a_2p_reg<span class=\"token punctuation\">,</span> a_3p_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        __m128 b_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 没有 16 字节对齐的情况下，可能会出现非对齐访问</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        a_0p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_0p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        a_1p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_1p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        a_2p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_2p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        a_3p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_3p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        __m128 a_0p_vec <span class=\"token operator\">=</span> <span class=\"token function\">_mm_set_ps1</span><span class=\"token punctuation\">(</span>a_0p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        __m128 a_1p_vec <span class=\"token operator\">=</span> <span class=\"token function\">_mm_set_ps1</span><span class=\"token punctuation\">(</span>a_1p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        __m128 a_2p_vec <span class=\"token operator\">=</span> <span class=\"token function\">_mm_set_ps1</span><span class=\"token punctuation\">(</span>a_2p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        __m128 a_3p_vec <span class=\"token operator\">=</span> <span class=\"token function\">_mm_set_ps1</span><span class=\"token punctuation\">(</span>a_3p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        c_p0_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_p0_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> a_0p_vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        c_p1_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_p1_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> a_1p_vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        c_p2_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_p2_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> a_2p_vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        c_p3_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_p3_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> a_3p_vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c_pntr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    __m128 c_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_p0_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_p1_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_p2_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_p3_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MY_MMult_4x4_10</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the columns of C, unrolled by 4 */</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">/* Loop over the rows of C */</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token function\">AddDot4x4_SSE2</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GemmAccelerateSimd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        MatriA<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        MatriB<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token function\">MY_MMult_4x4_10</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriA<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriB<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>MatriC<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "conv",
                "gemm"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/12/20/conv5/",
            "url": "https://forcheetah.github.io/2024/12/20/conv5/",
            "title": "【gemm】Gemm计算加速",
            "date_published": "2024-12-20T14:06:41.237Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇文章简单介绍矩阵乘的加速方法，以学习算子加速需要注意的方面。想要学习更多内容可以参考<a href=\"https://zhuanlan.zhihu.com/p/65436463\">《OpenBLAS gemm 从零入门》</a>，<a href=\"https://github.com/flame/blislab\">《BLISlab: A Sandbox for Optimizing GEMM》</a>，<a href=\"https://mp.weixin.qq.com/s/w0YCm8TEPxFg0CR6g4A28w\">道阻且长_再探矩阵乘法优化</a>，<a href=\"https://github.com/BBuf/how-to-optimize-gemm\">《How To Optimize GEMM》</a>等项目或文章。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"1基准算法\"><a class=\"anchor\" href=\"#1基准算法\">#</a> 1. 基准算法</h1>\n<p><img loading=\"lazy\" data-src=\"1734702937283.jpg\" alt=\"1.基准算法\"></p>\n<p>矩阵乘运算的基准算法，未经过任何优化。矩阵以行主序进行排布， 针对 X86 平台。矩阵 C= A * B，A 矩阵为 (M,K)， B 矩阵为 (K,N)。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">A</span><span class=\"token expression\"><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span> j <span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>lda <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">B</span><span class=\"token expression\"><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span> j <span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldb <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">C</span><span class=\"token expression\"><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span> j <span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// gemm C = A * B + C</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MatrixMultiply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">&lt;</span>k<span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GemmAccelerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        MatriA<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        MatriB<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">MatrixMultiply</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriA<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriB<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>MatriC<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"循环展开\"><a class=\"anchor\" href=\"#循环展开\">#</a> 循环展开</h1>\n<p><img loading=\"lazy\" data-src=\"1734703129387.jpg\" alt=\"2.循环展开\"></p>\n<p>引入循环展开（Loop Unrolling）  ，每次 A 矩阵一行和 B 四列进行计算，得到四个结果。<br>\n可以减少循环控制开销：减少了循环条件检查和更新的频率，因为现在每四个元素作为一个批次处理，理论上减少了 75% 的循环控制指令。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">A</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>lda <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">B</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldb <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">C</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">Y</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> y<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>incx <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AddDot</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> incx<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>gamma <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> p<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">&lt;</span>k<span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token operator\">*</span>gamma <span class=\"token operator\">+=</span> x<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token function\">Y</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MY_MMult2</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">+=</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the columns of C, unrolled by 4 */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the rows of C */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token function\">AddDot</span><span class=\"token punctuation\">(</span> k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span>j <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token function\">AddDot</span><span class=\"token punctuation\">(</span> k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token function\">AddDot</span><span class=\"token punctuation\">(</span> k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token function\">AddDot</span><span class=\"token punctuation\">(</span> k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">3</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GemmAccelerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        MatriA<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        MatriB<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">MY_MMult2</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriA<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriB<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>MatriC<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"3使用寄存器\"><a class=\"anchor\" href=\"#3使用寄存器\">#</a> 3. 使用寄存器</h1>\n<p>中间计算结果使用寄存器存储，可以减少内存访问次数，可以显著提升性能，因为寄存器访问速度远快于内存访问。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">A</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>lda <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">B</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldb <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">C</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* Routine for computing C = A * B + C */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AddDot1x4</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">register</span> <span class=\"token keyword\">float</span>    c_00_reg<span class=\"token punctuation\">,</span>   c_01_reg<span class=\"token punctuation\">,</span>   c_02_reg<span class=\"token punctuation\">,</span>   c_03_reg<span class=\"token punctuation\">,</span>  a_0p_reg<span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  c_00_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  c_01_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  c_02_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  c_03_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> p<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">&lt;</span>k<span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    a_0p_reg <span class=\"token operator\">=</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> p <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    c_00_reg <span class=\"token operator\">+=</span> a_0p_reg <span class=\"token operator\">*</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    c_01_reg <span class=\"token operator\">+=</span> a_0p_reg <span class=\"token operator\">*</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    c_02_reg <span class=\"token operator\">+=</span> a_0p_reg <span class=\"token operator\">*</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    c_03_reg <span class=\"token operator\">+=</span> a_0p_reg <span class=\"token operator\">*</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_00_reg<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_01_reg<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_02_reg<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_03_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MY_MMult_1x4_6</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">+=</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the columns of C, unrolled by 4 */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the rows of C */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token function\">AddDot1x4</span><span class=\"token punctuation\">(</span> k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span>j <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GemmAccelerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        MatriA<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        MatriB<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token function\">MY_MMult_1x4_6</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriA<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriB<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>MatriC<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"4避免乘法\"><a class=\"anchor\" href=\"#4避免乘法\">#</a> 4. 避免乘法</h1>\n<p><img loading=\"lazy\" data-src=\"1734703236955.jpg\" alt=\"4.避免乘法\"></p>\n<p>本次算法相对上一个，调整了循环展开的矩阵（从矩阵 B 变成了矩阵 A）。最内层循环中的  <code>c_00_reg += a_0p_reg * B( p, 0 );</code>  变成  <code> c_00_reg += b_0p_reg * *ap0_pntr++;</code> ，即用指针的累加替换了原来的 <code>B( p, 0 )</code> ，使得最内层循环减少了 4 个乘法。</p>\n<p>调整循环展开矩阵的原因是 行主序，矩阵 A 在内存中是连续的。</p>\n<p>避免乘法： 通常来讲乘法消耗的时间长于加法，效率差异取决于具体的硬件平台。减少乘法计算量可以提高算法效率。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">A</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>lda <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">B</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldb <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">C</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* Routine for computing C = A * B + C */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AddDot1x4</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">register</span> <span class=\"token keyword\">float</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre> c_00_reg<span class=\"token punctuation\">,</span>   c_01_reg<span class=\"token punctuation\">,</span>   c_02_reg<span class=\"token punctuation\">,</span>   c_03_reg<span class=\"token punctuation\">,</span>  b_0p_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">float</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token operator\">*</span>ap0_pntr<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ap1_pntr<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ap2_pntr<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ap3_pntr<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  ap0_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  ap1_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  ap2_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  ap3_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  c_00_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  c_01_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  c_02_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  c_03_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> p<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">&lt;</span>k<span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    b_0p_reg <span class=\"token operator\">=</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    c_00_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap0_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    c_01_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap1_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    c_02_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap2_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    c_03_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap3_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_00_reg<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_01_reg<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_02_reg<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_03_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MY_MMult_1x4_7</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">+=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the columns of C, unrolled by 4 */</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the rows of C */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token function\">AddDot1x4</span><span class=\"token punctuation\">(</span> k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span>j <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GemmAccelerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        MatriA<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        MatriB<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">MY_MMult_1x4_7</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriA<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriB<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>MatriC<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"5进一步循环展开\"><a class=\"anchor\" href=\"#5进一步循环展开\">#</a> 5. 进一步循环展开</h1>\n<p>将最内部的循环也展开，即原本的 <code>for ( p=0; p&lt;k; p++ )</code>  变成  <code> for ( p=0; p&lt;k; p+=4 )</code> ，内部计算的内容变成原来的四倍。当然也开辟了更多的寄存器。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">A</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>lda <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">B</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldb <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">C</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* Routine for computing C = A * B + C */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AddDot1x4</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">register</span> <span class=\"token keyword\">float</span>   c_00_reg<span class=\"token punctuation\">,</span>   c_01_reg<span class=\"token punctuation\">,</span>   c_02_reg<span class=\"token punctuation\">,</span>   c_03_reg<span class=\"token punctuation\">,</span>  b_0p_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">float</span>  <span class=\"token operator\">*</span>ap0_pntr<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ap1_pntr<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ap2_pntr<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ap3_pntr<span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  ap0_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  ap1_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  ap2_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  ap3_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  c_00_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  c_01_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  c_02_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  c_03_reg <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> p<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">&lt;</span>k<span class=\"token punctuation\">;</span> p<span class=\"token operator\">+=</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    b_0p_reg <span class=\"token operator\">=</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    c_00_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap0_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    c_01_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap1_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    c_02_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap2_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    c_03_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap3_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    b_0p_reg <span class=\"token operator\">=</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span> p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    c_00_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap0_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    c_01_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap1_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    c_02_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap2_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    c_03_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap3_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    b_0p_reg <span class=\"token operator\">=</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span> p<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    c_00_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap0_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    c_01_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap1_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    c_02_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap2_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    c_03_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap3_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    b_0p_reg <span class=\"token operator\">=</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span> p<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    c_00_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap0_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    c_01_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap1_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    c_02_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap2_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    c_03_reg <span class=\"token operator\">+=</span> b_0p_reg <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ap3_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_00_reg<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_01_reg<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_02_reg<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> c_03_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MY_MMult_1x4_8</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">+=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the columns of C, unrolled by 4 */</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the rows of C */</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token function\">AddDot1x4</span><span class=\"token punctuation\">(</span> k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span>j <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GemmAccelerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        MatriA<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        MatriB<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token function\">MY_MMult_1x4_8</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriA<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriB<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>MatriC<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"6使用simd指令\"><a class=\"anchor\" href=\"#6使用simd指令\">#</a> 6. 使用 SIMD 指令</h1>\n<p><img loading=\"lazy\" data-src=\"1734703349079.jpg\" alt=\"6.使用指令\"></p>\n<p>SIMD 指令是单指令多数据，以 X86 平台的 SSE2 为例，其支持 128 的寄存器，一次性可以计算 4 个 float 或 int 数据，能够提高算法的并行度。</p>\n<p>代码中的 SSE 指令  <code>_mm_setzero_ps</code> ：将寄存器置零， <code>_mm_loadu_ps</code> ：读取指定位置的数据到寄存器， <code>_mm_mul_ps</code> ：乘运算， <code>_mm_add_ps</code> ：加运算， <code>_mm_storeu_ps</code> ：将寄存器的数据存储会内存， <code>_mm_set_ps1 </code> ：将给定地址的一个数复制 4 份到寄存器。</p>\n<p>以下代码在 M 和 N 两个方向循环展开（和 5 不同），一次性计算 16 个数据。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;emmintrin.h></span> <span class=\"token comment\">// SSE2</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">A</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>lda <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">B</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldb <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">C</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/* Routine for computing C = A * B + C */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AddDot4x4_SSE2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/* Point to the current elements in the four rows of A */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_0p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_1p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_2p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_3p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    __m128 c_p0_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    __m128 c_p1_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    __m128 c_p2_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    __m128 c_p3_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">register</span> <span class=\"token keyword\">float</span> a_0p_reg<span class=\"token punctuation\">,</span> a_1p_reg<span class=\"token punctuation\">,</span> a_2p_reg<span class=\"token punctuation\">,</span> a_3p_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        __m128 b_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        a_0p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_0p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        a_1p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_1p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        a_2p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_2p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        a_3p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_3p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        __m128 a_0p_vec <span class=\"token operator\">=</span> <span class=\"token function\">_mm_set_ps1</span><span class=\"token punctuation\">(</span>a_0p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        __m128 a_1p_vec <span class=\"token operator\">=</span> <span class=\"token function\">_mm_set_ps1</span><span class=\"token punctuation\">(</span>a_1p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        __m128 a_2p_vec <span class=\"token operator\">=</span> <span class=\"token function\">_mm_set_ps1</span><span class=\"token punctuation\">(</span>a_2p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        __m128 a_3p_vec <span class=\"token operator\">=</span> <span class=\"token function\">_mm_set_ps1</span><span class=\"token punctuation\">(</span>a_3p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        c_p0_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_p0_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> a_0p_vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        c_p1_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_p1_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> a_1p_vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        c_p2_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_p2_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> a_2p_vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        c_p3_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_p3_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> a_3p_vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c_pntr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    __m128 c_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_p0_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_p1_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_p2_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_p3_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MY_MMult_4x4_10</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the columns of C, unrolled by 4 */</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">/* Loop over the rows of C */</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token function\">AddDot4x4_SSE2</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GemmAccelerateSimd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        MatriA<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        MatriB<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token function\">MY_MMult_4x4_10</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriA<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriB<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>MatriC<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"7矩阵分块\"><a class=\"anchor\" href=\"#7矩阵分块\">#</a> 7. 矩阵分块</h1>\n<p><img loading=\"lazy\" data-src=\"1734703427993.jpg\" alt=\"7.矩阵分块\"></p>\n<p>分块技术（blocking）是一种常用的优化策略，旨在改善缓存命中率和数据局部性，进而提升计算密集型操作（如矩阵乘法）的性能。通过将大矩阵分割成较小的子矩阵（即 “块”），可以更好地利用 CPU 缓存，并减少内存访问延迟。</p>\n<p>以下代码中， <code>mc</code>  (Macro for m-block Count)：定义了处理矩阵行方向上的块大小 ， <code>kc</code>  (Macro for k-block Count)：定义了处理矩阵列方向上的块大小。在整个代码中被用作循环边界或参数，用于控制矩阵分块的尺寸。他们将矩阵 A 分割乘 256<em>128 的小块，将矩阵 B 分割成 128</em>N 的小块，然后计算两个小块的矩阵乘运算。至于如何得到最终结果，可以参考《线性代数》知识：分块矩阵乘。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;emmintrin.h></span> <span class=\"token comment\">// SSE2</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;smmintrin.h></span> <span class=\"token comment\">// SSE4.1, for _mm_dp_ps if needed</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* Block sizes */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">mc</span> <span class=\"token expression\"><span class=\"token number\">256</span> </span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">kc</span> <span class=\"token expression\"><span class=\"token number\">128</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/* Create macros so that the matrices are stored in row-major order */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">A</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>lda <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">B</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldb <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">C</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">min</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/* Routine for computing C = A * B + C */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AddDot4x4_SSE</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">/* Point to the current elements in the four rows of A */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_0p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_1p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_2p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_3p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  __m128 c_0p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  __m128 c_1p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  __m128 c_2p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  __m128 c_3p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    __m128 b_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">float</span> a_0p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_0p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">float</span> a_1p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_1p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">float</span> a_2p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_2p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">float</span> a_3p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_3p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    c_0p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_0p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_set1_ps</span><span class=\"token punctuation\">(</span>a_0p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    c_1p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_1p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_set1_ps</span><span class=\"token punctuation\">(</span>a_1p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    c_2p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_2p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_set1_ps</span><span class=\"token punctuation\">(</span>a_2p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    c_3p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_3p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_set1_ps</span><span class=\"token punctuation\">(</span>a_3p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token comment\">// Store results back into C matrix</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    __m128 c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_0p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_1p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_2p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_3p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">InnerKernel_SSE</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">+=</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the columns of C, unrolled by 4 */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        <span class=\"token comment\">/* Loop over the rows of C */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token function\">AddDot4x4_SSE</span><span class=\"token punctuation\">(</span> k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">,</span>j <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MY_MMult_4x4_11_SSE</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> p <span class=\"token operator\">+=</span> kc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">int</span> pb <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">-</span> p<span class=\"token punctuation\">,</span> kc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> mc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      <span class=\"token keyword\">int</span> ib <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">-</span> i<span class=\"token punctuation\">,</span> mc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      <span class=\"token function\">InnerKernel_SSE</span><span class=\"token punctuation\">(</span>ib<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> pb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GemmAccelerateSimd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        MatriA<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        MatriB<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token function\">MY_MMult_4x4_11_SSE</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriA<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriB<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>MatriC<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"8-数据pack\"><a class=\"anchor\" href=\"#8-数据pack\">#</a> 8. 数据 Pack</h1>\n<p>在上面的优化中可以发现，在矩阵乘法的计算中，无论是行主序还是列主序，始终有一个矩阵的内存是没办法连续访问的。为了改善这个情况，可以执行数据 Pack，使矩阵 A 和矩阵 B 的内存变成连续的。</p>\n<p>下面代码，在矩阵运算之前将矩阵 B 按照访问顺序重新排布，存储在 <code>packedB</code>  中。</p>\n<p>是否有速度提升，需要在目标平台上实测，因为算法提升了矩阵运算效率，但是增加了 pack 时间。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;emmintrin.h></span> <span class=\"token comment\">// SSE2</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;smmintrin.h></span> <span class=\"token comment\">// SSE4.1, for _mm_dp_ps if needed</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* Block sizes */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">mc</span> <span class=\"token expression\"><span class=\"token number\">256</span> </span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">kc</span> <span class=\"token expression\"><span class=\"token number\">128</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/* Create macros so that the matrices are stored in row-major order */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">A</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>lda <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">B</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldb <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">C</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">min</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/* Routine for computing C = A * B + C */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PackMatrixB_SSE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b_to<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b_ij_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token operator\">*</span>b_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> b_ij_pntr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token operator\">*</span>b_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> b_ij_pntr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token operator\">*</span>b_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> b_ij_pntr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token operator\">*</span>b_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> b_ij_pntr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AddDot4x4_SSE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">/* Point to the current elements in the four rows of A */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_0p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_1p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_2p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_3p_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  __m128 c_0p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  __m128 c_1p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  __m128 c_2p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  __m128 c_3p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    __m128 b_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Load 4 floats from b</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    b <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">float</span> a_0p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_0p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">float</span> a_1p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_1p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">float</span> a_2p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_2p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">float</span> a_3p_reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a_3p_pntr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    c_0p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_0p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_set1_ps</span><span class=\"token punctuation\">(</span>a_0p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    c_1p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_1p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_set1_ps</span><span class=\"token punctuation\">(</span>a_1p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    c_2p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_2p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_set1_ps</span><span class=\"token punctuation\">(</span>a_2p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    c_3p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_3p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_set1_ps</span><span class=\"token punctuation\">(</span>a_3p_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token comment\">// Store results back into C matrix</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    __m128 c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_0p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_1p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_2p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_3p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">InnerKernel_SSE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token keyword\">float</span> packedB<span class=\"token punctuation\">[</span>k <span class=\"token operator\">*</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* Loop over the columns of C, unrolled by 4 */</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token function\">PackMatrixB_SSE</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>packedB<span class=\"token punctuation\">[</span>j <span class=\"token operator\">*</span> k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* Loop over the rows of C */</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      <span class=\"token function\">AddDot4x4_SSE</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>packedB<span class=\"token punctuation\">[</span>j <span class=\"token operator\">*</span> k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MY_MMult_4x4_12_SSE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> pb<span class=\"token punctuation\">,</span> ib<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> p <span class=\"token operator\">+=</span> kc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    pb <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">-</span> p<span class=\"token punctuation\">,</span> kc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> mc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>      ib <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">-</span> i<span class=\"token punctuation\">,</span> mc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>      <span class=\"token function\">InnerKernel_SSE</span><span class=\"token punctuation\">(</span>ib<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> pb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GemmAccelerateSimd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        MatriA<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        MatriB<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token function\">MY_MMult_4x4_12_SSE</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriA<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriB<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>MatriC<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>#9. 进一步 pack</p>\n<p>将 A 和 B 两个矩阵都进行 pack。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;emmintrin.h></span> <span class=\"token comment\">// SSE2</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;smmintrin.h></span> <span class=\"token comment\">// SSE4.1, for _mm_dp_ps if needed</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* Block sizes */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">mc</span> <span class=\"token expression\"><span class=\"token number\">256</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">kc</span> <span class=\"token expression\"><span class=\"token number\">128</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/* Create macros so that the matrices are stored in row-major order */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">A</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>lda <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">B</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldb <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">C</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ldc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">min</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/* Routine for computing C = A * B + C */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PackMatrixB_SSE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b_to<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b_ij_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token operator\">*</span>b_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> b_ij_pntr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token operator\">*</span>b_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> b_ij_pntr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token operator\">*</span>b_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> b_ij_pntr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token operator\">*</span>b_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> b_ij_pntr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PackMatrixA_SSE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a_to<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token operator\">*</span>a_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token operator\">*</span>a_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token operator\">*</span>a_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token operator\">*</span>a_to<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AddDot4x4_SSE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  __m128 c_0p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  __m128 c_1p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  __m128 c_2p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  __m128 c_3p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_setzero_ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    __m128 b_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Load 4 floats from b</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    b <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    __m128 a_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Load 4 floats from a</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    a <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    c_0p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_0p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_shuffle_ps</span><span class=\"token punctuation\">(</span>a_reg<span class=\"token punctuation\">,</span> a_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_MM_SHUFFLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    c_1p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_1p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_shuffle_ps</span><span class=\"token punctuation\">(</span>a_reg<span class=\"token punctuation\">,</span> a_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_MM_SHUFFLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    c_2p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_2p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_shuffle_ps</span><span class=\"token punctuation\">(</span>a_reg<span class=\"token punctuation\">,</span> a_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_MM_SHUFFLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    c_3p_sum <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_3p_sum<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_mul_ps</span><span class=\"token punctuation\">(</span>b_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_mm_shuffle_ps</span><span class=\"token punctuation\">(</span>a_reg<span class=\"token punctuation\">,</span> a_reg<span class=\"token punctuation\">,</span> <span class=\"token function\">_MM_SHUFFLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token comment\">// Store results back into C matrix</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> c_pntr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    __m128 c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_loadu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_0p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_1p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_2p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span> c_reg <span class=\"token operator\">=</span> <span class=\"token function\">_mm_add_ps</span><span class=\"token punctuation\">(</span>c_reg<span class=\"token punctuation\">,</span> c_3p_sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">_mm_storeu_ps</span><span class=\"token punctuation\">(</span>c_pntr<span class=\"token punctuation\">,</span> c_reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">InnerKernel_SSE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token keyword\">float</span> packedA<span class=\"token punctuation\">[</span>m <span class=\"token operator\">*</span> k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token keyword\">float</span> packedB<span class=\"token punctuation\">[</span>k <span class=\"token operator\">*</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* Loop over the columns of C, unrolled by 4 */</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token function\">PackMatrixB_SSE</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> packedB <span class=\"token operator\">+</span> j <span class=\"token operator\">*</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* Loop over the rows of C */</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token function\">PackMatrixA_SSE</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> packedA <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      <span class=\"token function\">AddDot4x4_SSE</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> packedA <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> k<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> packedB <span class=\"token operator\">+</span> j <span class=\"token operator\">*</span> k<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MY_MMult_4x4_13_SSE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> pb<span class=\"token punctuation\">,</span> ib<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> p <span class=\"token operator\">+=</span> kc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    pb <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">-</span> p<span class=\"token punctuation\">,</span> kc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> mc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>      ib <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">-</span> i<span class=\"token punctuation\">,</span> mc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>      <span class=\"token function\">InnerKernel_SSE</span><span class=\"token punctuation\">(</span>ib<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> pb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">C</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GemmAccelerateSimd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">int</span> K <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> MatriC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        MatriA<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        MatriB<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token function\">MY_MMult_4x4_13_SSE</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriA<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">,</span>MatriB<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>MatriC<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "conv",
                "gemm"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/10/31/tvm05/",
            "url": "https://forcheetah.github.io/2024/10/31/tvm05/",
            "title": "【TVM】通过代码学习编译流程【5】FuseOps",
            "date_published": "2024-10-31T13:11:09.160Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本系列文章将从代码和流程图入手，详细介绍 TVM AI 编译器的编译流程。本文章为第五篇，对应的 TVM 版本为当前最新版本 1.7。</p>\n<p>网络上有不少 TVM 工程的教程资源，如果本博客也是其他教程的简单重复的话，则网络的角落里又多了一份纯粹的空间占用者。所以我在想，本文章有什么特点才值得一看呢？我觉得有两个优点: 1、本文从代码出发，不会泛泛而谈，能够从细节了解 TVM；2、自认为结构流程图画的不错，能够从整体上把握 TVM 的脉络。所以，也许值得一看呢。</p>\n<p>本篇文章介绍 TVM FuseOps 算子融合 Pass。文章 <a href=\"https://forcheetah.github.io/2024/10/21/tvm04/\">《【TVM】通过代码学习编译流程【4】BuildRelay》</a> 已经介绍了函数 <code>OptimizeImpl</code> 。 <code>OptimizeImpl</code>  收集并执行大量针对高级中间表示 Relay IRModule 的优化 Pass。本篇文章将选择其中非常重要的一个 Pass：FuseOps 算子融合 Pass 进行介绍。</p>\n<p>因为代码量巨大，模型编译会分成若干篇文章进行解析。接下来的若干篇都会介绍 BuildRelay 函数 及其调用的子函数。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"python脚本\"><a class=\"anchor\" href=\"#python脚本\">#</a> Python 脚本</h1>\n<p>这里提供一个简单的 Python 脚本，调用 TVM Python 前端，实现 onnx 模型的编译过程。tvm 通过代码学习编程流程系列文章将基本采用这个脚本帮助追踪代码。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> onnx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> tvm<span class=\"token punctuation\">.</span>relay <span class=\"token keyword\">as</span> relay</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> tvm</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> tvm<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> graph_executor</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">######################################    路径信息    ##########################################</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>model_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/resnet18.onnx\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>save_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/pythonSave/\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>onnx_model <span class=\"token operator\">=</span> onnx<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>model_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">##################################    图片信息    ##############################################</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>img_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/.tvm_test_data/data/imagenet_cat.png\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Resize it to 224x224</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>resized_image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>img_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>asarray<span class=\"token punctuation\">(</span>resized_image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># Our input image is in HWC layout while ONNX expects CHW input, so convert the array</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>img_data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Normalize according to the ImageNet input specification</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>imagenet_mean <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.485</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.406</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>imagenet_stddev <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.229</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.225</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>norm_img_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>img_data <span class=\"token operator\">/</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> imagenet_mean<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> imagenet_stddev</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># Add the batch dimension, as we are expecting 4-dimensional input: NCHW.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>norm_img_data<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">####################################     模型编译     ###########################################</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>input_name <span class=\"token operator\">=</span> <span class=\"token string\">\"data\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>target <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>Target<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>shape_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>input_name<span class=\"token punctuation\">:</span> img_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>mod<span class=\"token punctuation\">,</span> params <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>frontend<span class=\"token punctuation\">.</span>from_onnx<span class=\"token punctuation\">(</span>onnx_model<span class=\"token punctuation\">,</span> shape_dict<span class=\"token punctuation\">,</span> export_node_renamed_model_path<span class=\"token operator\">=</span>save_path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建 IRModule  高级 Relay IR</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">with</span> tvm<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>PassContext<span class=\"token punctuation\">(</span>opt_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    lib <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> target<span class=\"token operator\">=</span>target<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 创建 GraphExecutorFactoryModule  </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#######################################     模型保存      ########################################</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># save</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># 保存编译后的库文件（.so）</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>lib_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.so\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>lib<span class=\"token punctuation\">.</span>get_lib<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>export_library<span class=\"token punctuation\">(</span>lib_fname<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># 保存模型参数（.params）</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>params_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.params\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>params_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> param_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    param_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>relay<span class=\"token punctuation\">.</span>save_param_dict<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_params<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># 保存 JSON 格式的计算图（.json）</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>json_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.json\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>json_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> json_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    json_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_executor_config<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>dev <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>module <span class=\"token operator\">=</span> graph_executor<span class=\"token punctuation\">.</span>GraphModule<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">[</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># graph_executor.GraphModule</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">############################       运行    ##########################################</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>module<span class=\"token punctuation\">.</span>set_input<span class=\"token punctuation\">(</span>input_name<span class=\"token punctuation\">,</span> img_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>module<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>output_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>tvm_output <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>get_output<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tvm_output<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"fuseops示例\"><a class=\"anchor\" href=\"#fuseops示例\">#</a> FuseOps 示例</h1>\n<p>文章 <a href=\"https://forcheetah.github.io/2024/10/21/tvm04/\">《【TVM】通过代码学习编译流程【4】BuildRelay》</a> 已经介绍了函数 <code>OptimizeImpl</code> 。 <code>OptimizeImpl</code>  收集并执行大量针对高级中间表示 Relay IRModule 的优化 Pass。本篇文章将选择其中非常重要的一个 Pass：FuseOps 算子融合 Pass 进行介绍。</p>\n<p>先来看看算子融合的效果。对前述 Python 脚本做一下小修改，在 35 行 <code>from_onnx()</code>  函数后面增加下面几行代码：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> tvm<span class=\"token punctuation\">.</span>relay <span class=\"token keyword\">import</span> transform</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========================================\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 算子融合 Pass 之前的 IRModule</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mod <span class=\"token operator\">=</span> transform<span class=\"token punctuation\">.</span>FuseOps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========================================\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 算子融合 Pass 之后的 IRModule</span></pre></td></tr></table></figure><p>算子融合之前：</p>\n<p><code>%+数字</code> 表示临时变量； <code>@+字母</code> 表示全局变量。</p>\n<p>Relay IRModule 只有一个 main 函数，main 函数中包含许多单个的算子表达式，这些表达式组合成完整的图结构。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>def @<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>data<span class=\"token operator\">:</span> Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> float32<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> float32<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">%</span><span class=\"token number\">0</span> <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span><span class=\"token function\">conv2d</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>data<span class=\"token punctuation\">,</span> meta<span class=\"token punctuation\">[</span>relay<span class=\"token punctuation\">.</span>Constant<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> channels<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token operator\">%</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span><span class=\"token function\">bias_add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> meta<span class=\"token punctuation\">[</span>relay<span class=\"token punctuation\">.</span>Constant<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span><span class=\"token function\">relu</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">%</span><span class=\"token number\">3</span> <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span><span class=\"token function\">max_pool2d</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> pool_size<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token operator\">%</span><span class=\"token number\">4</span> <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span><span class=\"token function\">conv2d</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> meta<span class=\"token punctuation\">[</span>relay<span class=\"token punctuation\">.</span>Constant<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> channels<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token operator\">%</span><span class=\"token number\">5</span> <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span><span class=\"token function\">bias_add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> meta<span class=\"token punctuation\">[</span>relay<span class=\"token punctuation\">.</span>Constant<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>算子融合之后：</p>\n<p>TVM 将原本独立的  <code>nn.conv2d</code>  ， <code>nn.bias_add</code> ， <code>%2 = nn.relu</code>  封装成了复合表达式  <code>%5 = fn (...)</code> ，复合表达式里面包含  <code>nn.conv2d</code>  ， <code>nn.bias_add</code> ， <code>%2 = nn.relu</code>  三个算子。  之后通过  <code>%6 = %5(...)</code>  来调用执行该复合表达式。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>def @<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>data<span class=\"token operator\">:</span> Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> float32<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> float32<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">%</span><span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token function\">fn</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>p05<span class=\"token operator\">:</span> Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> float32<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span>p12<span class=\"token operator\">:</span> Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> float32<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span>p22<span class=\"token operator\">:</span> Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> float32<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Primitive<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Tensor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">222</span><span class=\"token punctuation\">,</span> <span class=\"token number\">222</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> float32<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">%</span><span class=\"token number\">3</span> <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span><span class=\"token function\">conv2d</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>p05<span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span>p12<span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> channels<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">%</span><span class=\"token number\">4</span> <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span><span class=\"token function\">bias_add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span>p22<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    nn<span class=\"token punctuation\">.</span><span class=\"token function\">relu</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token operator\">%</span><span class=\"token number\">6</span> <span class=\"token operator\">=</span> <span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>data<span class=\"token punctuation\">,</span> meta<span class=\"token punctuation\">[</span>relay<span class=\"token punctuation\">.</span>Constant<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> meta<span class=\"token punctuation\">[</span>relay<span class=\"token punctuation\">.</span>Constant<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总之，该例子展示了  <code>FuseOps()</code>  匹配到了连续的  <code>nn.conv2d</code>  ， <code>nn.bias_add</code> ， <code>%2 = nn.relu</code>  算子，并在 Relay IRModule 中通过复合表达式表示。</p>\n<h1 id=\"fuseops\"><a class=\"anchor\" href=\"#fuseops\">#</a> FuseOps</h1>\n<p><img loading=\"lazy\" data-src=\"1730379862137.jpg\" alt=\"算子融合流程图\"></p>\n<p><code>FuseOps</code>  函数如下所示。</p>\n<p><code>FuseOps</code>  函数目的是创建一个 <code>FunctionPass</code>  完成 IRModule 的优化。可以通过文章<a href=\"https://forcheetah.github.io/2024/10/22/tvm3.5/\">《【TVM】通过代码学习类【3.5】Pass》</a>再回顾一下 <code>FunctionPass</code> 。</p>\n<p><code>FunctionPass</code>  的关键执行函数是传入的  <code>pass_func</code> 。</p>\n<p><code>pass_func</code>  里面有很多参数的配置，我们直接看含有六个参数的重载函数： <code>FuseOps()</code> 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Pass <span class=\"token function\">FuseOps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fuse_opt_level<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> runtime<span class=\"token double-colon punctuation\">::</span>TypedPackedFunc<span class=\"token operator\">&lt;</span><span class=\"token function\">Function</span><span class=\"token punctuation\">(</span>Function<span class=\"token punctuation\">,</span> IRModule<span class=\"token punctuation\">,</span> PassContext<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> pass_func <span class=\"token operator\">=</span> <span class=\"token comment\">// Pass 的关键执行函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>Function f<span class=\"token punctuation\">,</span> IRModule m<span class=\"token punctuation\">,</span> PassContext pc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token keyword\">bool</span> link_params <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       Executor executor <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>           m<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">GetAttr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Executor<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>tvm<span class=\"token double-colon punctuation\">::</span>attr<span class=\"token double-colon punctuation\">::</span>kExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value_or</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">NullValue</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Executor<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       link_params <span class=\"token operator\">=</span> executor<span class=\"token punctuation\">.</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                         <span class=\"token operator\">?</span> executor<span class=\"token operator\">-></span>attrs<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">GetAttr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Bool<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"link-params\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value_or</span><span class=\"token punctuation\">(</span><span class=\"token function\">Bool</span><span class=\"token punctuation\">(</span>link_params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                         <span class=\"token operator\">:</span> link_params<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       link_params <span class=\"token operator\">=</span> pc<span class=\"token operator\">-></span><span class=\"token function\">GetConfig</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"relay.FuseOps.link_params\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Bool</span><span class=\"token punctuation\">(</span>link_params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token keyword\">int</span> opt_level <span class=\"token operator\">=</span> fuse_opt_level <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> pc<span class=\"token operator\">-></span>opt_level <span class=\"token operator\">:</span> fuse_opt_level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       <span class=\"token keyword\">auto</span> max_fuse_depth <span class=\"token operator\">=</span> pc<span class=\"token operator\">-></span><span class=\"token function\">GetConfig</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"relay.FuseOps.max_depth\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Integer</span><span class=\"token punctuation\">(</span>kMaxFusedOps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token keyword\">auto</span> target <span class=\"token operator\">=</span> <span class=\"token class-name\">Target</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       size_t max_function_args <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>           <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>               <span class=\"token operator\">?</span> target<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">GetAttr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"max_function_args\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IntValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>               <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">Downcast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">FuseOps</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> opt_level<span class=\"token punctuation\">,</span> max_fuse_depth<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IntValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                                         max_function_args<span class=\"token punctuation\">,</span> link_params<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token function\">CreateFunctionPass</span><span class=\"token punctuation\">(</span>pass_func<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"FuseOps\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"InferType\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回 FunctionPass</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>含有六个参数的重载函数： <code>FuseOps()</code> ，函数内部初始化了类 <code>FuseMutator</code> ，并直接调用该类的 <code>Transform()</code>  成员函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Expr <span class=\"token function\">FuseOps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Expr<span class=\"token operator\">&amp;</span> expr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fuse_opt_level<span class=\"token punctuation\">,</span> size_t max_fuse_depth<span class=\"token punctuation\">,</span> size_t max_function_args<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token keyword\">bool</span> link_params<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> IRModule<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">module</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token function\">FuseMutator</span><span class=\"token punctuation\">(</span>fuse_opt_level<span class=\"token punctuation\">,</span> max_fuse_depth<span class=\"token punctuation\">,</span> max_function_args<span class=\"token punctuation\">,</span> link_params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token punctuation\">.</span><span class=\"token function\">Transform</span><span class=\"token punctuation\">(</span>expr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"1730379862137.jpg\" alt=\"算子融合流程图\"></p>\n<p><code>Transform()</code>  函数有三个部分：</p>\n<p><code>IndexedForwardGraphCreator::Create</code> : 创建前序图结构（只有当前节点指向后续节点的单向边）。顺带构建一个由 “逆深度优先搜索” 序列 <code>post_dfs_order</code> ，实际上是个节点顺序执行序列。</p>\n<p><code>GraphPartitioner().Partition()</code> : 创建后序支配树，匹配算子，通过并查集算法融合 group。</p>\n<p><code>this-&gt;Mutate(body)</code> : 构建新的算子融合后的 IRModule 抽象语法树结构。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Run the transform</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> Expr <span class=\"token function\">Transform</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Expr<span class=\"token operator\">&amp;</span> body<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fuse_opt_level<span class=\"token punctuation\">,</span> size_t max_fuse_depth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> link_params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// setup the group map.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">auto</span> graph <span class=\"token operator\">=</span> <span class=\"token class-name\">IndexedForwardGraphCreator</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arena_<span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">auto</span> groups <span class=\"token operator\">=</span> <span class=\"token function\">GraphPartitioner</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arena_<span class=\"token punctuation\">,</span> fuse_opt_level<span class=\"token punctuation\">,</span> max_fuse_depth<span class=\"token punctuation\">,</span> max_function_args_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                     <span class=\"token punctuation\">.</span><span class=\"token function\">Partition</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t nid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> nid <span class=\"token operator\">&lt;</span> graph<span class=\"token punctuation\">.</span>post_dfs_order<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>nid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token function\">ICHECK</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">.</span>post_dfs_order<span class=\"token punctuation\">[</span>nid<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>ref <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     gmap_<span class=\"token punctuation\">[</span>graph<span class=\"token punctuation\">.</span>post_dfs_order<span class=\"token punctuation\">[</span>nid<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>ref<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> groups<span class=\"token punctuation\">[</span>nid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// The following line can be used for debug.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token comment\">// this->DebugDumpGroup(body);</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">Mutate</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"indexedforwardgraphcreator\"><a class=\"anchor\" href=\"#indexedforwardgraphcreator\">#</a> IndexedForwardGraphCreator</h2>\n<p><code>IndexedForwardGraphCreator::Create</code>  函数如下所示。</p>\n<p>该函数创建前序图结构（只有当前节点指向后续节点的单向边），完成主要功能的是 <code>Prepare(const Expr&amp; body)</code></p>\n<p><code>this-&gt;Update()</code>  功能是创建当前节点 <code>node</code> ，如果有父节点，则创建一条指向父节点的边 <code>edge</code> 。</p>\n<p><code>Prepare(const Expr&amp; body)</code>  函数中， <code>this-&gt;Update();</code>  创建首个根节点，之后调用 <code>this-&gt;VisitExpr(body)</code> ，遍历抽象语法树，逐个创建节点和边，构建前序图结构。（ <code>IndexedForwardGraphCreator</code>  类继承了 <code>ExprVisitor</code>  类， <code>ExprVisitor</code>  类是 TVM 提供的帮助遍历抽象语法树的工具，只需要重写 <code>VisitExpr_()</code>  函数，就读取或修改语法树相应的节点，如 <code>void VisitExpr_(const CallNode* call) final &#123;&#125;</code> ）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Creator of post dominator tree of the dataflow</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">IndexedForwardGraphCreator</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">ExprVisitor</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">static</span> IndexedForwardGraph <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>support<span class=\"token double-colon punctuation\">::</span>Arena<span class=\"token operator\">*</span> arena<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Expr<span class=\"token operator\">&amp;</span> body<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IndexedForwardGraphCreator <span class=\"token function\">creator</span><span class=\"token punctuation\">(</span>arena<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> creator<span class=\"token punctuation\">.</span><span class=\"token function\">Prepare</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">explicit</span> <span class=\"token function\">IndexedForwardGraphCreator</span><span class=\"token punctuation\">(</span>support<span class=\"token double-colon punctuation\">::</span>Arena<span class=\"token operator\">*</span> arena<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">arena_</span><span class=\"token punctuation\">(</span>arena<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  IndexedForwardGraph <span class=\"token function\">Prepare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Expr<span class=\"token operator\">&amp;</span> body<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 创建前序图结构</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">Update</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> kOpaque<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 创建首个根节点</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">VisitExpr</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 遍历抽象语法树，逐个创建节点和边，构建前序图结构</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>graph_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">/*! \\brief allocator of all the internal node object */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  support<span class=\"token double-colon punctuation\">::</span>Arena<span class=\"token operator\">*</span> arena_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// The output.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  IndexedForwardGraph graph_<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Prepare 函数创建的图结构类</span></pre></td></tr></table></figure><p>以下是  <code>IndexedForwardGraph</code>  类，包含节点 <code>node</code> 、边 <code>edge</code> ，通过 <code>LinkedList&lt;Edge&gt; outputs;</code>  构建链接关系。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">IndexedForwardGraph</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/*! \\brief The corresponding node */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/*! \\brief The respective pattern of this op */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    OpPatternKind pattern<span class=\"token punctuation\">&#123;</span>kOpaque<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">/*! \\brief A node in the graph. */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/*! \\brief weak reference to the corresponding edge. */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> tvm<span class=\"token double-colon punctuation\">::</span>Object<span class=\"token operator\">*</span> ref<span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/*! \\brief The index of the node in topological order. */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    size_t index<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/*! \\brief Whether this node is referenced by external source */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">bool</span> extern_ref<span class=\"token punctuation\">&#123;</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/*! \\brief The general pattern in the node */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    OpPatternKind pattern<span class=\"token punctuation\">&#123;</span>kOpaque<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">/*! \\brief The outputs of the node. */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    LinkedList<span class=\"token operator\">&lt;</span>Edge<span class=\"token operator\">></span> outputs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">/*! \\brief The node map that maps node to graph */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> tvm<span class=\"token double-colon punctuation\">::</span>Object<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> Node<span class=\"token operator\">*</span><span class=\"token operator\">></span> node_map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">/*! \\brief All the nodes in post DFS order */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">*</span><span class=\"token operator\">></span> post_dfs_order<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"graphpartitioner\"><a class=\"anchor\" href=\"#graphpartitioner\">#</a> GraphPartitioner</h2>\n<p><img loading=\"lazy\" data-src=\"1730379862137.jpg\" alt=\"算子融合流程图\"></p>\n<p><code>GraphPartitioner().Partition()</code>  函数如下所示。</p>\n<p><code>this-&gt;InitGroups(graph)</code> : 初始化，即将图中所有节点都初始化为一个 group。</p>\n<p><code>DominatorTree::PostDom()</code> : 构建后支配树</p>\n<p><code>this-&gt;RunFuse</code>  : 执行融合</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>GraphPartitioner<span class=\"token double-colon punctuation\">::</span>Group<span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token class-name\">GraphPartitioner</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Partition</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> IndexedForwardGraph<span class=\"token operator\">&amp;</span> graph<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">InitGroups</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 每个节点初始化为一个 group</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>opt_level_ <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>groups_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// get post dominator tree</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">auto</span> post_dom_tree <span class=\"token operator\">=</span> <span class=\"token class-name\">DominatorTree</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">PostDom</span><span class=\"token punctuation\">(</span>arena_<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 构建后支配树</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// run fusion algorithm.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> phase <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> phase <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>phase<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 分三个阶段执行融合</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">RunFuse</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> post_dom_tree<span class=\"token punctuation\">,</span> phase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>groups_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Post dominator tree（后支配树）是程序分析中的一种数据结构，主要用于编译器优化和静态分析。在控制流图（CFG, Control Flow Graph）中，一个节点 B 后支配另一个节点 A，当且仅当从 A 到程序结束点的所有路径都必须经过 B。后支配树以程序的退出点为根，每个节点指向它的直接后支配者。后支配树可以帮助识别哪些操作可以被安全地融合在一起。如果两个或多个操作属于同一个后支配节点，这意味着它们之间没有其他控制流分支，因此可以被看作是顺序执行的，并且有可能被融合。</p>\n<p><code>this-&gt;RunFuse</code>  : 根据不同匹配模式 pattern 融合 group。复合匹配模式的 group 通过 <code>MergeFromTo</code>  函数进行合并。合并过程是找到两个 group 的根，将其中一个 root 作为另一个的后续节点 <code>child-&gt;parent = parent;</code> 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">GraphPartitioner</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MergeFromTo</span><span class=\"token punctuation\">(</span>Group<span class=\"token operator\">*</span> child<span class=\"token punctuation\">,</span> Group<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  child <span class=\"token operator\">=</span> child<span class=\"token operator\">-></span><span class=\"token function\">FindRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  parent <span class=\"token operator\">=</span> parent<span class=\"token operator\">-></span><span class=\"token function\">FindRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// update the number of nodes of the parent group</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  parent<span class=\"token operator\">-></span>num_nodes <span class=\"token operator\">+=</span> child<span class=\"token operator\">-></span>num_nodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  parent<span class=\"token operator\">-></span>args_num <span class=\"token operator\">+=</span> child<span class=\"token operator\">-></span>args_num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  child<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 合并 group</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// update anchor ref and pattern</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token operator\">-></span>anchor_ref <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">ICHECK</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>anchor_ref <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    parent<span class=\"token operator\">-></span>anchor_ref <span class=\"token operator\">=</span> child<span class=\"token operator\">-></span>anchor_ref<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    parent<span class=\"token operator\">-></span>pattern <span class=\"token operator\">=</span> <span class=\"token function\">CombinePattern</span><span class=\"token punctuation\">(</span>child<span class=\"token operator\">-></span>pattern<span class=\"token punctuation\">,</span> parent<span class=\"token operator\">-></span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"mutatebody\"><a class=\"anchor\" href=\"#mutatebody\">#</a> Mutate(body)</h2>\n<p><img loading=\"lazy\" data-src=\"1730379862137.jpg\" alt=\"算子融合流程图\"></p>\n<p><code>Mutate(body)</code>  构建算子融合后的 IRModule 抽象语法树结构。</p>\n<p><code>Mutate(body)</code>  函数所在的类 <code>FuseMutator</code>  派生自祖先类 <code>ExprMutator</code> （抽象语法树修改工具类），只需要重写 <code>Rewrite_()</code>  函数就能完成对 IRModule 的修改。</p>\n<p>以 <code>Rewrite_(const CallNode* call, const Expr&amp; post)</code>  为例，在遍历到 Call 节点时正常创建 Call 节点 。若如果该节点是 group 的根节点，则将该 Call 节点子图分支封装成 function。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Transform calls.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Expr <span class=\"token function\">Rewrite_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> CallNode<span class=\"token operator\">*</span> call<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Expr<span class=\"token operator\">&amp;</span> post<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>call<span class=\"token operator\">-></span>op<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">as</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>OpNode<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fnoncomputational <span class=\"token operator\">=</span> Op<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">GetAttrMap</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>TNonComputational<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TNonComputational\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fqnncanonicalize <span class=\"token operator\">=</span> Op<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">GetAttrMap</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>FTVMLegalize<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FTVMQnnCanonicalize\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      Op op <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">Downcast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Op<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>call<span class=\"token operator\">-></span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fnoncomputational<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>fqnncanonicalize<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ExprMutator</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">VisitExpr_</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">// If it is a primitive op call</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token comment\">// then we must have a group assignment for it already.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token function\">ICHECK</span><span class=\"token punctuation\">(</span>gmap_<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>call<span class=\"token operator\">-></span>op <span class=\"token operator\">==</span> stop_fusion_op<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ExprMutator</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">VisitExpr</span><span class=\"token punctuation\">(</span>call<span class=\"token operator\">-></span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">auto</span><span class=\"token operator\">*</span> ret_group <span class=\"token operator\">=</span> gmap_<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">FindRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      Array<span class=\"token operator\">&lt;</span>Expr<span class=\"token operator\">></span> new_args <span class=\"token operator\">=</span> <span class=\"token function\">GetNewArguments</span><span class=\"token punctuation\">(</span>call<span class=\"token operator\">-></span>args<span class=\"token punctuation\">,</span> ret_group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">// 正常创建 Call 节点        </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">auto</span> new_call <span class=\"token operator\">=</span> <span class=\"token function\">Call</span><span class=\"token punctuation\">(</span>call<span class=\"token operator\">-></span>op<span class=\"token punctuation\">,</span> new_args<span class=\"token punctuation\">,</span> call<span class=\"token operator\">-></span>attrs<span class=\"token punctuation\">,</span> call<span class=\"token operator\">-></span>type_args<span class=\"token punctuation\">,</span> call<span class=\"token operator\">-></span>span<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_group<span class=\"token operator\">-></span>root_ref <span class=\"token operator\">==</span> call<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 如果该节点是 group 的根节点</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// This is the root of the group</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// create the new call node.</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">MakeNewFunction</span><span class=\"token punctuation\">(</span>ret_group<span class=\"token punctuation\">,</span> call<span class=\"token operator\">-></span><span class=\"token function\">checked_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> new_call<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 Call 节点子图分支封装成 function</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// This is an intermediate node of a fused function</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// simply return the new call.</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>new_call<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token class-name\">ExprMutator</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">VisitExpr_</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复。</p>\n",
            "tags": [
                "tvm",
                "compile"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/10/25/tvm06/",
            "url": "https://forcheetah.github.io/2024/10/25/tvm06/",
            "title": "【TVM】通过代码学习编译流程【6】CodeGen",
            "date_published": "2024-10-25T14:11:43.312Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本系列文章将从代码和流程图入手，详细介绍 TVM AI 编译器的编译流程。本文章为第六篇，对应的 TVM 版本为当前最新版本 1.7。</p>\n<p>网络上有不少 TVM 工程的教程资源，如果本博客也是其他教程的简单重复的话，则网络的角落里又多了一份纯粹的空间占用者。所以我在想，本文章有什么特点才值得一看呢？我觉得有两个优点: 1、本文从代码出发，不会泛泛而谈，能够从细节了解 TVM；2、自认为结构流程图画的不错，能够从整体上把握 TVM 的脉络。所以，也许值得一看呢。</p>\n<p>本篇文章介绍 TVM CodeGen 函数。文章 <a href=\"https://forcheetah.github.io/2024/10/21/tvm04/\">《【TVM】通过代码学习编译流程【4】BuildRelay》</a> 已经介绍了 <code>BuildRelay</code>  总体流程和其子函数 <code>OptimizeImpl</code> 。本篇文章将介绍后续的 CodeGen 流程的部分内容。 <code>Codegen(func_module, func, mod_name)</code> —— 将 Relay IRModule 降级为 TIR Module。</p>\n<p>因为代码量巨大，模型编译会分成若干篇文章进行解析。接下来的若干篇都会介绍 BuildRelay 函数 及其调用的子函数。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"python脚本\"><a class=\"anchor\" href=\"#python脚本\">#</a> Python 脚本</h1>\n<p>这里提供一个简单的 Python 脚本，调用 TVM Python 前端，实现 onnx 模型的编译过程。tvm 通过代码学习编程流程系列文章将基本采用这个脚本帮助追踪代码。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> onnx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> tvm<span class=\"token punctuation\">.</span>relay <span class=\"token keyword\">as</span> relay</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> tvm</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> tvm<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> graph_executor</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">######################################    路径信息    ##########################################</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>model_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/resnet18.onnx\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>save_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/pythonSave/\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>onnx_model <span class=\"token operator\">=</span> onnx<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>model_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">##################################    图片信息    ##############################################</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>img_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/.tvm_test_data/data/imagenet_cat.png\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Resize it to 224x224</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>resized_image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>img_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>asarray<span class=\"token punctuation\">(</span>resized_image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># Our input image is in HWC layout while ONNX expects CHW input, so convert the array</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>img_data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Normalize according to the ImageNet input specification</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>imagenet_mean <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.485</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.406</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>imagenet_stddev <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.229</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.225</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>norm_img_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>img_data <span class=\"token operator\">/</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> imagenet_mean<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> imagenet_stddev</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># Add the batch dimension, as we are expecting 4-dimensional input: NCHW.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>norm_img_data<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">####################################     模型编译     ###########################################</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>input_name <span class=\"token operator\">=</span> <span class=\"token string\">\"data\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>target <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>Target<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>shape_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>input_name<span class=\"token punctuation\">:</span> img_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>mod<span class=\"token punctuation\">,</span> params <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>frontend<span class=\"token punctuation\">.</span>from_onnx<span class=\"token punctuation\">(</span>onnx_model<span class=\"token punctuation\">,</span> shape_dict<span class=\"token punctuation\">,</span> export_node_renamed_model_path<span class=\"token operator\">=</span>save_path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建 IRModule  高级 Relay IR</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">with</span> tvm<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>PassContext<span class=\"token punctuation\">(</span>opt_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    lib <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> target<span class=\"token operator\">=</span>target<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 创建 GraphExecutorFactoryModule  </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#######################################     模型保存      ########################################</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># save</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># 保存编译后的库文件（.so）</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>lib_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.so\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>lib<span class=\"token punctuation\">.</span>get_lib<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>export_library<span class=\"token punctuation\">(</span>lib_fname<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># 保存模型参数（.params）</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>params_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.params\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>params_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> param_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    param_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>relay<span class=\"token punctuation\">.</span>save_param_dict<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_params<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># 保存 JSON 格式的计算图（.json）</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>json_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.json\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>json_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> json_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    json_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_executor_config<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>dev <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>module <span class=\"token operator\">=</span> graph_executor<span class=\"token punctuation\">.</span>GraphModule<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">[</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># graph_executor.GraphModule</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">############################       运行    ##########################################</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>module<span class=\"token punctuation\">.</span>set_input<span class=\"token punctuation\">(</span>input_name<span class=\"token punctuation\">,</span> img_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>module<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>output_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>tvm_output <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>get_output<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tvm_output<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>再回顾一下 BuildRelay 函数，文章 <a href=\"https://forcheetah.github.io/2024/10/21/tvm04/\">《【TVM】通过代码学习编译流程【4】BuildRelay》</a> 已经介绍了 <code>BuildRelay</code>  总体流程和其子函数 <code>OptimizeImpl</code> 。下面将介绍其中的： <code>MakeExecutorCodegen</code> ，  <code>Init</code> ， <code>Codegen</code> 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">BuildRelay</span><span class=\"token punctuation\">(</span>IRModule relay_module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> String<span class=\"token operator\">&amp;</span> mod_name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// Relay IRModule -> IRModule optimizations.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IRModule <span class=\"token keyword\">module</span> <span class=\"token operator\">=</span> <span class=\"token function\">WithAttrs</span><span class=\"token punctuation\">(</span>  <span class=\"token comment\">// 为 Relay IRModule 添加 Executor 和 Runtime 属性</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        relay_module<span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    relay_module <span class=\"token operator\">=</span> <span class=\"token function\">OptimizeImpl</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 执行多个针对 Relay IRModule 的优化 Pass</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// Get the updated function and new IRModule to build.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Function func <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">Downcast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>relay_module<span class=\"token operator\">-></span><span class=\"token function\">Lookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 获取 Relay IRModule 中的 main 函数表达式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    IRModule func_module <span class=\"token operator\">=</span> <span class=\"token function\">WithAttrs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IRModule</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FromExpr</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 为 main 函数表达式添加属性信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                                     <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// Generate code for the updated function.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    executor_codegen_ <span class=\"token operator\">=</span> <span class=\"token function\">MakeExecutorCodegen</span><span class=\"token punctuation\">(</span>executor_<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 构建代码生成 GraphCodegen</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> config_<span class=\"token operator\">-></span>primitive_targets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Codegen 初始化</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">Codegen</span><span class=\"token punctuation\">(</span>func_module<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> mod_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 将 Relay IRModule 降级为 TIR Module    </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">UpdateOutput</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ret_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 更新降级后的 json 图结构到 BuildOutput 结构体</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    ret_<span class=\"token punctuation\">.</span>params <span class=\"token operator\">=</span> executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 更新降级后的 params 到 BuildOutput 结构体</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">auto</span> lowered_funcs <span class=\"token operator\">=</span> executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetIRModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取降级后的 TIR Module</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// No need to build for external functions.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    Target <span class=\"token function\">ext_dev</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ext_dev\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lowered_funcs<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>ext_dev<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> lowered_funcs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      lowered_funcs<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>ext_dev<span class=\"token punctuation\">,</span> <span class=\"token function\">IRModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">const</span> Target<span class=\"token operator\">&amp;</span> host_target <span class=\"token operator\">=</span> config_<span class=\"token operator\">-></span>host_virtual_device<span class=\"token operator\">-></span>target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">const</span> runtime<span class=\"token double-colon punctuation\">::</span>PackedFunc<span class=\"token operator\">*</span> pf <span class=\"token operator\">=</span> runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Registry</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"codegen.LLVMModuleCreate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// When there is no lowered_funcs due to reasons such as optimization.</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lowered_funcs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>host_target<span class=\"token operator\">-></span>kind<span class=\"token operator\">-></span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">CHECK</span><span class=\"token punctuation\">(</span>pf <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Unable to create empty module for llvm without llvm codegen.\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// If we can decide the target is LLVM, we then create an empty LLVM module.</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        ret_<span class=\"token punctuation\">.</span>mod <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>host_target<span class=\"token operator\">-></span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"empty_module\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// If we cannot decide the target is LLVM, we create an empty CSourceModule.</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// The code content is initialized with \";\" to prevent complaining</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// from CSourceModuleNode::SaveToFile.</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        ret_<span class=\"token punctuation\">.</span>mod <span class=\"token operator\">=</span> tvm<span class=\"token double-colon punctuation\">::</span>codegen<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CSourceModuleCreate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\";\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      ret_<span class=\"token punctuation\">.</span>mod <span class=\"token operator\">=</span> tvm<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">TIRToRuntime</span><span class=\"token punctuation\">(</span>lowered_funcs<span class=\"token punctuation\">,</span> host_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// TIR Module 转换为 runtime::Module</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">auto</span> ext_mods <span class=\"token operator\">=</span> executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetExternalModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    ret_<span class=\"token punctuation\">.</span>mod <span class=\"token operator\">=</span> tvm<span class=\"token double-colon punctuation\">::</span>codegen<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CreateMetadataModule</span><span class=\"token punctuation\">(</span>ret_<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">,</span> ret_<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">,</span> ext_mods<span class=\"token punctuation\">,</span> host_target<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                                                  runtime_<span class=\"token punctuation\">,</span> executor_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                                                  executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetExecutorCodegenMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// Remove external params which were stored in metadata module.</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span>Module mod <span class=\"token operator\">:</span> ext_mods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token keyword\">auto</span> pf_var <span class=\"token operator\">=</span> mod<span class=\"token punctuation\">.</span><span class=\"token function\">GetFunction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get_const_vars\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pf_var <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> variables <span class=\"token operator\">=</span> <span class=\"token function\">pf_var</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> variables<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>          <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> ret_<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>variables<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">operator</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> ret_<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"constant '\"</span> <span class=\"token operator\">&lt;&lt;</span> variables<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"' has been captured in external module\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            ret_<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"makeexecutorcodegen\"><a class=\"anchor\" href=\"#makeexecutorcodegen\">#</a> MakeExecutorCodegen</h1>\n<p>BuildRelay 函数的总体过程如下图:</p>\n<p><img loading=\"lazy\" data-src=\"1729865100807.jpg\" alt=\"buildRelay流程图\"></p>\n<p>函数 <code>MakeExecutorCodegen()</code>  用于创建 <code>GraphCodegen</code>  对象 <code>executor_codegen_</code> 。 <code>GraphCodegen</code>  继承于 <code>ExecutorCodegen</code> .</p>\n<p><code>ExecutorCodegen</code>  有个成员  <code>tvm::runtime::Module mod;</code> ，因此  <code>GraphCodegen</code>  也包含这个成员 <code>mod</code> 。</p>\n<p>如下代码所示，  <code>GraphCodegen</code>  在初始化的时候，将成员 <code>mod</code>  赋值为 <code>GetPackedFunc(&quot;relay.build_module._GraphExecutorCodegen&quot;)</code>  获得的构建函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * \\brief GraphCodegen module wrapper</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">GraphCodegen</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token class-name\">ExecutorCodegen</span></span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 继承于 `ExecutorCodegen`</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">GraphCodegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">auto</span> pf <span class=\"token operator\">=</span> <span class=\"token function\">GetPackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"relay.build_module._GraphExecutorCodegen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 通过名字获取 mod 的构建函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    mod <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将 mod 赋值为 GraphExecutorCodegenModule 对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">UpdateOutput</span><span class=\"token punctuation\">(</span>BuildOutput<span class=\"token operator\">*</span> ret<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">&#123;</span> ret<span class=\"token operator\">-></span>graph_json <span class=\"token operator\">=</span> <span class=\"token function\">GetGraphJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">GetGraphJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">CallFunc</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get_graph_json\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token operator\">~</span><span class=\"token function\">GraphCodegen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>GetPackedFunc(&quot;relay.build_module._GraphExecutorCodegen&quot;)</code>  函数通过名字获取 <code>TVM_REGISTER_GLOBAL</code>  注册的全局函数 <code>CreateGraphCodegenMod()</code> 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">TVM_REGISTER_GLOBAL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"relay.build_module._GraphExecutorCodegen\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">set_body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token function\">CreateGraphCodegenMod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>CreateGraphCodegenMod()</code>  函数创建对象 <code>GraphExecutorCodegenModule</code>  并返回。因此  <code>GraphCodegen</code>  对象的成员 <code>mod</code>  赋值为对象 <code>GraphExecutorCodegenModule</code> 。</p>\n<p>而后续  <code>GraphCodegen</code>  的很多功能都会调用 <code>mod</code>  的功能，也就是 <code>GraphExecutorCodegenModule</code>  对象的功能。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>runtime<span class=\"token double-colon punctuation\">::</span>Module <span class=\"token function\">CreateGraphCodegenMod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">auto</span> ptr <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_object</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>GraphExecutorCodegenModule<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 创建对象 `GraphExecutorCodegenModule`</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Module</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 封装成 ptr</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"init\"><a class=\"anchor\" href=\"#init\">#</a> Init</h1>\n<p><img loading=\"lazy\" data-src=\"1729865100807.jpg\" alt=\"buildRelay流程图\"></p>\n<p><code>Init()</code>  函数完成 CodeGen 的初始化。 <code>GraphCodegen</code>  对象 <code>executor_codegen_</code> 的 <code>Init()</code>  函数，首先调用父类 <code>ExecutorCodegen</code>  的 <code>Init()</code>  函数，该函数又调用成员 <code>mod</code>  的初始化函数，即 <code>GraphExecutorCodegenModule</code>  的初始化函数，如下所示：</p>\n<p>该函数将 <code>GraphExecutorCodegenModule</code>  的成员 <code>std::shared_ptr&lt;GraphExecutorCodegen&gt; codegen_;</code>  赋值为 <code>GraphExecutorCodegen</code>  对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">virtual</span> PackedFunc <span class=\"token function\">GetFunction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ObjectPtr<span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> sptr_to_self<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"init\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">ICHECK_EQ</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>num_args<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The expected of arguments are: \"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                    <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"runtime::Module mod and Array&lt;Target> targets\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> mod <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        Array<span class=\"token operator\">&lt;</span>Target<span class=\"token operator\">></span> targets <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        codegen_ <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>GraphExecutorCodegen<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>runtime<span class=\"token double-colon punctuation\">::</span>Module<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                                                          std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>targets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"codegen\"><a class=\"anchor\" href=\"#codegen\">#</a> CodeGen</h1>\n<p><img loading=\"lazy\" data-src=\"1729865100807.jpg\" alt=\"buildRelay流程图\"></p>\n<p><code>Codegen(func_module, func, mod_name)</code> —— 将 Relay IRModule 降级为 TIR Module。</p>\n<p>这是一个很复杂的过程，本篇只讲解部分。</p>\n<p><code>Codegen()</code>  函数调用的也是成员 <code>mod</code> ，也就是 <code>GraphExecutorCodegenModule</code>  的 <code>Codegen()</code>  函数，这里不在赘述。下面是 <code>GraphExecutorCodegenModule</code>  的 <code>Codegen()</code>  函数。</p>\n<p>显然， <code>codegen</code>  又调用了 <code>GraphExecutorCodegenModule</code>  成员 <code>codegen_</code> 的 <code>Codegen</code>  函数，即 <code>GraphExecutorCodegen</code>  类的 <code>Codegen</code>  函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"codegen\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        IRModule mod <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        Function func <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        String mod_name <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>output_ <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>codegen_<span class=\"token operator\">-></span><span class=\"token function\">Codegen</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> mod_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用了成员 codegen_的 Codegen 函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>GraphExecutorCodegen</code>  类的 <code>Codegen</code>  函数如下所示：</p>\n<p>该函数实现 Relay IRModule 降级为 TIR Module，并返回包含所有信息的结构体 <code>LoweredOutput</code> 。</p>\n<p>其中关键函数 <code>tec::LowerTE()</code>  完成降级过程。下文代码中做了简单的注释。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LoweredOutput <span class=\"token function\">Codegen</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> relay<span class=\"token double-colon punctuation\">::</span>Function func<span class=\"token punctuation\">,</span> String mod_name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    mod_name_ <span class=\"token operator\">=</span> mod_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    VLOG_CONTEXT <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"GraphExecutorCodegen\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"compiling:\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">PrettyPrint</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// TODO(mbs): Why plan memory and update workspace sizes before lowering?</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    memory_plan_ <span class=\"token operator\">=</span> <span class=\"token function\">GraphPlanMemory</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 为模型生成内存分配策略，复用内存，但似乎不需要在模型降级之前进行这一步</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    backend<span class=\"token double-colon punctuation\">::</span>FunctionInfo func_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memory_plan_<span class=\"token punctuation\">.</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">// TODO(@electriclilies, @jroesch): remove UpdateMainWorkspaceSize</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      func_info <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          relay<span class=\"token double-colon punctuation\">::</span>tec<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">UpdateMainWorkspaceSize</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> config_<span class=\"token punctuation\">,</span> memory_plan_<span class=\"token operator\">-></span>expr_to_storage_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      mod <span class=\"token operator\">=</span> <span class=\"token function\">WithAttr</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"main_func_info\"</span><span class=\"token punctuation\">,</span> func_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    IRModule lowered_mod <span class=\"token operator\">=</span> tec<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">LowerTE</span><span class=\"token punctuation\">(</span>mod_name_<span class=\"token punctuation\">,</span> config_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>BaseFunc func<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">// We need to maintain the constant map for external</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">// functions so we pass this processing function which</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token comment\">// allows us to process each function as we lower it.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>func<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">GetAttr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>attr<span class=\"token double-colon punctuation\">::</span>kCompiler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">UpdateConstants</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>params_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      tec<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">UpdateFunctionMetadata</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>function_metadata_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 模型降级 relay IRmodule 转为 TIR Module</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    Optional<span class=\"token operator\">&lt;</span>backend<span class=\"token double-colon punctuation\">::</span>FunctionInfo<span class=\"token operator\">></span> main_func_info <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        lowered_mod<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">GetAttr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>backend<span class=\"token double-colon punctuation\">::</span>FunctionInfo<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main_func_info\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    function_metadata_<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>runtime<span class=\"token double-colon punctuation\">::</span>symbol<span class=\"token double-colon punctuation\">::</span>tvm_module_main<span class=\"token punctuation\">,</span> main_func_info<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    Function lowered_main_func <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">Downcast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>lowered_mod<span class=\"token operator\">-></span><span class=\"token function\">Lookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// Now that we have lowered all operators to TIR code, we can proceed with compilation.</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// We need to unfortunately re-plan as the previous results have been invalidated by lowering</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// we will fix this in future refactors.</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    memory_plan_ <span class=\"token operator\">=</span> <span class=\"token function\">GraphPlanMemory</span><span class=\"token punctuation\">(</span>lowered_main_func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 再次生成内存分配策略  未来可能不会重复进行内存分配</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// The graph planner also can not handle planning calls to global variables to we must remap</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// First we convert all the parameters into input nodes.</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> param <span class=\"token operator\">:</span> lowered_main_func<span class=\"token operator\">-></span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token keyword\">auto</span> node_ptr <span class=\"token operator\">=</span> <span class=\"token class-name\">GraphInputNode</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_node_ptr</span><span class=\"token punctuation\">(</span>param<span class=\"token operator\">-></span><span class=\"token function\">name_hint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GraphAttrs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      var_map_<span class=\"token punctuation\">[</span>param<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">AddNode</span><span class=\"token punctuation\">(</span>node_ptr<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    heads_ <span class=\"token operator\">=</span> <span class=\"token function\">VisitExpr</span><span class=\"token punctuation\">(</span>lowered_main_func<span class=\"token operator\">-></span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>ostringstream os<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    dmlc<span class=\"token double-colon punctuation\">::</span>JSONWriter <span class=\"token function\">writer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>os<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token function\">GetJSON</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>writer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 将图结构写为 json</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    LoweredOutput ret<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// LoweredOutput 用于收集降级后的所有信息</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    ret<span class=\"token punctuation\">.</span>graph_json <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//json 图结构赋值给 ret</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// Collect any runtime modules generated by external codegen.</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    ret<span class=\"token punctuation\">.</span>external_mods <span class=\"token operator\">=</span>  <span class=\"token comment\">// 外部编译器模型赋值给 ret</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        lowered_mod<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">GetAttr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Array<span class=\"token operator\">&lt;</span>runtime<span class=\"token double-colon punctuation\">::</span>Module<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span>tvm<span class=\"token double-colon punctuation\">::</span>attr<span class=\"token double-colon punctuation\">::</span>kExternalMods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value_or</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// Collect any constants extracted by external codegen.</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    ret<span class=\"token punctuation\">.</span>params <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">unordered_map</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span>NDArray<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> runtime<span class=\"token double-colon punctuation\">::</span>NDArray<span class=\"token operator\">></span> const_name_to_constant <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        lowered_mod<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">GetAttr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> runtime<span class=\"token double-colon punctuation\">::</span>NDArray<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span>tvm<span class=\"token double-colon punctuation\">::</span>attr<span class=\"token double-colon punctuation\">::</span>kConstNameToConstant<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">value_or</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> kv <span class=\"token operator\">:</span> const_name_to_constant<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"constant '\"</span> <span class=\"token operator\">&lt;&lt;</span> kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"' contributed by external codegen\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token function\">ICHECK</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> kv<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\">// Collect any constants extracted during lowering.</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> kv <span class=\"token operator\">:</span> params_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"constant '\"</span> <span class=\"token operator\">&lt;&lt;</span> kv<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"' contributed by TECompiler\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>      <span class=\"token function\">ICHECK</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> kv<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    ret<span class=\"token punctuation\">.</span>function_metadata <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>function_metadata_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 函数元数据赋值给 ret</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">// This is the point where we separate the functions in the module by target</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    ret<span class=\"token punctuation\">.</span>lowered_funcs <span class=\"token operator\">=</span> tec<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetPerTargetModules</span><span class=\"token punctuation\">(</span>lowered_mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    ret<span class=\"token punctuation\">.</span>metadata <span class=\"token operator\">=</span>  <span class=\"token comment\">// 模型元数据赋值给 ret</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token function\">ExecutorCodegenMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">/* inputs */</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">/* input_tensor_types */</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">/* outputs */</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                                <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">/* output_tensor_types */</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">/* pools */</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">/* devices */</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                                runtime<span class=\"token double-colon punctuation\">::</span>kTvmExecutorGraph <span class=\"token comment\">/* executor */</span><span class=\"token punctuation\">,</span> mod_name_ <span class=\"token comment\">/* mod_name */</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                                <span class=\"token string\">\"packed\"</span> <span class=\"token comment\">/* interface_api */</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Bool</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* unpacked_api */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回包含所有信息的结构体 `LoweredOutput`</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>再看一下 <code>tec::LowerTE()</code>  函数。其第三个参数 <code>[this](BaseFunc func) &#123;...&#125;</code>  是一个 lambda 表达式，功能和 “外部函数” 相关，外部函数指的是 “标明使用外部编译器编译的 function”，如 “dnnl，ccompilmer” 等，现在暂不关注。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>IRModule lowered_mod <span class=\"token operator\">=</span> tec<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">LowerTE</span><span class=\"token punctuation\">(</span>mod_name_<span class=\"token punctuation\">,</span> config_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>BaseFunc func<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token comment\">// We need to maintain the constant map for external</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">// functions so we pass this processing function which</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// allows us to process each function as we lower it.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>func<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">GetAttr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>attr<span class=\"token double-colon punctuation\">::</span>kCompiler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">UpdateConstants</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>params_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      tec<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">UpdateFunctionMetadata</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>function_metadata_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 模型降级 relay IRmodule 转为 TIR Module</span></pre></td></tr></table></figure><p><code>tec::LowerTE()</code>  函数返回的是一个 Sequential 类，其包含多个按照顺序执行的 Pass。如果对 Pass 还不了解或者遗忘了，可以再回顾一下<a href=\"https://forcheetah.github.io/2024/10/22/tvm3.5/\">《【TVM】通过代码学习类【3.5】Pass》</a>。</p>\n<p>返回的 Sequential 类不仅包含 <code>RelayToTIRTargetHook</code>  和  <code>ExtractPrimFuncConstants</code> ， <code>InferType()</code>  三个函数获得的 Pass，还包含 <code>CreateModulePass(pass_func, 0, &quot;LowerTE&quot;, &#123;&quot;InferType&quot;&#125;)</code>  封装成的 Pass。</p>\n<p><code>CreateModulePass(pass_func, 0, &quot;LowerTE&quot;, &#123;&quot;InferType&quot;&#125;)</code>  将 <code>pass_func</code>  封装成 Pass。 <code>pass_func</code>  是 lambda 表达式，其调用了含有四个参数的函数 <code>LowerTE(module, module_name, process_fn, complilation_config);</code> ，完成了降级的主要内容。注意该 <code>LowerTE()</code>  含有四个参数，非前述提到的含有三个参数的 <code>tec::LowerTE()</code> 。</p>\n<p><code>tec::LowerTE()</code>  函数返回 Sequential 类之后立即执行，完成对 Relay Module 的降级。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Pass <span class=\"token function\">LowerTE</span><span class=\"token punctuation\">(</span>String module_name<span class=\"token punctuation\">,</span> CompilationConfig complilation_config<span class=\"token punctuation\">,</span> ProcessFn process_fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  runtime<span class=\"token double-colon punctuation\">::</span>TypedPackedFunc<span class=\"token operator\">&lt;</span><span class=\"token function\">IRModule</span><span class=\"token punctuation\">(</span>IRModule<span class=\"token punctuation\">,</span> PassContext<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> pass_func <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>IRModule <span class=\"token keyword\">module</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//lambda 表达式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                                                            PassContext ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">LowerTE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">,</span> module_name<span class=\"token punctuation\">,</span> process_fn<span class=\"token punctuation\">,</span> complilation_config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> tvm<span class=\"token double-colon punctuation\">::</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Sequential</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span>tvm<span class=\"token double-colon punctuation\">::</span>relay<span class=\"token double-colon punctuation\">::</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">RelayToTIRTargetHook</span><span class=\"token punctuation\">(</span>complilation_config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       tvm<span class=\"token double-colon punctuation\">::</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CreateModulePass</span><span class=\"token punctuation\">(</span>pass_func<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"LowerTE\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"InferType\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">InferType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       tvm<span class=\"token double-colon punctuation\">::</span>tir<span class=\"token double-colon punctuation\">::</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ExtractPrimFuncConstants</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>后续文章将按照顺序介绍 <code>RelayToTIRTargetHook</code>  ， <code>LowerTE()</code> ， <code>InferType()</code> ，  <code>ExtractPrimFuncConstants</code> 。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复。</p>\n",
            "tags": [
                "tvm",
                "compile"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/10/22/tvm3.5/",
            "url": "https://forcheetah.github.io/2024/10/22/tvm3.5/",
            "title": "【TVM】通过代码学习类【3.5】Pass",
            "date_published": "2024-10-22T11:48:24.954Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>文章 <a href=\"https://forcheetah.github.io/\">《【TVM】通过代码学习编译流程》</a>系列 主要介绍 TVM 在模型编译过程的流程，有时候感觉缺少了对类及其属性和方法的介绍。所以决定在系列文章的中间插入一些 “类的结构及其属性方法” 的介绍。</p>\n<p>本篇文章主要介绍 Pass 及其相关类。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"pass\"><a class=\"anchor\" href=\"#pass\">#</a> Pass</h1>\n<p>可以再回顾一下在《【TVM】通过代码学习编译流程【4】》中讲到的本体、桥梁、指针的关系。</p>\n<p>先看一看 Pass 的基类， 位于  <code>include/tvm/ir/transform.h</code> 。  Pass 本体  <code>PassNode</code> 。内容很少，主要就是 Pass 的执行函数： <code>IRModule operator()(IRModule mod)</code>  函数重载了 “()” 运算符。里面调用自身含有两个参数的 &quot;()&quot; 重载函数。</p>\n<p>含有两个参数的 &quot;()&quot; 重载函数 <code>virtual IRModule operator()(IRModule mod, const PassContext&amp; pass_ctx) const = 0;</code>  是个虚函数，这意味着 <code>PassNode</code>  的派生类需要重写该函数，实现 Pass 的实际功能。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PassNode</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">PassNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">/*!</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   * \\brief Get the pass information/meta data. */</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">virtual</span> PassInfo <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  IRModule <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 重载了 “()” 运算符</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PassContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用含有两个参数的 \"()\" 重载函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">virtual</span> IRModule <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PassContext<span class=\"token operator\">&amp;</span> pass_ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 虚函数 由派生类重写</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">VisitAttrs</span><span class=\"token punctuation\">(</span>AttrVisitor<span class=\"token operator\">*</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> _type_key <span class=\"token operator\">=</span> <span class=\"token string\">\"transform.Pass\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">TVM_DECLARE_BASE_OBJECT_INFO</span><span class=\"token punctuation\">(</span>PassNode<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Pass 指针  <code>Pass</code> ，指向 <code>PassNode</code>  本体。相当于给本体套了个壳子。<br>\n壳子中的 <code>IRModule operator()(IRModule mod) const;</code>  函数同样是调用自身含有两个参数的 &quot;()&quot; 重载函数。<br>\n含有两个参数的 &quot;()&quot; 重载函数 <code>IRModule Pass::operator()(IRModule mod, const PassContext&amp; pass_ctx)</code>  调用的是本体 <code>PassNode</code>  的功能。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pass</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ObjectRef</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  IRModule <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  IRModule <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PassContext<span class=\"token operator\">&amp;</span> pass_ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">TVM_DEFINE_OBJECT_REF_METHODS</span><span class=\"token punctuation\">(</span>Pass<span class=\"token punctuation\">,</span> ObjectRef<span class=\"token punctuation\">,</span> PassNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  IRModule <span class=\"token keyword\">static</span> <span class=\"token function\">AssertImmutableModule</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> IRModule<span class=\"token operator\">&amp;</span> mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PassNode<span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                                        <span class=\"token keyword\">const</span> PassContext<span class=\"token operator\">&amp;</span> pass_ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>IRModule <span class=\"token class-name\">Pass</span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 调用自身含有两个参数的 \"()\" 重载函数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PassContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>IRModule <span class=\"token class-name\">Pass</span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PassContext<span class=\"token operator\">&amp;</span> pass_ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 调用的是本体 `PassNode` 的功能</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">const</span> PassNode<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function\">ICHECK</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">const</span> PassInfo<span class=\"token operator\">&amp;</span> pass_info <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span><span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pass_ctx<span class=\"token punctuation\">.</span><span class=\"token function\">InstrumentBeforePass</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> pass_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">DLOG</span><span class=\"token punctuation\">(</span>INFO<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Skipping pass : \"</span> <span class=\"token operator\">&lt;&lt;</span> pass_info<span class=\"token operator\">-></span>name</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>               <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" with opt level: \"</span> <span class=\"token operator\">&lt;&lt;</span> pass_info<span class=\"token operator\">-></span>opt_level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> mod<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  IRModule ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pass_ctx<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">GetConfig</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Bool<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testing.immutable_module\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Bool</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token class-name\">Pass</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">AssertImmutableModule</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> pass_ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    ret <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pass_ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  pass_ctx<span class=\"token punctuation\">.</span><span class=\"token function\">InstrumentAfterPass</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> pass_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>所以总结来说，Pass 修改模型的功能由 Pass 的派生类重载的 <code>Pass::operator()(IRModule mod, const PassContext&amp; pass_ctx)</code>  函数实现。那么它有哪些派生类呢？后文提供了三个派生类，分别是  <code>FunctionPass</code> ， <code>Sequential</code> ， <code>ModulePass</code> 。他们有不同的功能作用。</p>\n<h1 id=\"functionpass\"><a class=\"anchor\" href=\"#functionpass\">#</a> FunctionPass</h1>\n<p>FunctionPassNode :: PassNode</p>\n<p>Function-level Pass 的实现类，该类是 Pass 的派生类。接收 Module 中函数表达式列表中的一个 function 进行优化。<br>\n <code>pass_func</code>  具体实现 function 优化的函数：由外部提供，以 function 为输入，如 <code>Pass DefuseOps()</code> ， <code>FoldConstant()</code>  等函数提供他们各自的 <code>pass_func</code> ，以实现不同的功能。</p>\n<p><code>Pass::operator()(IRModule mod, const PassContext&amp; pass_ctx)</code>  函数， <code>FunctionPass</code>  对该函数的实现也在下方。</p>\n<ul>\n<li>先遍历模型中的 function</li>\n<li><code>AsOptimizableFunctionNode()</code>  函数 ：过滤掉不能被优化的 function，如 kCompiler (指定编译器的)，kExtern (外部编译器的)，kSkipOptimization (指明跳过的)</li>\n<li>调用 pass_func 优化 function</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FunctionPassNode</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">PassNode</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  PassInfo pass_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  runtime<span class=\"token double-colon punctuation\">::</span>TypedPackedFunc<span class=\"token operator\">&lt;</span><span class=\"token function\">Function</span><span class=\"token punctuation\">(</span>Function<span class=\"token punctuation\">,</span> IRModule<span class=\"token punctuation\">,</span> PassContext<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> pass_func<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 具体实现 function 优化的函数：由外部提供，以 function 为输入</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">FunctionPassNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">VisitAttrs</span><span class=\"token punctuation\">(</span>tvm<span class=\"token double-colon punctuation\">::</span>AttrVisitor<span class=\"token operator\">*</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> v<span class=\"token operator\">-></span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pass_info\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pass_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  IRModule <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PassContext<span class=\"token operator\">&amp;</span> pass_ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 不再被派生类重写  具体实现在下方</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  PassInfo <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> pass_info<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> _type_key <span class=\"token operator\">=</span> <span class=\"token string\">\"relay.FunctionPass\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">TVM_DECLARE_FINAL_OBJECT_INFO</span><span class=\"token punctuation\">(</span>FunctionPassNode<span class=\"token punctuation\">,</span> PassNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Perform Module -> Module optimizations at the Function level.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>IRModule <span class=\"token class-name\">FunctionPassNode</span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PassContext<span class=\"token operator\">&amp;</span> pass_ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 具体实现</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  DiagnosticContext previous <span class=\"token operator\">=</span> <span class=\"token class-name\">DiagnosticContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  IRModule updated_mod <span class=\"token operator\">=</span> mod<span class=\"token operator\">-></span><span class=\"token function\">ShallowCopy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>GlobalVar<span class=\"token punctuation\">,</span> Function<span class=\"token operator\">>></span> updates<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> kv <span class=\"token operator\">:</span> mod<span class=\"token operator\">-></span>functions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//  遍历模型中的 function</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// only process optimizable Relay Functions</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">*</span> function_node <span class=\"token operator\">=</span> <span class=\"token function\">AsOptimizableFunctionNode</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 过滤掉不能被优化的 function，如 kCompiler (指定编译器的)，kExtern (外部编译器的)，kSkipOptimization (指明跳过的)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      Function updated_func <span class=\"token operator\">=</span> <span class=\"token function\">pass_func</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">GetRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>function_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> updated_mod<span class=\"token punctuation\">,</span> pass_ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用 pass_func 优化 function</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      updates<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>updated_func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">InferType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>updated_mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"modulepass\"><a class=\"anchor\" href=\"#modulepass\">#</a> ModulePass</h1>\n<p>ModulePassNode :: PassNode</p>\n<p>Module-level Pass 的实现类， <code>FunctionPass</code>  优化的是 Relay Module 包含的多个 <code>function</code> ，作用于 <code>function</code>  内部，不能实现 <code>function</code>  增删； <code>ModulePassNode</code>  优化的是整个 Module，能够实现 <code>function</code>  增删等 Module 范围的优化。<br>\n <code>pass_func</code>  具体实现 Module 优化的函数：由外部提供，以 Module 为输入<br>\n <code>Pass::operator()(IRModule mod, const PassContext&amp; pass_ctx)</code>  函数，实现在下方。</p>\n<ul>\n<li>调用 pass_func 优化 Module</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * \\brief Module-level passes are designed to implement global</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * analysis/optimizations, i.e. interprocedural optimizations (IPO), etc. Passes</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * at this level have the full control of a given Relay program including</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * addition and deletion of functions.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ModulePassNode</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">PassNode</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">/* \\brief The pass meta data.*/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  PassInfo pass_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  runtime<span class=\"token double-colon punctuation\">::</span>TypedPackedFunc<span class=\"token operator\">&lt;</span><span class=\"token function\">IRModule</span><span class=\"token punctuation\">(</span>IRModule<span class=\"token punctuation\">,</span> PassContext<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> pass_func<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 具体实现 Module 优化的函数：由外部提供，以 Module 为输入</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">ModulePassNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">VisitAttrs</span><span class=\"token punctuation\">(</span>tvm<span class=\"token double-colon punctuation\">::</span>AttrVisitor<span class=\"token operator\">*</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> v<span class=\"token operator\">-></span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pass_info\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pass_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  IRModule <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PassContext<span class=\"token operator\">&amp;</span> pass_ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 不再允许派生类修改</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">/*!</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   * \\brief Get the pass information/meta data.</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   */</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  PassInfo <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> pass_info<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> _type_key <span class=\"token operator\">=</span> <span class=\"token string\">\"transform.ModulePass\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token function\">TVM_DECLARE_FINAL_OBJECT_INFO</span><span class=\"token punctuation\">(</span>ModulePassNode<span class=\"token punctuation\">,</span> PassNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Module -> Module optimizations.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>IRModule <span class=\"token class-name\">ModulePassNode</span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PassContext<span class=\"token operator\">&amp;</span> pass_ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  DiagnosticContext previous <span class=\"token operator\">=</span> <span class=\"token class-name\">DiagnosticContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> PassInfo<span class=\"token operator\">&amp;</span> pass_info <span class=\"token operator\">=</span> <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  mod <span class=\"token operator\">=</span> <span class=\"token function\">pass_func</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pass_ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用 pass_func 优化 Module</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  pass_ctx<span class=\"token operator\">-></span>diag_ctx<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  pass_ctx<span class=\"token operator\">-></span>diag_ctx <span class=\"token operator\">=</span> previous<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> mod<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"sequential\"><a class=\"anchor\" href=\"#sequential\">#</a> Sequential</h1>\n<p>Sequential ：Sequential 类包含多个按照顺序执行的 Pass，类似于 pytorch 里面的 nn.Sequential</p>\n<ul>\n<li><code>tvm::Array&lt;Pass&gt; passes</code>  ：数组，包含多个 Pass，如前面提到的  <code>FunctionPass</code> ，  <code>ModulePass</code></li>\n<li><code>Pass::operator()(IRModule mod, const PassContext&amp; pass_ctx)</code>  函数，实现在下方。\n<ul>\n<li>遍历所有包含的 pass</li>\n<li>调用 Pass 执行对模型的优化</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * \\brief The SequentialNode contains a set of passes that transform Relay/Relax</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * programs from one AST to another semantically equivalent one.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * One example of this level of pass is that the pass manager needs to correctly</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * perform a host of optimizations with a given optimization level and disabled</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * passes.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SequentialNode</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">PassNode</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">/* \\brief The pass meta data.*/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  PassInfo pass_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">/*! \\brief A list of passes that used to compose a sequential pass. */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  tvm<span class=\"token double-colon punctuation\">::</span>Array<span class=\"token operator\">&lt;</span>Pass<span class=\"token operator\">></span> passes<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 数组，包含多个 Pass，如前面提到的 `FunctionPass`， `ModulePass`</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  PassInfo <span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> pass_info<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">ResolveDependency</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> IRModule<span class=\"token operator\">&amp;</span> mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  IRModule <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PassContext<span class=\"token operator\">&amp;</span> pass_ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> _type_key <span class=\"token operator\">=</span> <span class=\"token string\">\"transform.Sequential\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token function\">TVM_DECLARE_FINAL_OBJECT_INFO</span><span class=\"token punctuation\">(</span>SequentialNode<span class=\"token punctuation\">,</span> PassNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>IRModule <span class=\"token class-name\">SequentialNode</span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PassContext<span class=\"token operator\">&amp;</span> pass_ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Pass<span class=\"token operator\">&amp;</span> pass <span class=\"token operator\">:</span> passes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 遍历所有包含的 pass</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// resolve dependencies</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> it <span class=\"token operator\">:</span> pass_info<span class=\"token operator\">-></span>required<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      mod <span class=\"token operator\">=</span> <span class=\"token function\">GetPass</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pass_ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pass_ctx<span class=\"token operator\">-></span>trace_stack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>pass_info<span class=\"token operator\">-></span>traceable <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pass_ctx<span class=\"token operator\">-></span>make_traceable<span class=\"token punctuation\">.</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         pass_ctx<span class=\"token operator\">-></span>make_traceable<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>pass_info<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token comment\">// In the future, we should pass the ffi key for a pass by deducing from its name.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      String transform_func_key <span class=\"token operator\">=</span> <span class=\"token string\">\"relax.tuning_api.Choice.default_transform_func\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      String constr_func_key <span class=\"token operator\">=</span> <span class=\"token string\">\"relax.tuning_api.Choice.default_constr_func\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      relax<span class=\"token double-colon punctuation\">::</span>Knob knob <span class=\"token operator\">=</span> relax<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Knob</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          pass_info<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token comment\">// Add new decision to the trace at the top of the stack.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">auto</span> trace <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">Downcast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>relax<span class=\"token double-colon punctuation\">::</span>Trace<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>pass_ctx<span class=\"token operator\">-></span>trace_stack<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      trace<span class=\"token operator\">-></span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>knob<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Applied\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      mod <span class=\"token operator\">=</span> <span class=\"token function\">pass</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pass_ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用 Pass 执行对模型的优化</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      trace<span class=\"token operator\">-></span><span class=\"token function\">SetOutMod</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      mod <span class=\"token operator\">=</span> <span class=\"token function\">pass</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pass_ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用 Pass 执行对模型的优化</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">return</span> mod<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复。</p>\n",
            "tags": [
                "tvm",
                "compile"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/10/21/tvm04/",
            "url": "https://forcheetah.github.io/2024/10/21/tvm04/",
            "title": "【TVM】通过代码学习编译流程【4】BuildRelay",
            "date_published": "2024-10-21T14:03:00.249Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本系列文章将从代码和流程图入手，详细介绍 TVM AI 编译器的编译流程。本文章为第四篇，对应的 TVM 版本为当前最新版本 1.7。</p>\n<p>网络上有不少 TVM 工程的教程资源，如果本博客也是其他教程的简单重复的话，则网络的角落里又多了一份纯粹的空间占用者。所以我在想，本文章有什么特点才值得一看呢？我觉得有两个优点: 1、本文从代码出发，不会泛泛而谈，能够从细节了解 TVM；2、自认为结构流程图画的不错，能够从整体上把握 TVM 的脉络。所以，也许值得一看呢。</p>\n<p>本篇文章介绍 TVM BuildRelay 函数。文章 <a href=\"https://forcheetah.github.io/2024/10/17/tvm03/\">《【TVM】通过代码学习编译流程【3】模型编译》</a> 已经介绍了 Relay IRModule 转换为 <code>GraphExecutorFactory</code>  的过程。其中中间有个 <code>bld_mod.build()</code>  函数调用 C++ 类 <code>RelayBuildModule</code>  的函数 <code>build</code> 。  <code>build</code>  流程包含了将 Relay IRModule 降级为低级中间表示 TIR，然后再转换为 Runtime::Module 的过程。本篇文章将介绍 <code>BuildRelay</code>  和其子函数 <code>OptimizeImpl</code> 。</p>\n<p>因为代码量巨大，模型编译会分成若干篇文章进行解析。接下来的若干篇都会介绍 BuildRelay 函数 及其调用的子函数。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"python脚本\"><a class=\"anchor\" href=\"#python脚本\">#</a> Python 脚本</h1>\n<p>这里提供一个简单的 Python 脚本，调用 TVM Python 前端，实现 onnx 模型的编译过程。tvm 通过代码学习编程流程系列文章将基本采用这个脚本帮助追踪代码。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> onnx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> tvm<span class=\"token punctuation\">.</span>relay <span class=\"token keyword\">as</span> relay</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> tvm</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> tvm<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> graph_executor</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">######################################    路径信息    ##########################################</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>model_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/resnet18.onnx\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>save_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/pythonSave/\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>onnx_model <span class=\"token operator\">=</span> onnx<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>model_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">##################################    图片信息    ##############################################</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>img_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/.tvm_test_data/data/imagenet_cat.png\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Resize it to 224x224</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>resized_image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>img_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>asarray<span class=\"token punctuation\">(</span>resized_image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># Our input image is in HWC layout while ONNX expects CHW input, so convert the array</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>img_data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Normalize according to the ImageNet input specification</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>imagenet_mean <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.485</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.406</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>imagenet_stddev <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.229</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.225</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>norm_img_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>img_data <span class=\"token operator\">/</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> imagenet_mean<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> imagenet_stddev</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># Add the batch dimension, as we are expecting 4-dimensional input: NCHW.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>norm_img_data<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">####################################     模型编译     ###########################################</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>input_name <span class=\"token operator\">=</span> <span class=\"token string\">\"data\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>target <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>Target<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>shape_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>input_name<span class=\"token punctuation\">:</span> img_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>mod<span class=\"token punctuation\">,</span> params <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>frontend<span class=\"token punctuation\">.</span>from_onnx<span class=\"token punctuation\">(</span>onnx_model<span class=\"token punctuation\">,</span> shape_dict<span class=\"token punctuation\">,</span> export_node_renamed_model_path<span class=\"token operator\">=</span>save_path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建 IRModule  高级 Relay IR</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">with</span> tvm<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>PassContext<span class=\"token punctuation\">(</span>opt_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    lib <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> target<span class=\"token operator\">=</span>target<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 创建 GraphExecutorFactoryModule  </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#######################################     模型保存      ########################################</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># save</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># 保存编译后的库文件（.so）</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>lib_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.so\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>lib<span class=\"token punctuation\">.</span>get_lib<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>export_library<span class=\"token punctuation\">(</span>lib_fname<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># 保存模型参数（.params）</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>params_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.params\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>params_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> param_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    param_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>relay<span class=\"token punctuation\">.</span>save_param_dict<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_params<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># 保存 JSON 格式的计算图（.json）</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>json_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.json\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>json_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> json_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    json_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_executor_config<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>dev <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>module <span class=\"token operator\">=</span> graph_executor<span class=\"token punctuation\">.</span>GraphModule<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">[</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># graph_executor.GraphModule</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">############################       运行    ##########################################</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>module<span class=\"token punctuation\">.</span>set_input<span class=\"token punctuation\">(</span>input_name<span class=\"token punctuation\">,</span> img_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>module<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>output_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>tvm_output <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>get_output<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tvm_output<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"buildrelay\"><a class=\"anchor\" href=\"#buildrelay\">#</a> BuildRelay</h1>\n<p>文章 <a href=\"https://forcheetah.github.io/2024/10/17/tvm03/\">《【TVM】通过代码学习编译流程【3】模型编译》</a> 已经介绍了 Relay IRModule 转换为 <code>GraphExecutorFactory</code>  的过程。其中中间有个 <code>bld_mod.build()</code>  函数调用 C++ 类 <code>RelayBuildModule</code>  的函数 <code>build</code> 。  <code>build</code>  流程包含了将 Relay IRModule 降级为低级中间表示 TIR，然后再转换为 Runtime::Module 的过程。本篇讲解 <code>bld_mod.build()</code>  函数调用到的 BuildRelay 函数，即下图中的红色节点。</p>\n<p><img loading=\"lazy\" data-src=\"1729519037124.jpg\" alt=\"总体流程图\"></p>\n<p>前述流程中讲到  <code>bld_mod.build()</code>  函数调用 C++ 类 <code>RelayBuildModule</code>  的函数 <code>build</code> 。 下面是 <code>RelayBuildModule</code>  类根据名字 “build” 调用的函数，它调用了自身的 <code>Build()</code>  函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">ICHECK_EQ</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>num_args<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>RelayBuildModule</code>  类的 <code>Build()</code>  函数以 Relay IRModule 模型为输入，调用关键函数  <code>BuildRelay(std::move(mod), mod_name);</code> 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Build</span><span class=\"token punctuation\">(</span>IRModule mod<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Array<span class=\"token operator\">&lt;</span>Target<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> raw_targets<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> tvm<span class=\"token double-colon punctuation\">::</span>Target<span class=\"token operator\">&amp;</span> target_host<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>             <span class=\"token keyword\">const</span> Executor<span class=\"token operator\">&amp;</span> executor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Runtime<span class=\"token operator\">&amp;</span> runtime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>             <span class=\"token keyword\">const</span> WorkspaceMemoryPools<span class=\"token operator\">&amp;</span> workspace_memory_pools<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>             <span class=\"token keyword\">const</span> ConstantMemoryPools<span class=\"token operator\">&amp;</span> constant_memory_pools<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> String mod_name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    VLOG_CONTEXT <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Build\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    executor_ <span class=\"token operator\">=</span> executor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    runtime_ <span class=\"token operator\">=</span> runtime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    workspace_memory_pools_ <span class=\"token operator\">=</span> workspace_memory_pools<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    constant_memory_pools_ <span class=\"token operator\">=</span> constant_memory_pools<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    config_ <span class=\"token operator\">=</span> <span class=\"token function\">CompilationConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PassContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> raw_targets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Using compilation config:\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl <span class=\"token operator\">&lt;&lt;</span> config_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">BuildRelay</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mod_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>RelayBuildModule</code>  类的 <code>BuildRelay()</code>  函数是 TVM 编译的关键函数。基本的编译流程都在该函数当中。代码如下所示，在代码中添加了部分注释。简略介绍一下流程；<br>\n <code>WithAttrs()</code>  —— 为 Relay IRModule 添加 Executor 和 Runtime 属性<br>\n <code> OptimizeImpl(std::move(module))</code> —— 收集并执行大量针对高级中间表示 Relay IRModule 的优化 Pass，包含算子融合，常量折叠等。<br>\n <code>MakeExecutorCodegen(executor_-&gt;name)</code> —— 构建代码生成 GraphCodegen，用于将高层次的计算描述转换为特定硬件平台上的低层次、可执行代码。<br>\n <code>Init(nullptr, config_-&gt;primitive_targets)</code> ——Codegen 初始化。<br>\n <code>Codegen(func_module, func, mod_name)</code> —— 将 Relay IRModule 降级为 TIR Module。<br>\n <code>UpdateOutput(&amp;ret_)</code> —— 更新降级后的 json 图结构到 BuildOutput 结构体<br>\n <code>executor_codegen_-&gt;GetParams()</code> —— 更新降级后的 params 到 BuildOutput 结构体<br>\n <code>TIRToRuntime(lowered_funcs, host_target)</code> ——TIR Module 转换为 runtime::Module</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">BuildRelay</span><span class=\"token punctuation\">(</span>IRModule relay_module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> String<span class=\"token operator\">&amp;</span> mod_name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// Relay IRModule -> IRModule optimizations.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IRModule <span class=\"token keyword\">module</span> <span class=\"token operator\">=</span> <span class=\"token function\">WithAttrs</span><span class=\"token punctuation\">(</span>  <span class=\"token comment\">// 为 Relay IRModule 添加 Executor 和 Runtime 属性</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        relay_module<span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    relay_module <span class=\"token operator\">=</span> <span class=\"token function\">OptimizeImpl</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 执行多个针对 Relay IRModule 的优化 Pass</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// Get the updated function and new IRModule to build.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Function func <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">Downcast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>relay_module<span class=\"token operator\">-></span><span class=\"token function\">Lookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 获取 Relay IRModule 中的 main 函数表达式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    IRModule func_module <span class=\"token operator\">=</span> <span class=\"token function\">WithAttrs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IRModule</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FromExpr</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 为 main 函数表达式添加属性信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                                     <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// Generate code for the updated function.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    executor_codegen_ <span class=\"token operator\">=</span> <span class=\"token function\">MakeExecutorCodegen</span><span class=\"token punctuation\">(</span>executor_<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 构建代码生成 GraphCodegen</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> config_<span class=\"token operator\">-></span>primitive_targets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Codegen 初始化</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">Codegen</span><span class=\"token punctuation\">(</span>func_module<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> mod_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 将 Relay IRModule 降级为 TIR Module    </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">UpdateOutput</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ret_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 更新降级后的 json 图结构到 BuildOutput 结构体</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    ret_<span class=\"token punctuation\">.</span>params <span class=\"token operator\">=</span> executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 更新降级后的 params 到 BuildOutput 结构体</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">auto</span> lowered_funcs <span class=\"token operator\">=</span> executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetIRModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取降级后的 TIR Module</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// No need to build for external functions.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    Target <span class=\"token function\">ext_dev</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ext_dev\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lowered_funcs<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>ext_dev<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> lowered_funcs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      lowered_funcs<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>ext_dev<span class=\"token punctuation\">,</span> <span class=\"token function\">IRModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">const</span> Target<span class=\"token operator\">&amp;</span> host_target <span class=\"token operator\">=</span> config_<span class=\"token operator\">-></span>host_virtual_device<span class=\"token operator\">-></span>target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">const</span> runtime<span class=\"token double-colon punctuation\">::</span>PackedFunc<span class=\"token operator\">*</span> pf <span class=\"token operator\">=</span> runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Registry</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"codegen.LLVMModuleCreate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// When there is no lowered_funcs due to reasons such as optimization.</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lowered_funcs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>host_target<span class=\"token operator\">-></span>kind<span class=\"token operator\">-></span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">CHECK</span><span class=\"token punctuation\">(</span>pf <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Unable to create empty module for llvm without llvm codegen.\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// If we can decide the target is LLVM, we then create an empty LLVM module.</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        ret_<span class=\"token punctuation\">.</span>mod <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>host_target<span class=\"token operator\">-></span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"empty_module\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// If we cannot decide the target is LLVM, we create an empty CSourceModule.</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// The code content is initialized with \";\" to prevent complaining</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// from CSourceModuleNode::SaveToFile.</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        ret_<span class=\"token punctuation\">.</span>mod <span class=\"token operator\">=</span> tvm<span class=\"token double-colon punctuation\">::</span>codegen<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CSourceModuleCreate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\";\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      ret_<span class=\"token punctuation\">.</span>mod <span class=\"token operator\">=</span> tvm<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">TIRToRuntime</span><span class=\"token punctuation\">(</span>lowered_funcs<span class=\"token punctuation\">,</span> host_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// TIR Module 转换为 runtime::Module</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">auto</span> ext_mods <span class=\"token operator\">=</span> executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetExternalModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    ret_<span class=\"token punctuation\">.</span>mod <span class=\"token operator\">=</span> tvm<span class=\"token double-colon punctuation\">::</span>codegen<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CreateMetadataModule</span><span class=\"token punctuation\">(</span>ret_<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">,</span> ret_<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">,</span> ext_mods<span class=\"token punctuation\">,</span> host_target<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                                                  runtime_<span class=\"token punctuation\">,</span> executor_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                                                  executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetExecutorCodegenMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// Remove external params which were stored in metadata module.</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span>Module mod <span class=\"token operator\">:</span> ext_mods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token keyword\">auto</span> pf_var <span class=\"token operator\">=</span> mod<span class=\"token punctuation\">.</span><span class=\"token function\">GetFunction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get_const_vars\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pf_var <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> variables <span class=\"token operator\">=</span> <span class=\"token function\">pf_var</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> variables<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>          <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> ret_<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>variables<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">operator</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> ret_<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token function\">VLOG</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"constant '\"</span> <span class=\"token operator\">&lt;&lt;</span> variables<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"' has been captured in external module\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            ret_<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>BuildRelay 过程很长，这是总体的流程结构的一部分。</p>\n<p><img loading=\"lazy\" data-src=\"1729519253239.jpg\" alt=\"总体\"></p>\n<h1 id=\"optimizeimpl\"><a class=\"anchor\" href=\"#optimizeimpl\">#</a> OptimizeImpl</h1>\n<p><code> OptimizeImpl(std::move(module))</code> —— 收集并执行大量针对高级中间表示 Relay IRModule 的优化 Pass，包含算子融合，常量折叠等。 <code>OptimizeImpl()</code>  函数如下所示。代码中包含了主要函数的简单注释。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>IRModule <span class=\"token function\">OptimizeImpl</span><span class=\"token punctuation\">(</span>IRModule relay_module<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">ICHECK</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">.</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The IRModule must be defined for the Relay compiler.\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    backend<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BindParamsInModule</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">,</span> params_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 根据参数名字绑定参数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Array<span class=\"token operator\">&lt;</span>Pass<span class=\"token operator\">></span> pass_seqs <span class=\"token operator\">=</span>  <span class=\"token comment\">// 获取一系列 pass，组成包含 Pass 的数组</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">GetPassPrefix</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*is_homogenous=*/</span>config_<span class=\"token operator\">-></span>primitive_targets<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/*is_vm=*/</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    transform<span class=\"token double-colon punctuation\">::</span>PassContext pass_ctx <span class=\"token operator\">=</span> <span class=\"token class-name\">PassContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token punctuation\">.</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">// This pass currently only supports the homogeneous case.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">SplitArgs</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">GetAttr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"max_function_args\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              <span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              <span class=\"token punctuation\">.</span><span class=\"token function\">IntValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// Always plan devices so the remaining passes don't need to distinguish homogeneous vs hetrogenous execution.</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">PlanDevices</span><span class=\"token punctuation\">(</span>config_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// Fuse the operations if it is needed.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FuseOps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 添加算子融合 Pass</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// Create a sequential pass and perform optimizations.</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    transform<span class=\"token double-colon punctuation\">::</span>Pass seq <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Sequential</span><span class=\"token punctuation\">(</span>pass_seqs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将多个 Pass 封装成 Sequential 类。Sequential 类包含多个按照顺序执行的 Pass，类似于 pytorch 里面的 nn.Sequential</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token punctuation\">.</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      With<span class=\"token operator\">&lt;</span>Target<span class=\"token operator\">></span> <span class=\"token function\">tctx</span><span class=\"token punctuation\">(</span>config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      relay_module <span class=\"token operator\">=</span> <span class=\"token function\">seq</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      relay_module <span class=\"token operator\">=</span> <span class=\"token function\">seq</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 执行 Sequential seq 中的所有 Pass，修改 relay_module 结构</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// Do layout rewrite for auto-scheduler.  </span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>backend<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">IsAutoSchedulerEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token punctuation\">.</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 使用 auto-schedule 优化调度的情况下</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      Pass major_pass <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">AutoSchedulerLayoutRewrite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 内存排布重写 Pass</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token keyword\">bool</span> enable_layout_rewrite_targets <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token operator\">-></span><span class=\"token function\">GetTargetDeviceType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> kDLCPU <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">GetAttr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"device\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"mali\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enable_layout_rewrite_targets <span class=\"token operator\">&amp;&amp;</span> pass_ctx<span class=\"token punctuation\">.</span><span class=\"token function\">PassEnabled</span><span class=\"token punctuation\">(</span>major_pass<span class=\"token operator\">-></span><span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        With<span class=\"token operator\">&lt;</span>Target<span class=\"token operator\">></span> <span class=\"token function\">tctx</span><span class=\"token punctuation\">(</span>config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        relay_module <span class=\"token operator\">=</span> <span class=\"token function\">major_pass</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// Defuse ops to fold constants, then fuse them again</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">DefuseOps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 执行 单个 Pass</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FoldConstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FuseOps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>backend<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">IsMetaScheduleEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token punctuation\">.</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 使用 meta-schedule 优化调度的情况下</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      Pass major_pass <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MetaScheduleLayoutRewrite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token keyword\">bool</span> enable_layout_rewrite_targets <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>          config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token operator\">-></span><span class=\"token function\">GetTargetDeviceType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> kDLCPU <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>          config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">GetAttr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"device\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"mali\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enable_layout_rewrite_targets <span class=\"token operator\">&amp;&amp;</span> pass_ctx<span class=\"token punctuation\">.</span><span class=\"token function\">PassEnabled</span><span class=\"token punctuation\">(</span>major_pass<span class=\"token operator\">-></span><span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        With<span class=\"token operator\">&lt;</span>Target<span class=\"token operator\">></span> <span class=\"token function\">tctx</span><span class=\"token punctuation\">(</span>config_<span class=\"token operator\">-></span>optional_homogeneous_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        relay_module <span class=\"token operator\">=</span> <span class=\"token function\">major_pass</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// Defuse ops to fold constants, then fuse them again</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">DefuseOps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>     <span class=\"token comment\">// 执行反算子融合 Pass</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FoldConstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 执行常量折叠 Pass</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FuseOps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>       <span class=\"token comment\">// 执行算子融合 Pass</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">InferType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Inline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">InferType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">LabelOps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    relay_module <span class=\"token operator\">=</span> transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">AnnotateMemoryScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>relay_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">return</span> relay_module<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code> backend::BindParamsInModule(relay_module, params_)</code> —— 根据参数名字绑定参数</p>\n<p>Meta Schedule 和 AutoSchedule 都是用于自动优化调度的工具。AutoSchedule 是 TVM 较早期引入的一种自动调度机制，它的主要特点是基于成本模型的搜索算法来探索可能的调度选项。AutoSchedule 通常依赖于一个预定义的成本模型来估计不同调度策略下的性能，并使用搜索算法（如进化算法或随机搜索）来找到最佳的调度。MetaSchedule 是一个更为现代化且灵活的自动调度框架，它旨在解决日益增长的硬件多样性和复杂的深度学习工作负载带来的挑战。与 AutoSchedule 相比，MetaSchedule 引入了更多先进的技术和设计理念，如自适应性，机器学习搜索测量，有反馈的成本模型。使用方法：例如可以在 PassContext 中配置 “relay.backend.use_meta_schedule” 参数设置为 TRUE，则 TVM 使用 Meta Schedule 帮助完成自动调度优化。</p>\n<p><code>GetPassPrefix()</code> —— 获取一系列 Pass，组成包含 Pass 的数组。代码如下。</p>\n<p>函数中还获取了很多其他 Pass，下一篇文章将选择其中的 <code>DefuseOps</code> Pass 进行讲解。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Array<span class=\"token operator\">&lt;</span>Pass<span class=\"token operator\">></span> <span class=\"token function\">GetPassPrefix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> is_homogeneous<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> is_vm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Array<span class=\"token operator\">&lt;</span>Pass<span class=\"token operator\">></span> pass_seqs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// TODO(mbs): Would be nice to get spans on all diagnostics, but since they arg forgotton</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// by most passes there's little utility in including this now. Plus we'd need to only do</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// this if there's no existing spans to work from.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// pass_seqs.push_back(parser::AnnotateSpans());</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  Array<span class=\"token operator\">&lt;</span>runtime<span class=\"token double-colon punctuation\">::</span>String<span class=\"token operator\">></span> entry_functions<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">RemoveUnusedFunctions</span><span class=\"token punctuation\">(</span>entry_functions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ToBasicBlockNormalForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// Run all dialect legalization passes.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>relay<span class=\"token double-colon punctuation\">::</span>qnn<span class=\"token double-colon punctuation\">::</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Legalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// Legalize pass is restricted to homogeneous execution for now.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is_homogeneous<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Legalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">SimplifyInference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is_vm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// eta expand to support constructors in argument position</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">EtaExpand</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">/* expand_constructor */</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* expand_global_var */</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  PackedFunc fskip <span class=\"token operator\">=</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    Expr expr <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">*</span> call_node <span class=\"token operator\">=</span> expr<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">as</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CallNode<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">auto</span> op_node <span class=\"token operator\">=</span> call_node<span class=\"token operator\">-></span>op<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">as</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>OpNode<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op_node<span class=\"token operator\">-></span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"cast\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">auto</span> attrs <span class=\"token operator\">=</span> call_node<span class=\"token operator\">-></span>attrs<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">as</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CastAttrs<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>attrs<span class=\"token operator\">-></span>dtype <span class=\"token operator\">==</span> <span class=\"token class-name\">DataType</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">EliminateCommonSubexpr</span><span class=\"token punctuation\">(</span>fskip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CombineParallelConv2D</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CombineParallelDense</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CombineParallelBatchMatmul</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FoldConstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FoldScaleAxis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">SimplifyExpr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CanonicalizeCast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CanonicalizeOps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FlattenAtrousConv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token comment\">// Alter layout transformation is currently only applied to homogeneous execution.</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is_homogeneous<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>is_vm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">InferType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">AlterOpLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">SimplifyExprPostAlterOp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token comment\">// Fast math optimizations.</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FastMath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  pass_seqs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>transform<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FoldConstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token keyword\">return</span> pass_seqs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复。</p>\n",
            "tags": [
                "tvm",
                "compile"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/10/18/aicompile01/",
            "url": "https://forcheetah.github.io/2024/10/18/aicompile01/",
            "title": "【AI编译】Tiling操作能优化什么时间",
            "date_published": "2024-10-18T13:44:56.351Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇讲解 Tiling 操作为什么能够优化神经网络推理。</p>\n<p>也可以参考 <a href=\"https://www.hiascend.com/developer/techArticles/20240920-1?envFlag=1\">《Ascend C 算子优化实用技巧 04——Tiling 优化》</a></p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"什么是tiling\"><a class=\"anchor\" href=\"#什么是tiling\">#</a> 什么是 tiling</h1>\n<p>无法完整的容纳算子的输入与输出，需要每次搬运一部分输入进行计算然后搬出，再搬运下一部分输入进行计算，直到得到完整的最终结果，这个数据切分、分块计算的过程称之为 Tiling，切分数据的算法称为 Tiling 算法或者 Tiling 策略。</p>\n<h1 id=\"tile算子和tiling的区别\"><a class=\"anchor\" href=\"#tile算子和tiling的区别\">#</a> tile 算子和 tiling 的区别</h1>\n<p>我们先问一问语言大模型两者的区别：</p>\n<h2 id=\"神经网络推理中的tile算子\"><a class=\"anchor\" href=\"#神经网络推理中的tile算子\">#</a> 神经网络推理中的 Tile 算子</h2>\n<p>在神经网络中，会发现 tile 作为一个节点算子出现。Tile 算子（或称为 Tiling 操作）是一种张量操作，它的功能是将输入张量沿着指定的维度重复一定次数。该算子需要指定两个参数：</p>\n<ul>\n<li>1.reps<br>\n（重复次数）：这是一个整数列表，定义了每个维度上的重复次数。列表的长度必须与输入张量的维度相匹配，或者至少与你想要扩展的那些维度相匹配。如果对于某个维度你不希望进行复制，可以设置为 1。</li>\n<li>2.axis<br>\n（轴 / 维度）：虽然某些框架可能不需要显式指定轴，因为它们可以通过 reps 的结构来推断，但有些情况下需要明确指出哪些维度应该被复制。</li>\n</ul>\n<p>例如，假设有一个形状为 (2, 3) 的二维张量，并且你想沿第一个维度（行方向）重复两次，沿第二个维度（列方向）重复三次，那么你可以使用 Tile 算子并设置 reps=[2, 3]。这样操作后，输出张量将会是一个形状为 (4, 9) 的新张量，其中原始张量的内容被按照指定的方式进行了复制。</p>\n<p>在不同的深度学习库中，Tile 算子的实现可能会有所不同。例如，在 TensorFlow 中，它是 tf.tile () 函数；而在 PyTorch 中，则对应的是 torch.tile () 或者 .repeat () 方法。每种实现都有其特定的语法和用法，但核心概念是一致的。</p>\n<h2 id=\"ai编译优化中的tiling操作\"><a class=\"anchor\" href=\"#ai编译优化中的tiling操作\">#</a> AI 编译优化中的 tiling 操作</h2>\n<p>在 AI 编译领域，特别是针对深度学习模型的优化过程中，“tiling”（平铺）操作是指一种将计算任务分解成更小、更易于管理的子任务的技术。这种技术通常用于提高计算效率和内存使用效率，尤其是在处理大规模数据集或高维度张量时。</p>\n<p>Tiling 的主要目的是：</p>\n<ul>\n<li>1. 减少内存访问开销：通过将大块数据划分为较小的 “瓦片”，可以将这些小块数据加载到高速缓存中，从而减少对外部存储器的访问次数。这有助于利用 CPU 或 GPU 的高速缓存来加速计算过程。</li>\n<li>2. 并行化处理：每个 “瓦片” 可以独立处理，这意味着它们可以在多核处理器上并行执行，或者在 GPU 等并行计算架构上高效地分发给不同的线程或流处理器。</li>\n<li>3. 更好地利用硬件资源：通过适当调整瓦片大小，可以确保计算单元能够被充分利用，同时避免因单个任务过大导致的资源浪费。</li>\n<li>4. 改善局部性：合理设置的瓦片尺寸可以帮助保持良好的空间局部性和时间局部性，使得数据在被处理前已经被预取到了更快的存储层次中。</li>\n<li>5. 降低峰值内存需求：对于某些运算来说，一次性加载整个输入可能需要大量的内存。通过 tilling，我们可以仅处理当前所需的那部分数据，从而降低了对系统内存的需求。<br>\n例如，在卷积神经网络 (CNN) 中，一个常见的做法是将图像分割成多个小块，并且只在这些小块上进行卷积运算，而不是在整个图像上进行。这样做不仅可以减少每次计算所需的数据量，还能促进更好的并行化。</li>\n</ul>\n<p>Tiling 策略的选择取决于具体的硬件特性以及所处理数据的特点。在实际应用中，通常需要根据目标平台和具体应用场景来精心设计合适的 tilling 方案。一些自动化的工具和框架如 TensorFlow XLA、TVM (Tensor Virtual Machine) 等提供了高级别的 API 来帮助开发者实现高效的 tilling 优化。</p>\n<h2 id=\"两个tile是完全不同的概念\"><a class=\"anchor\" href=\"#两个tile是完全不同的概念\">#</a> 两个 tile 是完全不同的概念</h2>\n<p>两个 “tile” 概念虽然名字相似，但它们在不同的上下文中使用，并且具有不同的含义和用途：</p>\n<p>1. 神经网络中的 Tile 算子：</p>\n<ul>\n<li>在这个上下文中，Tile 是指一种张量操作，它将输入张量沿着指定维度重复一定次数。</li>\n<li>它主要用于数据处理阶段，例如当你需要复制或扩展张量以匹配某些特定的尺寸要求时。</li>\n<li>例子包括 TensorFlow 中的 tf.tile () 函数或 PyTorch 中的.repeat () 方法。</li>\n</ul>\n<p>2.AI 编译领域的 Tiling（平铺）：</p>\n<ul>\n<li>这里的 Tiling 是一种优化技术，用于将计算任务分解成更小的、可管理的部分，以便于更好地利用硬件资源，如缓存和并行计算能力。</li>\n<li>它通常是在模型优化阶段使用的，目的是提高计算效率、减少内存访问开销、促进并行化处理等。</li>\n<li>Tiling 可以应用于各种类型的运算，比如卷积运算中将图像分割成小块来处理。</li>\n</ul>\n<p>总结来说，尽管两者都涉及到了 “复制” 或 “分块” 的概念，但是神经网络中的 Tile 算子更多地关注于数据结构的操作，而 AI 编译领域的 Tiling 则是一个优化策略，旨在提升程序执行的性能。这两个概念分别属于数据处理和性能优化的不同领域。</p>\n<h1 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h1>\n<p>一台电脑的内存很大，现在主流配置 16GB，甚至 32GB，虽然空间很大，但是它的速度比较慢，我们把它叫做 Global Memory。</p>\n<p>专用的 NPU 芯片用来做神经网络推理，它的高速缓存速度很快，但是空间可能只有几 MB，我们把它叫做 Cache。</p>\n<p>为了获取更快的运算速度，tensor 需要加载到 Cache 中进行计算，但是当算子需要占用的空间超过 Cache 的空间时，需要不断的进行数据搬运，导致算子搬入或搬出数据变为算子整个运行过程的性能瓶颈。</p>\n<p><img loading=\"lazy\" data-src=\"1729258859529.jpg\" alt=\"AI\"></p>\n<p>如上图所示：</p>\n<p>假设现在有 300 个数，需要连续经过三个 add 算子进行加操作，分别是 <code>add_1</code> ， <code>add_2</code>  和 <code>add_3</code> ，最终仍然输出 300 个数。</p>\n<p>但是 Cache 只能够存放 100 个数。</p>\n<p>在没有 tiling 操作的情况下：计算 <code>add_1</code>  时，需要将 (0,100) 个数 load 到 Cache，计算完毕后，需要将这 (0,100) store 回 global memory，为下一百个数腾出空间【接下来的计算 Cache 未命中】；然后加载 load (100,200) 的数据，继续计算 <code>add_1</code> 。以此类推，在没有 tiling 操作的情况下，计算完 <code>add_1</code> ， <code>add_2</code>  和 <code>add_3</code>  需要 load 和 store 操作的数据都是 900。</p>\n<p>在 tiling 的情况下，会提前将数据分块，分成 (0,100)，(100,200) 和 (200,300)。加载 (0,100)，接连计算 <code>add_1</code> ， <code>add_2</code>  和 <code>add_3</code> 。计算 <code>add_2</code>  时发现 Cache 中的数据正是所需要的数据【Cache 命中】。计算流程如图所示，整个计算下来，load 和 store 操作的数据都是 300。</p>\n<p><img loading=\"lazy\" data-src=\"a.jpg\" alt=\"图片\"></p>\n<p>tiling 操作提高了 cache 的命中率，避免了频繁搬运带来的时间损耗。<br>\n从图上看，同一 group 中包含的超出 cache 算子越多，tiling 带来的收益越大。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "compile",
                "AI"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/10/17/tvm03/",
            "url": "https://forcheetah.github.io/2024/10/17/tvm03/",
            "title": "【TVM】通过代码学习编译流程【3】模型编译",
            "date_published": "2024-10-17T12:03:36.801Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本系列文章将从代码和流程图入手，详细介绍 TVM AI 编译器的编译流程。本文章为第三篇，对应的 TVM 版本为当前最新版本 1.7。</p>\n<p>网络上有不少 TVM 工程的教程资源，如果本博客也是其他教程的简单重复的话，则网络的角落里又多了一份纯粹的空间占用者。所以我在想，本文章有什么特点才值得一看呢？我觉得有两个优点: 1、本文从代码出发，不会泛泛而谈，能够从细节了解 TVM；2、自认为结构流程图画的不错，能够从整体上把握 TVM 的脉络。所以，也许值得一看呢。</p>\n<p>本篇文章介绍 TVM 对模型的编译流程。文章 <a href=\"https://forcheetah.github.io/2024/10/13/tvm02/\">《【TVM】通过代码学习编译流程【2】模型转换》</a> 已经介绍了 onnx 模型转换为 TVM 高级中间表示 Relay IRModule 的过程，得到了 Relay IRModule。本篇文章则介绍该模型后续的编译从 Relay IRModule 转换为 <code>GraphExecutorFactory</code>  的过程。</p>\n<p>因为代码量巨大，模型编译会分成若干篇文章进行解析。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"python脚本\"><a class=\"anchor\" href=\"#python脚本\">#</a> Python 脚本</h1>\n<p>这里提供一个简单的 Python 脚本，调用 TVM Python 前端，实现 onnx 模型的编译过程。tvm 通过代码学习编程流程系列文章将基本采用这个脚本帮助追踪代码。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> onnx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> tvm<span class=\"token punctuation\">.</span>relay <span class=\"token keyword\">as</span> relay</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> tvm</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> tvm<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> graph_executor</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">######################################    路径信息    ##########################################</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>model_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/resnet18.onnx\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>save_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/pythonSave/\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>onnx_model <span class=\"token operator\">=</span> onnx<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>model_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">##################################    图片信息    ##############################################</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>img_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/.tvm_test_data/data/imagenet_cat.png\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Resize it to 224x224</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>resized_image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>img_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>asarray<span class=\"token punctuation\">(</span>resized_image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># Our input image is in HWC layout while ONNX expects CHW input, so convert the array</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>img_data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Normalize according to the ImageNet input specification</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>imagenet_mean <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.485</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.406</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>imagenet_stddev <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.229</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.225</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>norm_img_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>img_data <span class=\"token operator\">/</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> imagenet_mean<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> imagenet_stddev</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># Add the batch dimension, as we are expecting 4-dimensional input: NCHW.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>norm_img_data<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">####################################     模型编译     ###########################################</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>input_name <span class=\"token operator\">=</span> <span class=\"token string\">\"data\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>target <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>Target<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>shape_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>input_name<span class=\"token punctuation\">:</span> img_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>mod<span class=\"token punctuation\">,</span> params <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>frontend<span class=\"token punctuation\">.</span>from_onnx<span class=\"token punctuation\">(</span>onnx_model<span class=\"token punctuation\">,</span> shape_dict<span class=\"token punctuation\">,</span> export_node_renamed_model_path<span class=\"token operator\">=</span>save_path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建 IRModule  高级 Relay IR</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">with</span> tvm<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>PassContext<span class=\"token punctuation\">(</span>opt_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    lib <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> target<span class=\"token operator\">=</span>target<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 创建 GraphExecutorFactoryModule  </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#######################################     模型保存      ########################################</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># save</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># 保存编译后的库文件（.so）</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>lib_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.so\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>lib<span class=\"token punctuation\">.</span>get_lib<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>export_library<span class=\"token punctuation\">(</span>lib_fname<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># 保存模型参数（.params）</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>params_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.params\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>params_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> param_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    param_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>relay<span class=\"token punctuation\">.</span>save_param_dict<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_params<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># 保存 JSON 格式的计算图（.json）</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>json_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.json\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>json_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> json_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    json_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_executor_config<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>dev <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>module <span class=\"token operator\">=</span> graph_executor<span class=\"token punctuation\">.</span>GraphModule<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">[</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># graph_executor.GraphModule</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">############################       运行    ##########################################</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>module<span class=\"token punctuation\">.</span>set_input<span class=\"token punctuation\">(</span>input_name<span class=\"token punctuation\">,</span> img_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>module<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>output_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>tvm_output <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>get_output<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tvm_output<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"tvm编译\"><a class=\"anchor\" href=\"#tvm编译\">#</a> TVM 编译</h1>\n<p>下面的函数实现了 TVM 的编译过程。该过程的输入 <code>mod, target=target, params=params</code>  分别是 Relay IRModule 中间表示， <code>target</code>  目标设备， <code>params</code>  参数。</p>\n<p><code>params</code>  参数在上一篇文章中有讲到， <code>freeze_params=True</code>  的情况下该 <code>params</code>  为空的字典。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> tvm<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>PassContext<span class=\"token punctuation\">(</span>opt_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    lib <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> target<span class=\"token operator\">=</span>target<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 创建 GraphExecutorFactoryModule</span></pre></td></tr></table></figure><p>下图是 <code>relay.build()</code>  函数的总体流程图。</p>\n<p><img loading=\"lazy\" data-src=\"1729165916609.jpg\" alt=\"总体流程图\"></p>\n<h2 id=\"pass上下文-passcontext\"><a class=\"anchor\" href=\"#pass上下文-passcontext\">#</a> Pass 上下文   PassContext</h2>\n<p><code>Pass</code> ：在编译器设计中，“pass” 通常指的是编译过程中的一轮或多轮处理。一个 “pass” 是指对源代码或者其某种表示形式（如抽象语法树或中间表示）进行一次完整的扫描或处理。</p>\n<p><code>with tvm.transform.PassContext(opt_level=3)</code>  代码初始化了 TVM 转换 Pass 的上下文。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token decorator annotation punctuation\">@tvm<span class=\"token punctuation\">.</span>_ffi<span class=\"token punctuation\">.</span>register_object</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transform.PassContext\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PassContext</span><span class=\"token punctuation\">(</span>tvm<span class=\"token punctuation\">.</span>runtime<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"The basis where a Relay optimization/analysis runs on.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Each pass context contains a number of auxiliary information that is used</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    to help an optimization pass. Such information includes the error reporter</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    to record the errors of during the optimization, etc.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    opt_level : Optional[int]</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        The optimization level of this pass.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    required_pass : Optional[Union[List[str], Set[str], Tuple[str]]]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        The list of passes that are required by a certain pass.</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    disabled_pass : Optional[Union[List[str], Set[str], Tuple[str]]]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        The list of passes that are disabled.</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    instruments : Optional[Sequence[PassInstrument]]</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        The list of pass instrument implementations.</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    config : Optional[Dict[str, Object]]</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        Additional configurations for specific passes.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    trace: Optional[relax.tuning.Trace]</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        Initial trace for trace mode.</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    trace_stack: Optional[List[relax.tuning_api.Trace]]</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        Initial trace stack for trace mode.</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    make_traceable: Optional[List[str]]</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        List of passes to make traceable.</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    num_evals: int</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        initial number of evaluations conducted in the pipeline.</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    tuning_api_database: Optional[relax.tuning_api.JSONDatabase]</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    \"\"\"</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        opt_level<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        required_pass<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        disabled_pass<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        instruments<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        config<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        trace<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        trace_stack<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        make_traceable<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        num_evals<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        tuning_api_database<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        required <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>required_pass<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> required_pass <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>required<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">raise</span> TypeError<span class=\"token punctuation\">(</span><span class=\"token string\">\"required_pass is expected to be the type of \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"list/tuple/set.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        disabled <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>disabled_pass<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> disabled_pass <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>disabled<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">raise</span> TypeError<span class=\"token punctuation\">(</span><span class=\"token string\">\"disabled_pass is expected to be the type of \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"list/tuple/set.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        instruments <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>instruments<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> instruments <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>instruments<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">raise</span> TypeError<span class=\"token punctuation\">(</span><span class=\"token string\">\"instruments is expected to be the type of \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"list/tuple/set.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\"># Convert to Map&lt;String, bool></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\"># TODO(sunggg): Replace this to Set equivalent if exists</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        make_traceable <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span> <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> make_traceable<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">if</span> make_traceable <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> trace_stack<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            trace_stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>trace<span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> trace <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        config <span class=\"token operator\">=</span> config <span class=\"token keyword\">if</span> config <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        self<span class=\"token punctuation\">.</span>__init_handle_by_constructor__<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            _ffi_transform_api<span class=\"token punctuation\">.</span>PassContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            opt_level<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            required<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            disabled<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            instruments<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            config<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            trace_stack<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            make_traceable<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            num_evals<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            tuning_api_database<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上述代码可以看到，PassContext 在初始化的时候， <code>opt_level</code> pass 优化级别，可以指定  <code>required_pass</code>  需要的 pass 列表， <code>disabled_pass</code>  需要排除的 pass 列表等。</p>\n<p>之后调用 <code>self.__init_handle_by_constructor__()</code>  函数创建 PassContext 类。其中 <code>_ffi_transform_api.PassContext</code>  是构造函数，其余参数是构造函数的参数。 <code>self.__init_handle_by_constructor__()</code>  调用 C++ 后端注册函数 <code>&quot;transform.PassContext&quot;</code> ，该函数如下所示：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">TVM_REGISTER_GLOBAL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transform.PassContext\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">set_body_typed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> opt_level<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> required<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> disabled<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                       Array<span class=\"token operator\">&lt;</span>instrument<span class=\"token double-colon punctuation\">::</span>PassInstrument<span class=\"token operator\">></span> instruments<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                       Optional<span class=\"token operator\">&lt;</span>Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> ObjectRef<span class=\"token operator\">>></span> config<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>ObjectRef<span class=\"token operator\">></span> trace_stack<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                       Optional<span class=\"token operator\">&lt;</span>Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Bool<span class=\"token operator\">>></span> make_traceable<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num_evals<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                       Optional<span class=\"token operator\">&lt;</span>ObjectRef<span class=\"token operator\">></span> tuning_api_database<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">auto</span> pctx <span class=\"token operator\">=</span> <span class=\"token class-name\">PassContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      pctx<span class=\"token operator\">-></span>opt_level <span class=\"token operator\">=</span> opt_level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      pctx<span class=\"token operator\">-></span>required_pass <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>required<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      pctx<span class=\"token operator\">-></span>disabled_pass <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>disabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      pctx<span class=\"token operator\">-></span>instruments <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>instruments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        pctx<span class=\"token operator\">-></span>config <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      pctx<span class=\"token operator\">-></span>trace_stack <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>trace_stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      pctx<span class=\"token operator\">-></span>make_traceable <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>make_traceable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      pctx<span class=\"token operator\">-></span>num_evals <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>num_evals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      pctx<span class=\"token operator\">-></span>tuning_api_database <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>tuning_api_database<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token class-name\">PassConfigManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">Legalize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>pctx<span class=\"token operator\">-></span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">return</span> pctx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>通过 <code>TVM_REGISTER_GLOBAL(&quot;transform.PassContext&quot;)</code>  注册为全局函数，接收所有参数，通过 <code>auto pctx = PassContext::Create();</code>  创建 <code>PassContext</code>  类。</p>\n<h2 id=\"编译过程-bld_mod-buildmodule\"><a class=\"anchor\" href=\"#编译过程-bld_mod-buildmodule\">#</a> 编译过程   bld_mod = BuildModule ()</h2>\n<p><img loading=\"lazy\" data-src=\"1729165916609.jpg\" alt=\"总体流程图\"></p>\n<p>创建完 Pass 上下文之后，接下来在回到 Python 脚本，看 <code>lib = relay.build(mod, target=target, params=params)</code> ，该函数将 Relay IRModule 编译成为 <code>GraphExecutorFactoryModule</code> ，对应于 C++ 后端的 <code>GraphExecutorFactory</code>  类。</p>\n<p><code>relay.build()</code>  函数如下所示：其中  <code>ir_mod</code>  是前述模型转换得到的 Relay IRModule， <code>target</code>  是计划部署的加速硬件或设备 如 llvm cuda metal 等，甚至可以指定多种加速硬件或设备。  <code>target_host</code>  是指定主机端（通常是 CPU）的编译目标，例如当  <code>target</code>  是一个设备（如 GPU）时，通常还需要一些 cpu 来处理与设备驱动程序的交互、内存分配等任务。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ir_mod<span class=\"token punctuation\">,</span>          <span class=\"token comment\"># Relay IRModule</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    target<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\"># 计划部署的加速硬件或设备 如 llvm cuda metal 等</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    target_host<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 指定主机端（通常是 CPU）的编译目标 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    executor<span class=\"token operator\">=</span>Executor<span class=\"token punctuation\">(</span><span class=\"token string\">\"graph\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    runtime<span class=\"token operator\">=</span>Runtime<span class=\"token punctuation\">(</span><span class=\"token string\">\"cpp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    workspace_memory_pools<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    constant_memory_pools<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    params<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    mod_name<span class=\"token operator\">=</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Helper function that builds a Relay function to run on TVM graph executor.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Parameters</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ----------</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ir_mod : :py:class:`~tvm.IRModule`</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        The IR module to build. Using relay.Function is deprecated.</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    target : None, or any multi-target like object, see Target.canon_multi_target</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        For homogeneous compilation, the unique build target.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        For heterogeneous compilation, a dictionary or list of possible build targets.</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        Defaults to the current target in the environment if None.</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    target_host : None, or any target like object, see Target.canon_target</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        Host compilation target, if target is device.</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    executor : Optional[Executor]</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        The executor configuration with which to build the model.</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        Defaults to \"graph\" if no executor specified.</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    runtime : Optional[Runtime]</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        Runtime configuration to use when building the model.</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        Defaults to \"cpp\" if no runtime specified.</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    workspace_memory_pools : Optional[WorkspaceMemoryPools]</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        The object that contains an Array of WorkspacePoolInfo objects</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        that hold properties of read-write workspace pools that could be</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        used by the inference.</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    constant_memory_pools : Optional[ConstantMemoryPools]</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        The object that contains an Array of ConstantPoolInfo objects</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        that hold properties of read-only pools that could be</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        used by the inference.</pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    params : dict of str to NDArray</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        Input parameters to the graph that do not change</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        during inference time. Used for constant folding.</pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    mod_name: Optional[str]</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        The module name we will build</pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    Returns</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    -------</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    factory_module : tvm.relay.backend.executor_factory.ExecutorFactoryModule</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            The runtime factory for the TVM graph executor.</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    \"\"\"</pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>ir_mod<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>IRModule<span class=\"token punctuation\">,</span> _function<span class=\"token punctuation\">.</span>Function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Type of input parameter mod must be tvm.IRModule\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>ir_mod<span class=\"token punctuation\">,</span> _function<span class=\"token punctuation\">.</span>Function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">if</span> params<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            ir_mod <span class=\"token operator\">=</span> bind_params_by_name<span class=\"token punctuation\">(</span>ir_mod<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        ir_mod <span class=\"token operator\">=</span> IRModule<span class=\"token punctuation\">.</span>from_expr<span class=\"token punctuation\">(</span>ir_mod<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        warnings<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token string\">\"Please use input parameter mod (tvm.IRModule) \"</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token string\">\"instead of deprecated parameter mod (tvm.relay.function.Function)\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            DeprecationWarning<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    raw_targets <span class=\"token operator\">=</span> Target<span class=\"token punctuation\">.</span>canon_multi_target_and_host<span class=\"token punctuation\">(</span>Target<span class=\"token punctuation\">.</span>target_or_current<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> target_host<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>raw_targets<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    target_host <span class=\"token operator\">=</span> raw_targets<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>host</pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token comment\"># If current dispatch context is fallback context (the default root context),</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\"># then load pre-tuned parameters from TopHub</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>autotvm<span class=\"token punctuation\">.</span>DispatchContext<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">,</span> autotvm<span class=\"token punctuation\">.</span>FallbackContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        tophub_context <span class=\"token operator\">=</span> autotvm<span class=\"token punctuation\">.</span>tophub<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>raw_targets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        tophub_context <span class=\"token operator\">=</span> autotvm<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>EmptyContext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">with</span> tophub_context<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        bld_mod <span class=\"token operator\">=</span> BuildModule<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        graph_json<span class=\"token punctuation\">,</span> runtime_mod<span class=\"token punctuation\">,</span> params <span class=\"token operator\">=</span> bld_mod<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            mod<span class=\"token operator\">=</span>ir_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            target<span class=\"token operator\">=</span>raw_targets<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            executor<span class=\"token operator\">=</span>executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            runtime<span class=\"token operator\">=</span>runtime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            workspace_memory_pools<span class=\"token operator\">=</span>workspace_memory_pools<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            constant_memory_pools<span class=\"token operator\">=</span>constant_memory_pools<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            mod_name<span class=\"token operator\">=</span>mod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        func_metadata <span class=\"token operator\">=</span> bld_mod<span class=\"token punctuation\">.</span>get_function_metadata<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        devices <span class=\"token operator\">=</span> bld_mod<span class=\"token punctuation\">.</span>get_devices<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        lowered_ir_mods <span class=\"token operator\">=</span> bld_mod<span class=\"token punctuation\">.</span>get_irmodule<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        executor_codegen_metadata <span class=\"token operator\">=</span> bld_mod<span class=\"token punctuation\">.</span>get_executor_codegen_metadata<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">if</span> executor<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"aot\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            executor_factory <span class=\"token operator\">=</span> _executor_factory<span class=\"token punctuation\">.</span>AOTExecutorFactoryModule<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                ir_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                lowered_ir_mods<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                raw_targets<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                runtime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                runtime_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                mod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                func_metadata<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                executor_codegen_metadata<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                devices<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token keyword\">elif</span> executor<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"graph\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            executor_factory <span class=\"token operator\">=</span> _executor_factory<span class=\"token punctuation\">.</span>GraphExecutorFactoryModule<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                ir_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                raw_targets<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                graph_json<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                runtime_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                mod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                func_metadata<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            <span class=\"token keyword\">assert</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Executor \"</span> <span class=\"token operator\">+</span> executor <span class=\"token operator\">+</span> <span class=\"token string\">\" not supported\"</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">return</span> executor_factory</pre></td></tr></table></figure><p>简单看下流程：</p>\n<p><code>if not isinstance(ir_mod, (IRModule,_function.Function))</code>  检查输入模型的格式，如果不是 <code>IRModule,_function.Function</code>  中的一个，报错！</p>\n<p><code>if isinstance(ir_mod, _function.Function)</code>  则检查如果是 <code> _function.Function</code> ，则帮助将该表达式重新封装为 Relay IRModule，并提醒你不要直接把 Function 表达式传进来，而是要先封装成 IRModule</p>\n<p><code>if isinstance(autotvm.DispatchContext.current, autotvm.FallbackContext)</code>  检查是否有提前计算的最优调度.<br>\n <code>bld_mod = BuildModule()</code>  初始化一个 <code>class BuildModule(object)</code> ，如下代码。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BuildModule</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Build an IR module to run on TVM graph executor. This class is used</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    to expose the `RelayBuildModule` APIs implemented in C++.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \"\"\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>mod <span class=\"token operator\">=</span> _build_module<span class=\"token punctuation\">.</span>_BuildModule<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C++ 类：RelayBuildModule</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_graph_json <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_graph_json\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_module <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_module\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_build <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"build\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_optimize <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"optimize\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_set_params_func <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"set_params\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_params_func <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_params\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_function_metadata <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_function_metadata\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_executor_codegen_metadata <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_executor_codegen_metadata\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_devices <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_devices\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_get_irmodule <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">[</span><span class=\"token string\">\"get_irmodule\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        target<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        target_host<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        executor<span class=\"token operator\">=</span>Executor<span class=\"token punctuation\">(</span><span class=\"token string\">\"graph\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        runtime<span class=\"token operator\">=</span>Runtime<span class=\"token punctuation\">(</span><span class=\"token string\">\"cpp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        workspace_memory_pools<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        constant_memory_pools<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        params<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        mod_name<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">from</span> tvm<span class=\"token punctuation\">.</span>auto_scheduler <span class=\"token keyword\">import</span> is_auto_scheduler_enabled</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">from</span> tvm<span class=\"token punctuation\">.</span>meta_schedule <span class=\"token keyword\">import</span> is_meta_schedule_enabled</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\"># pylint: enable=import-outside-toplevel</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\"># Setup the params.</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span> params<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_set_params<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\"># Build the IR module. If auto_scheduler is not enabled,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\"># then use the TOPI-defined schedule.</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\"># Turn off AutoTVM config not found warnings if auto_scheduler is enabled.</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        old_autotvm_silent <span class=\"token operator\">=</span> autotvm<span class=\"token punctuation\">.</span>GLOBAL_SCOPE<span class=\"token punctuation\">.</span>silent</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        autotvm<span class=\"token punctuation\">.</span>GLOBAL_SCOPE<span class=\"token punctuation\">.</span>silent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            is_auto_scheduler_enabled<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> is_meta_schedule_enabled<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> old_autotvm_silent</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        mod_name <span class=\"token operator\">=</span> mangle_module_name<span class=\"token punctuation\">(</span>mod_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_build<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            target<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            target_host<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            runtime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            workspace_memory_pools<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            constant_memory_pools<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            mod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        autotvm<span class=\"token punctuation\">.</span>GLOBAL_SCOPE<span class=\"token punctuation\">.</span>silent <span class=\"token operator\">=</span> old_autotvm_silent</pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\"># Get artifacts</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        mod <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_module<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        params <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_params<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        executor_config <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_graph_json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> executor<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"graph\"</span> <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">return</span> executor_config<span class=\"token punctuation\">,</span> mod<span class=\"token punctuation\">,</span> params</pre></td></tr></table></figure><p><code>bld_mod</code>  是 Python 中的类 <code>BuildModule</code> ，在初始化的时候：<br>\n <code>self.mod = _build_module._BuildModule()</code>  将 <code>mod</code>  字段注册为 C++ 后端类 <code>RelayBuildModule</code> 。具体过程是先调用 C++ 的注册全局函数 <code>relay.build_module._BuildModule</code> ，随即调用 <code>RelayBuildModule</code>  类创建函数 <code>RelayBuildCreate</code> 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">TVM_REGISTER_GLOBAL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"relay.build_module._BuildModule\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set_body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token function\">RelayBuildCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> runtime<span class=\"token double-colon punctuation\">::</span>Module <span class=\"token function\">RelayBuildCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">auto</span> exec <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_object</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>RelayBuildModule<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Module</span><span class=\"token punctuation\">(</span>exec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>RelayBuildModule</code> Relay 模型创建类用于帮助创建 Relay IRModule。从下方 <code>RelayBuildModule</code>  类的具体内容中可以看到，该类的 <code>GetFunction()</code>  函数通过名字注册了许多函数，如 <code>get_graph_json</code> 、 <code>get_module</code> 、 <code>build</code>  等。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">RelayBuildModule</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">ModuleNode</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">RelayBuildModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  PackedFunc <span class=\"token function\">GetFunction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> String<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ObjectPtr<span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> sptr_to_self<span class=\"token punctuation\">)</span> <span class=\"token keyword\">final</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_graph_json\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">GetGraphJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_module\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">GetModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">ICHECK_EQ</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>num_args<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"list_params\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">ListParamNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_params\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">GetParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"set_params\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Constant<span class=\"token operator\">></span> params <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> kv <span class=\"token operator\">:</span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">SetParam</span><span class=\"token punctuation\">(</span>kv<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> kv<span class=\"token punctuation\">.</span>second<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_devices\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">ListDevices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_irmodule\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetIRModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_external_modules\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetExternalModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_function_metadata\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetFunctionMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"get_executor_codegen_metadata\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>executor_codegen_<span class=\"token operator\">-></span><span class=\"token function\">GetExecutorCodegenMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"optimize\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token function\">ICHECK_EQ</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>num_args<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">Optimize</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token function\">LOG</span><span class=\"token punctuation\">(</span>FATAL<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Unknown packed function: \"</span> <span class=\"token operator\">&lt;&lt;</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">PackedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sptr_to_self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>再回到 Python 前端类 <code>BuildModule</code> 。</p>\n<p>在注册 <code>self.mod</code>  为 C<ins> 类 <code>RelayBuildModule</code>  后，又将 C</ins> 类 <code>RelayBuildModule</code>  的 <code>get_graph_json</code> 、 <code>get_module</code> 、 <code>build</code>  等功能函数一一赋给自身成员：即 <code>self._get_graph_json = self.mod[&quot;get_graph_json&quot;]</code> ， <code>self._get_module = self.mod[&quot;get_module&quot;]</code> 、 <code>self._build = self.mod[&quot;build&quot;]</code>  等。</p>\n<p>也就是说 C++ 类 <code>RelayBuildModule</code>  与 Python 前端类 <code>BuildModule</code>  功能一一对应，可以视为同一个类。</p>\n<h2 id=\"编译过程-bld_modbuild\"><a class=\"anchor\" href=\"#编译过程-bld_modbuild\">#</a> 编译过程   bld_mod.build ()</h2>\n<p><img loading=\"lazy\" data-src=\"1729165916609.jpg\" alt=\"总体流程图\"></p>\n<p>继续看 <code>relay.build()</code>  函数， <code>bld_mod.build()</code>  函数完成了 Relay IRModule 编译的绝大多数流程。</p>\n<p><code>bld_mod.build()</code>  函数以 Relay IRModule  <code>ir_mod</code>  为输入，输出 runtime::Module  <code>runtime_mod</code> 。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>graph_json<span class=\"token punctuation\">,</span> runtime_mod<span class=\"token punctuation\">,</span> params <span class=\"token operator\">=</span> bld_mod<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            mod<span class=\"token operator\">=</span>ir_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            target<span class=\"token operator\">=</span>raw_targets<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            executor<span class=\"token operator\">=</span>executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            runtime<span class=\"token operator\">=</span>runtime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            workspace_memory_pools<span class=\"token operator\">=</span>workspace_memory_pools<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            constant_memory_pools<span class=\"token operator\">=</span>constant_memory_pools<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            mod_name<span class=\"token operator\">=</span>mod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如前所述， <code>bld_mod.build()</code>  函数调用的就是 C++ 类 <code>RelayBuildModule</code>  的函数 <code>build</code> 。  <code>build</code>  流程包含了将 Relay IRModule 降级为低级中间表示 TIR，然后再转换为 Runtime::Module 的过程。</p>\n<p>后续文章《【TVM】通过代码学习编译流程【4~...】》将介绍 C++ 类 <code>RelayBuildModule</code>  的 <code>build</code>  流程。</p>\n<p>接下来的 <code>_executor_factory.GraphExecutorFactoryModule()</code>  构造函数将编译后的 runtime::Module  <code>runtime_mod</code>  封装成 <code>GraphExecutorFactory</code>  类。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>executor_factory <span class=\"token operator\">=</span> _executor_factory<span class=\"token punctuation\">.</span>GraphExecutorFactoryModule<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ir_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    raw_targets<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    graph_json<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    runtime_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    mod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    func_metadata<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>该函数的参数已经提到不少了，剩下的:</p>\n<p><code>graph_json</code> ：Relay IRModule 经降级后低级中间表示 TIR Module 对应的图结构，用 json 表示。下面截取一段展示：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"nodes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>    # 节点</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token property\">\"op\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span>  # 输入节点</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token property\">\"inputs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  # 输入节点没有其他输入</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token property\">\"op\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tvm_op\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tvmgen_default_fused_layout_transform\"</span><span class=\"token punctuation\">,</span>  # layout_transform节点</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token property\">\"attrs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>  # 属性</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token property\">\"num_outputs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token property\">\"num_inputs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token property\">\"flatten_data\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token property\">\"func_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tvmgen_default_fused_layout_transform\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token property\">\"src_layout\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NCHW\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token property\">\"dst_layout\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NCHW3c\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token property\">\"hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ba3dc2c95d3171fd\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token property\">\"inputs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>  # 以<span class=\"token number\">0</span>号节点data为输入</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p><code>func_metadata</code> ：函数的元数据信息，下面是打印的某个简单模型的元数据信息，包含 workspace_sizes、constant_sizes 等，tir_primfuncs 则是一系列降级后的低级中间表示 TIR 函数。</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"tvmgen_default_fused_layout_transform\"</span><span class=\"token operator\">:</span> FunctionInfoNode(</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>workspace_sizes=<span class=\"token punctuation\">&#123;</span>llvm -keys=cpu -mtriple=x86_64-pc-linux-gnu<span class=\"token operator\">:</span> <span class=\"token number\">602112</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  constant_sizes=<span class=\"token punctuation\">&#123;</span>llvm -keys=cpu -mtriple=x86_64-pc-linux-gnu<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  tir_primfuncs=<span class=\"token punctuation\">&#123;</span>llvm -keys=cpu -mtriple=x86_64-pc-linux-gnu<span class=\"token operator\">:</span>  <span class=\"token punctuation\">[</span>一系列 @T.prim_func<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>)<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>_executor_factory.GraphExecutorFactoryModule()</code>  类构造函数如下所示。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GraphExecutorFactoryModule</span><span class=\"token punctuation\">(</span>ExecutorFactoryModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Graph executor factory module.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    This is a module of graph executor factory</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \"\"\"</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ir_mod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        target<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        executor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        graph_json_str<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        libmod<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        libmod_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        function_metadata<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">assert</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>graph_json_str<span class=\"token punctuation\">,</span> string_types<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        fcreate <span class=\"token operator\">=</span> get_global_func<span class=\"token punctuation\">(</span><span class=\"token string\">\"tvm.graph_executor_factory.create\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> params<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            args<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            args<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ndarray<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        self<span class=\"token punctuation\">.</span>ir_mod <span class=\"token operator\">=</span> ir_mod</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        self<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> target</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        self<span class=\"token punctuation\">.</span>executor <span class=\"token operator\">=</span> executor</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        self<span class=\"token punctuation\">.</span>module <span class=\"token operator\">=</span> fcreate<span class=\"token punctuation\">(</span>graph_json_str<span class=\"token punctuation\">,</span> libmod<span class=\"token punctuation\">,</span> libmod_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        self<span class=\"token punctuation\">.</span>graph_json <span class=\"token operator\">=</span> graph_json_str</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        self<span class=\"token punctuation\">.</span>lib <span class=\"token operator\">=</span> libmod</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        self<span class=\"token punctuation\">.</span>libmod_name <span class=\"token operator\">=</span> libmod_name</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        self<span class=\"token punctuation\">.</span>params <span class=\"token operator\">=</span> params</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        self<span class=\"token punctuation\">.</span>iter_cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        self<span class=\"token punctuation\">.</span>function_metadata <span class=\"token operator\">=</span> function_metadata</pre></td></tr></table></figure><p>通过 <code>get_global_func(&quot;tvm.graph_executor_factory.create&quot;)</code>  获取全局函数 —— <code>GraphExecutorFactory</code>  的构造函数 <code>fcreate</code> ，并执行，将其复制给 <code>self.module</code>  字段。</p>\n<p>在 <code>src/runtime/graph_executor/graph_executor_factory.cc</code>  路径下可以找到注册的 C++ 全局函数 <code>TVM_REGISTER_GLOBAL(&quot;tvm.graph_executor_factory.create&quot;)</code> ，如下面所示。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">TVM_REGISTER_GLOBAL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tvm.graph_executor_factory.create\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">set_body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span>NDArray<span class=\"token operator\">></span> params<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>size_t<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>string name <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">operator</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        params<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">operator</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">NDArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">auto</span> exec <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_object</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>GraphExecutorFactory<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      exec<span class=\"token operator\">-></span><span class=\"token function\">Import</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token function\">Module</span><span class=\"token punctuation\">(</span>exec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中 <code> make_object&lt;GraphExecutorFactory&gt;</code>  构建了 <code>GraphExecutorFactory</code>  类，并将 <code>args[1]</code>  注册到该类的 <code>std::vector&lt;Module&gt; imports_;</code>  字段底下。该字段存储当前模型所依赖的其他 runtime::Module，而 <code>args[1]</code>  指的是 <code>fcreate(graph_json_str, libmod, libmod_name, *args)</code>  函数的 <code>libmod</code>  参数，即前述 runtime::Module  <code>runtime_mod</code> 。</p>\n<p>所以  <code>GraphExecutorFactory</code>  类 依赖于 Relay IRModule 经【relay -&gt; tir】【tir -&gt; runtime】过程得到的  <code>runtime_mod</code> 。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "tvm",
                "compile"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/10/13/tvm02/",
            "url": "https://forcheetah.github.io/2024/10/13/tvm02/",
            "title": "【TVM】通过代码学习编译流程【2】模型转换",
            "date_published": "2024-10-13T12:29:30.047Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本系列文章将从代码和流程图入手，详细介绍 TVM AI 编译器的编译流程。本文章为第二篇，对应的 TVM 版本为当前最新版本 1.7。</p>\n<p>网络上有不少 TVM 工程的教程资源，如果本博客也是其他教程的简单重复的话，则网络的角落里又多了一份纯粹的空间占用者。所以我在想，本文章有什么特点才值得一看呢？我觉得有两个优点: 1、本文从代码出发，不会泛泛而谈，能够从细节了解 TVM；2、自认为结构流程图画的不错，能够从整体上把握 TVM 的脉络。所以，也许值得一看呢。</p>\n<p>本篇文章以 onnx 为例，介绍主流模型转换为 TVM 高级中间表示 Relay IR 的过程。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"onnx结构\"><a class=\"anchor\" href=\"#onnx结构\">#</a> Onnx 结构</h1>\n<p>先来了解一下 onnx 模型的结构信息：下图是一个简单的 onnx 模型的结构（只选取了代表性的一部分）</p>\n<p>全局信息：  版本信息： <code>ir_version: 7</code>  ； 来源： <code>producer_name: &quot;pytorch&quot;</code>    来源版本 ： <code>producer_version: &quot;2.1.0&quot;</code> <br>\n 图信息：包含在 graph 字段中。</p>\n<ul>\n<li>节点信息 node：指明输入 input 输出 output 张量，本身的名字 name，节点类型 type，参数信息 attribute</li>\n<li>张量信息 initializer：维度 dims，类型信息 data_type，名字 name，具体数值 raw_data。</li>\n<li>输入张量 input</li>\n<li>输出张量 output</li>\n</ul>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ir_version<span class=\"token operator\">:</span> <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>producer_name<span class=\"token operator\">:</span> <span class=\"token string\">\"pytorch\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>producer_version<span class=\"token operator\">:</span> <span class=\"token string\">\"2.1.0\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>graph <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  node <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    input<span class=\"token operator\">:</span> <span class=\"token string\">\"start\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    input<span class=\"token operator\">:</span> <span class=\"token string\">\"onnx::Conv_28\"</span>    # kernal</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    input<span class=\"token operator\">:</span> <span class=\"token string\">\"onnx::Conv_29\"</span>    # bias</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    output<span class=\"token operator\">:</span> <span class=\"token string\">\"/conv1/Conv_output_0\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"/conv1/Conv\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    op_type<span class=\"token operator\">:</span> <span class=\"token string\">\"Conv\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    attribute <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"dilations\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      type<span class=\"token operator\">:</span> INTS</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    attribute <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"group\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      i<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      type<span class=\"token operator\">:</span> INT</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    attribute <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"kernel_shape\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      type<span class=\"token operator\">:</span> INTS</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    attribute <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"pads\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      ints<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      type<span class=\"token operator\">:</span> INTS</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  node <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    input<span class=\"token operator\">:</span> <span class=\"token string\">\"/conv1/Conv_output_0\"</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    output<span class=\"token operator\">:</span> <span class=\"token string\">\"/relu1/Relu_output_0\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"/relu1/Relu\"</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    op_type<span class=\"token operator\">:</span> <span class=\"token string\">\"Relu\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  initializer <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    dims<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    dims<span class=\"token operator\">:</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    data_type<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"fc.weight\"</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    raw_data<span class=\"token operator\">:</span> <span class=\"token string\">\"]&amp;\\212>`\\201\\213\\274@\\227\\224\\275\\274\\331p\\276b@N>\\017\\305\\223>&amp;&amp;\\263\\276(UD=\\300\\257q\\275\\320\\231\\246\\275\\320\\341\\276=\\372\\273&#125;>C\\226\\236> e)\\275\\357\\222\\236>\\212\\\\8>\"</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  initializer <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    dims<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    data_type<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"fc.bias\"</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    raw_data<span class=\"token operator\">:</span> <span class=\"token string\">\"\\3451\\232\\276\\200\\247(=\"</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  input <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"start\"</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    type <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      tensor_type <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        elem_type<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        shape <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  output <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"end\"</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    type <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      tensor_type <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        elem_type<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        shape <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>          dim <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            dim_value<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>opset_import <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  version<span class=\"token operator\">:</span> <span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"python脚本\"><a class=\"anchor\" href=\"#python脚本\">#</a> Python 脚本</h1>\n<p>这里提供一个简单的 Python 脚本，调用 TVM Python 前端，实现 onnx 模型的编译过程。tvm 通过代码学习编程流程系列文章将基本采用这个脚本帮助追踪代码。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> onnx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> tvm<span class=\"token punctuation\">.</span>relay <span class=\"token keyword\">as</span> relay</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> tvm</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> tvm<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> graph_executor</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">######################################    路径信息    ##########################################</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>model_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/resnet18.onnx\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>save_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/module/pythonSave/\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>onnx_model <span class=\"token operator\">=</span> onnx<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>model_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">##################################    图片信息    ##############################################</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>img_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/home/xianmu/.tvm_test_data/data/imagenet_cat.png\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Resize it to 224x224</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>resized_image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>img_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>asarray<span class=\"token punctuation\">(</span>resized_image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># Our input image is in HWC layout while ONNX expects CHW input, so convert the array</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>img_data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Normalize according to the ImageNet input specification</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>imagenet_mean <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.485</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.406</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>imagenet_stddev <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.229</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.225</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>norm_img_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>img_data <span class=\"token operator\">/</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> imagenet_mean<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> imagenet_stddev</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># Add the batch dimension, as we are expecting 4-dimensional input: NCHW.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>img_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>norm_img_data<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">####################################     模型编译     ###########################################</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>input_name <span class=\"token operator\">=</span> <span class=\"token string\">\"data\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>target <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>Target<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">\"llvm\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>shape_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>input_name<span class=\"token punctuation\">:</span> img_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>mod<span class=\"token punctuation\">,</span> params <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>frontend<span class=\"token punctuation\">.</span>from_onnx<span class=\"token punctuation\">(</span>onnx_model<span class=\"token punctuation\">,</span> shape_dict<span class=\"token punctuation\">,</span> export_node_renamed_model_path<span class=\"token operator\">=</span>save_path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建 IRModule  高级 Relay IR</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">with</span> tvm<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>PassContext<span class=\"token punctuation\">(</span>opt_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    lib <span class=\"token operator\">=</span> relay<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> target<span class=\"token operator\">=</span>target<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 创建 GraphExecutorFactoryModule  </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">#######################################     模型保存      ########################################</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># save</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># 保存编译后的库文件（.so）</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>lib_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.so\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>lib<span class=\"token punctuation\">.</span>get_lib<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>export_library<span class=\"token punctuation\">(</span>lib_fname<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># 保存模型参数（.params）</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>params_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.params\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>params_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> param_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    param_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>relay<span class=\"token punctuation\">.</span>save_param_dict<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_params<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># 保存 JSON 格式的计算图（.json）</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>json_fname <span class=\"token operator\">=</span> save_path <span class=\"token operator\">+</span> <span class=\"token string\">\"mod.json\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>json_fname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> json_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    json_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>get_executor_config<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>dev <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>module <span class=\"token operator\">=</span> graph_executor<span class=\"token punctuation\">.</span>GraphModule<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">[</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># graph_executor.GraphModule</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">############################       运行    ##########################################</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>module<span class=\"token punctuation\">.</span>set_input<span class=\"token punctuation\">(</span>input_name<span class=\"token punctuation\">,</span> img_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>module<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>output_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>tvm_output <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>get_output<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tvm_output<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这段代码实现了一个 onnx 格式的 resnet18 模型进行：模型编译、模型保存、模型推理运行的过程。本篇文章介绍模型编译过程中的模型转换部分，也就是 <code>relay.frontend.from_onnx</code>  函数，它将 onnx 模型转化为 TVM 的高级 IR：Relay IR。<br>\n下图是 <code>relay.frontend.from_onnx</code>  函数整体结构流程图，在后面的详细介绍中会截取部分进行展示。</p>\n<p><img loading=\"lazy\" data-src=\"1728821938299.jpg\" alt=\"总体流程图\"></p>\n<h1 id=\"模型转换流程\"><a class=\"anchor\" href=\"#模型转换流程\">#</a> 模型转换流程</h1>\n<p><img loading=\"lazy\" data-src=\"1728822135202.jpg\" alt=\"分图\"></p>\n<p><code>mod, params = relay.frontend.from_onnx(onnx_model, shape_dict)</code>  函数将一个 onnx model 转换成对等的 Relay module。</p>\n<p>首先看下这个函数的参数：</p>\n<p>其中 <code>freeze_params</code>  参数为布尔类型，当为 true 的时候，神经网络模型中的 weight 和 bias 以及 shape 等 Tensor 会被固化到 TVM 将要转换的 IRModule 模型当中，作为 Constants，这种情况下 TVM 的优化可以更加激进， <code>from_onnx()</code>  函数返回的 params 字典不再需要保存这些参数（为空）；当为 False 的时候，weight 和 bias 以及 shape 等 Tensor 会作为变量 variables，后续过程中可以修改、替换这些 tensor，这些 Tensor 会收集起来从 params 字典中返回。 因此建议该参数定为 True。</p>\n<p><code>export_node_renamed_model_path</code>  参数为字符串，因为有时输入模型的节点缺少 name，TVM 会生成新的节点名字，并将更改节点名字的 onnx 模型输出出来。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">from_onnx</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    model<span class=\"token punctuation\">,</span>          <span class=\"token comment\"># onnx 模型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    shape<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\"># 输入 Tensor 的 shape</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    dtype<span class=\"token operator\">=</span><span class=\"token string\">\"float32\"</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># 输入 Tensor 的 type</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    opset<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># onnx 版本</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    freeze_params<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    convert_config<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    export_node_renamed_model_path<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p><code>from_onnx()</code>  函数完成了输入模型的检查校验，之后的关键代码为 <code>mod, params = g.from_onnx(graph, opset)</code>  ，也就是结构流程图中的 <code>GraphProto.from_onnx()</code> 。</p>\n<p><code>GraphProto.from_onnx()</code>  函数具体的完成了 onnx 模型转 Relay IRModule 的过程。过程看下方代码。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">from_onnx</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">,</span> opset<span class=\"token punctuation\">,</span> get_output_expr<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        self<span class=\"token punctuation\">.</span>opset <span class=\"token operator\">=</span> opset</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_parse_graph_initializers<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_parse_graph_input<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_check_user_inputs_in_outermost_graph_scope<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_check_for_unsupported_ops<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_construct_nodes<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># now return the outputs</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>_parse_value_proto<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        outputs <span class=\"token operator\">=</span> outputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> _expr<span class=\"token punctuation\">.</span>Tuple<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> get_output_expr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> outputs</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        free_vars <span class=\"token operator\">=</span> analysis<span class=\"token punctuation\">.</span>free_vars<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        nodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>v<span class=\"token punctuation\">:</span> k <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        free_vars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>nodes<span class=\"token punctuation\">[</span>var<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> var <span class=\"token keyword\">in</span> free_vars<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> i_name <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            i_name <span class=\"token keyword\">in</span> free_vars <span class=\"token keyword\">and</span> i_name <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_inputs<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                self<span class=\"token punctuation\">.</span>_inputs<span class=\"token punctuation\">[</span>i_name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>i_name<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\"># Create a function from our output expression and all input variables.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        func <span class=\"token operator\">=</span> _function<span class=\"token punctuation\">.</span>Function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>v <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_inputs<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> IRModule<span class=\"token punctuation\">.</span>from_expr<span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_params</pre></td></tr></table></figure><p><code>self._parse_graph_initializers(graph)</code>  函数将 onnx 模型中的 tensor 转换为 constant 节点，装进字典 node 中。代码中 <code>_expr.const(array)</code>  一路调用 <code>Constant()</code> ， <code>_ffi_api.Constant</code> ，将 tensor 转换为 C++ 后端中的 <code>Constant</code>  类。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">_parse_graph_initializers</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Parse network inputs to relay, aka parameters.\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> init_tensor <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">.</span>initializer<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Tensor's name is required.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        array <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_parse_array<span class=\"token punctuation\">(</span>init_tensor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>_freeze_params<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _expr<span class=\"token punctuation\">.</span>const<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">[</span>init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new_var<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                shape<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">[</span>init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                dtype<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">[</span>init_tensor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>self._parse_graph_input(graph)</code>  函数作用是指定图的输入节点。</p>\n<p><code>self._check_user_inputs_in_outermost_graph_scope()</code>  函数用来检查 shape 定义的 tensor 都已经声明。</p>\n<p><code>self._check_for_unsupported_ops(graph)</code>  函数检查所有的算子是否位于支持列表中。</p>\n<p><code>self._construct_nodes(graph)</code>  函数不仅将 onnx 节点转换乘 tvm 算子，还在遍历节点的过程中生成 tvm 抽象语法树。下面是函数具体过程：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">_construct_nodes</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Nodes are stored as directed acyclic graph.\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        op_name <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>op_type</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        attr <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_parse_attr<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>attribute<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># Fill in span of inputs</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        node_source_name <span class=\"token operator\">=</span> get_source_name<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_op_type_dict<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_set_parameter_span<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> node_source_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># Create and populate input list.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        inputs <span class=\"token operator\">=</span> onnx_input<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> i <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                inputs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>_renames<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                inputs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        i_name <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_parse_value_proto<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        node_output <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_fix_outputs<span class=\"token punctuation\">(</span>op_name<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"tvm_custom\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"tvm_custom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i_name</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"tvm_custom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"num_outputs\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        op <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_convert_operator<span class=\"token punctuation\">(</span>op_name<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>opset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span> _expr<span class=\"token punctuation\">.</span>TupleWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            outputs_num <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            outputs_num <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> outputs_num <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            op <span class=\"token operator\">=</span> fold_constant<span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            op <span class=\"token operator\">=</span> _expr<span class=\"token punctuation\">.</span>TupleWrapper<span class=\"token punctuation\">(</span>fold_constant<span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">.</span>astuple<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        op <span class=\"token operator\">=</span> set_span<span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span> node_source_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> outputs_num <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\"># ONNX supports optional outputs for some nodes.</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\"># This block searches for missing outputs in the ONNX graph</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\"># and removes any unneeded ops</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            valid_outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> outputs_num</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> output <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token keyword\">if</span> output <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    valid_outputs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\"># If we have outputs ONNX isn't expecting, we need to drop them</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>valid_outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                tup <span class=\"token operator\">=</span> op<span class=\"token punctuation\">.</span>astuple<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token comment\"># TupleWrapper can also wrap ops with TupleType outputs</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>tup<span class=\"token punctuation\">,</span> _expr<span class=\"token punctuation\">.</span>Tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token comment\"># For tuples, we extract the fields instead of using GetTupleItem</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>tup<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> valid <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>valid_outputs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> valid<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token comment\"># For call nodes, we need to GetTupleItem</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>op<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> valid <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>valid_outputs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> valid<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token comment\"># Create the new op with valid outputs</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    op <span class=\"token operator\">=</span> outputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token keyword\">elif</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> outputs_num<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    op <span class=\"token operator\">=</span> _expr<span class=\"token punctuation\">.</span>TupleWrapper<span class=\"token punctuation\">(</span>_expr<span class=\"token punctuation\">.</span>Tuple<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token comment\"># Drop invalid outputs for the onnx node</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                outputs_num <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                node_output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>output <span class=\"token keyword\">for</span> output <span class=\"token keyword\">in</span> node_output <span class=\"token keyword\">if</span> output <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">assert</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> outputs_num</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Number of output mismatch </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> vs </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>outputs_num<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> in </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>op_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">if</span> outputs_num <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>node_output<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> op</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>node_output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                self<span class=\"token punctuation\">.</span>_nodes<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> op<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>从 <code>self._construct_nodes(graph)</code>  函数代码中可以看到，首先遍历所有图节点 <code>node</code> ，通过 <code>self._parse_attr()</code>  函数将节点的所有属性信息构造为 tvm 的 attr 算子，再根据算子类型 <code>op_name</code> 、输入 <code>inputs</code> , 和属性 <code>attr</code> ，通过函数 <code>self._convert_operator(op_name, inputs, attr, self.opset)</code>  创建 tvm 算子。这个过程中自然形成了 tvm 的抽象语法树，构造了所有算子的连接关系。其中还有一些细节：比如当一个算子的输出 tensor 有多个时，会在该算子后面添加一个元组算子 <code>_expr.TupleWrapper()</code> .</p>\n<p><img loading=\"lazy\" data-src=\"1728822347896.jpg\" alt=\"子图2\"></p>\n<p>我们着重看一下函数 <code>self._convert_operator()</code> ，也就是算子转换函数。它将卷积、池化、全链接等这些算子包装为 tvm 中的一个 <code>CallNode</code>  算子。参数 <code>op_name</code>  指明算子的类型，如 Convolution, FullyConnected， <code>inputs</code>  是前述存储在 <code>self._nodes</code>  字典中其他算子， <code>attrs</code>  是前述刚转换的属性， <code>Opset</code>  是 onnx 算子版本号。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">_convert_operator</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> op_name<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">,</span> opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Convert ONNX operator into a Relay operator.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    The converter must specify conversions explicitly for incompatible name, and</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    apply handlers to operator attributes.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Parameters</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ----------</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    op_name : str</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        Operator name, such as Convolution, FullyConnected</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    inputs : list of tvm.relay.function.Function</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        List of inputs.</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    attrs : dict</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        Dict of operator attributes</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    opset : int</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        Opset version</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Returns</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    -------</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    sym : tvm.relay.function.Function</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        Converted relay function</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    \"\"\"</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    convert_map <span class=\"token operator\">=</span> _get_convert_map<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> op_name <span class=\"token keyword\">in</span> _identity_list<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        sym <span class=\"token operator\">=</span> get_relay_op<span class=\"token punctuation\">(</span>op_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>inputs<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>attrs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">elif</span> op_name <span class=\"token keyword\">in</span> convert_map<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        sym <span class=\"token operator\">=</span> convert_map<span class=\"token punctuation\">[</span>op_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">raise</span> NotImplementedError<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Operator </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>op_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> not implemented.\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> sym</pre></td></tr></table></figure><p>通过 <code>_get_convert_map()</code>  函数获取转换字典，我们截取该函数部分内容。以卷积为例，CONV 算子通过 <code>Conv.get_converter(opset)</code>  函数获取卷积的转换函数。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">_get_convert_map</span><span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\"># defs/experimental</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"Identity\"</span><span class=\"token punctuation\">:</span> Renamer<span class=\"token punctuation\">(</span><span class=\"token string\">\"copy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"Optional\"</span><span class=\"token punctuation\">:</span> Optional_<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">\"OptionalHasElement\"</span><span class=\"token punctuation\">:</span> OptionalHasElement<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">\"OptionalGetElement\"</span><span class=\"token punctuation\">:</span> OptionalGetElement<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"Affine\"</span><span class=\"token punctuation\">:</span> Affine<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># Bitwise operators</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\"BitShift\"</span><span class=\"token punctuation\">:</span> BitShift<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"BitwiseAnd\"</span><span class=\"token punctuation\">:</span> BitwiseAnd<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">\"BitwiseNot\"</span><span class=\"token punctuation\">:</span> BitwiseNot<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">\"BitwiseOr\"</span><span class=\"token punctuation\">:</span> BitwiseOr<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token string\">\"BitwiseXor\"</span><span class=\"token punctuation\">:</span> BitwiseXor<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token string\">\"ThresholdedRelu\"</span><span class=\"token punctuation\">:</span> ThresholdedRelu<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token string\">\"ScaledTanh\"</span><span class=\"token punctuation\">:</span> ScaledTanh<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token string\">\"AveragePool\"</span><span class=\"token punctuation\">:</span> AveragePool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token string\">\"LpPool\"</span><span class=\"token punctuation\">:</span> LpPool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token string\">\"GlobalLpPool\"</span><span class=\"token punctuation\">:</span> GlobalLpPool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token string\">\"MaxPool\"</span><span class=\"token punctuation\">:</span> MaxPool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token string\">\"MaxUnpool\"</span><span class=\"token punctuation\">:</span> MaxUnpool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token string\">\"Conv\"</span><span class=\"token punctuation\">:</span> Conv<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token string\">\"ConvTranspose\"</span><span class=\"token punctuation\">:</span> ConvTranspose<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token string\">\"GlobalAveragePool\"</span><span class=\"token punctuation\">:</span> GlobalAveragePool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token string\">\"GlobalMaxPool\"</span><span class=\"token punctuation\">:</span> GlobalMaxPool<span class=\"token punctuation\">.</span>get_converter<span class=\"token punctuation\">(</span>opset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>TVM 先尝试从 <code>_identity_list:</code>  列表中获取转换方法，开发这如果需要添加自定义算子，可以考虑在该列表中添加，当前我们不用考虑这个列表。之后 TVM 从获取转换方法并执行 <code>convert_map[op_name](inputs, attrs, self._params)</code> ，仍然以卷积为例，执行的是下面类 <code>class Conv(OnnxOpConverter)</code>  中的 <code>def _impl_v1(cls, inputs, attr, params)</code>  方法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Conv</span><span class=\"token punctuation\">(</span>OnnxOpConverter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"Operator converter for Conv.\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">_impl_v1</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># Use shape of input to determine convolution type.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        data <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        kernel <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        input_shape <span class=\"token operator\">=</span> infer_shape<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        ndim <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        kernel_type <span class=\"token operator\">=</span> infer_type<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        kernel_shapes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>get_const_tuple<span class=\"token punctuation\">(</span>kernel_type<span class=\"token punctuation\">.</span>checked_type<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token string\">\"kernel_shape\"</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> attr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"kernel_shape\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> kernel_shapes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token string\">\"auto_pad\"</span> <span class=\"token keyword\">in</span> attr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"SAME_UPPER\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SAME_LOWER\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\"># Warning: Convolution does not yet support dynamic shapes,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\"># one will need to run dynamic_to_static on this model after import</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                data <span class=\"token operator\">=</span> autopad<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    attr<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"strides\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>ndim <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"kernel_shape\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    attr<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"dilations\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>ndim <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    mode<span class=\"token operator\">=</span>attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">elif</span> attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"VALID\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"pads\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>ndim <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">elif</span> attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"NOTSET\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                msg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token string-interpolation\"><span class=\"token string\">f'Value </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> in attribute \"auto_pad\" of operator Conv '</span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token string-interpolation\"><span class=\"token string\">f\"is invalid.\"</span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">raise</span> tvm<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">.</span>OpAttributeInvalid<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            attr<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">\"auto_pad\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        attr<span class=\"token punctuation\">[</span><span class=\"token string\">\"channels\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> kernel_shapes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        out <span class=\"token operator\">=</span> AttrCvt<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            op_name<span class=\"token operator\">=</span>dimension_picker<span class=\"token punctuation\">(</span><span class=\"token string\">\"conv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            transforms<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token string\">\"kernel_shape\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"kernel_size\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token string\">\"dilations\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"dilation\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token string\">\"pads\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"padding\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token string\">\"group\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"groups\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            custom_check<span class=\"token operator\">=</span>dimension_constraint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        use_bias <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">if</span> use_bias<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            out <span class=\"token operator\">=</span> _op<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>bias_add<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> out</pre></td></tr></table></figure><p>其中 <code>AttrCvt()</code>  函数经过多层调用（见结构流程图），最终调用了 C++ 后端通过 <code>TVM_REGISTER_GLOBAL(&quot;relay.op.nn._make.conv2d&quot;)</code>  注册的 <code>MakeConv&lt;Conv2DAttrs&gt;()</code>  函数，该函数创建一个包含卷积所有信息的 <code>CallNode</code>  算子，见下面代码 <code>return Call(op, &#123;data, weight&#125;, Attrs(attrs), &#123;&#125;);</code> ，该函数位于 <code>/home/xianmu/CProject/tvm/src/relay/op/nn/convolution_make.h</code> 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">inline</span> Expr <span class=\"token function\">MakeConv</span><span class=\"token punctuation\">(</span>Expr data<span class=\"token punctuation\">,</span> Expr weight<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>IndexExpr<span class=\"token operator\">></span> strides<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>IndexExpr<span class=\"token operator\">></span> padding<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                     Array<span class=\"token operator\">&lt;</span>IndexExpr<span class=\"token operator\">></span> dilation<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> groups<span class=\"token punctuation\">,</span> IndexExpr channels<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                     Array<span class=\"token operator\">&lt;</span>IndexExpr<span class=\"token operator\">></span> kernel_size<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string data_layout<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                     std<span class=\"token double-colon punctuation\">::</span>string kernel_layout<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string out_layout<span class=\"token punctuation\">,</span> DataType out_dtype<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                     std<span class=\"token double-colon punctuation\">::</span>string op_name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">auto</span> attrs <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">make_object</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  attrs<span class=\"token operator\">-></span>strides <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>strides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  attrs<span class=\"token operator\">-></span>padding <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>padding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  attrs<span class=\"token operator\">-></span>dilation <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>dilation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  attrs<span class=\"token operator\">-></span>groups <span class=\"token operator\">=</span> groups<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  attrs<span class=\"token operator\">-></span>channels <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  attrs<span class=\"token operator\">-></span>kernel_size <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>kernel_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  attrs<span class=\"token operator\">-></span>data_layout <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>data_layout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  attrs<span class=\"token operator\">-></span>kernel_layout <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>kernel_layout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  attrs<span class=\"token operator\">-></span>out_layout <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>out_layout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  attrs<span class=\"token operator\">-></span>out_dtype <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>out_dtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">const</span> Op<span class=\"token operator\">&amp;</span> op <span class=\"token operator\">=</span> <span class=\"token class-name\">Op</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>op_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">Call</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Attrs</span><span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"1728822492980.jpg\" alt=\"子图3\"></p>\n<p>到这里模型拓扑结构就算建立完成了。让我们再回到 <code>GraphProto.from_onnx()</code>  函数。前述过程就像是搭积木，搭完这个拓扑结构之后，调用函数 <code>_function.Function([v for k, v in self._inputs.items()], outputs)</code>  将图结构封装成 <code>tvm.relay.Function</code>  表达式，位于 <code>/home/xianmu/CProject/tvm/include/tvm/relay/function.h</code> 。 <code>tvm.relay.Function</code>  是一个有输入输出的表达式集合。</p>\n<p>最后一步，通过 <code>IRModule.from_expr(func)</code>  函数，创建 tvm 高级 IR：Relay IRModule。整个调用过程在结构流程图中给出。下面是类  <code>IRModule</code>  的属性信息， <code>tvm.relay.Function</code>  就存储在 <code>IRModuleNode</code>  的 <code>Map&lt;GlobalVar, BaseFunc&gt; functions;</code>  字段下。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">IRModuleNode</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">/*! \\brief A map from ids to all global functions. */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span>GlobalVar<span class=\"token punctuation\">,</span> BaseFunc<span class=\"token operator\">></span> functions<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">/*! \\brief A map from global type vars to ADT type data. */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span>GlobalTypeVar<span class=\"token punctuation\">,</span> TypeData<span class=\"token operator\">></span> type_definitions<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">/*! \\brief The source map for the module. */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  SourceMap source_map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">/* \\brief Additional attributes storing meta-data about the module. */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  DictAttrs attrs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">/*! \\brief Globally static object that are referred by the IR itself */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Array<span class=\"token operator\">&lt;</span>GlobalInfo<span class=\"token operator\">>></span> global_infos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">/*!</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   * \\brief A map from string names to global variables that</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   * ensures global uniqueness.</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   */</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> GlobalVar<span class=\"token operator\">></span> global_var_map_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">/*! \\brief A map from string names to global type variables (ADT names)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   * that ensures global uniqueness.</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   */</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> GlobalTypeVar<span class=\"token operator\">></span> global_type_var_map_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">/*! \\brief A map from constructor tags to constructor objects</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   * for convenient access</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   */</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int32_t</span><span class=\"token punctuation\">,</span> Constructor<span class=\"token operator\">></span> constructor_tag_map_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">/*! \\brief The files previously imported, required to ensure</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      importing is idempotent for each module.</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   */</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unordered_set<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> import_set_<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>到此，tvm 的 <code>relay.frontend.from_onnx(onnx_model, shape_dict)</code>  函数已经介绍完毕，它将一个 onnx model 转换成对等的 Relay module。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "tvm",
                "compile"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/10/10/tvm01/",
            "url": "https://forcheetah.github.io/2024/10/10/tvm01/",
            "title": "【TVM】通过代码学习编译流程【1】必要知识",
            "date_published": "2024-10-10T12:12:43.910Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本系列文章将从代码和流程图入手，详细介绍 TVM AI 编译器的编译流程。本文章为第一篇，取名为 “必要知识”，约等于 “大杂烩”。食之无味，弃之可惜。但基于我个人的主观喜好和偏见，这些知识值得在整个代码讲解之前声明。</p>\n<p>作为初学者，错误在所难免，还望不吝赐教。</p>\n<h1 id=\"工程结构\"><a class=\"anchor\" href=\"#工程结构\">#</a> 工程结构</h1>\n<p><a href=\"https://github.com/apache/tvm\">TVM</a> 主要由 C++ 语言和 Python 语言实现。</p>\n<ul>\n<li>\n<p>a.TVM C++ 后端核心代码   位于 /home/user/tvm/src<br>\nC++ 后端核心代码的功能是生成 <a href=\"http://libtvm.so\">libtvm.so</a> libtvm_runtime.so，分别是模型编译过程中的需要的 libtvm.so 库，和模型部署运行时需要的 libtvm_runtime.so 库。对应的头文件位于 /home/user/tvm/include.</p>\n<ul>\n<li>1. 其中 src/runtime 是模型部署相关 CPP 文件\n<ul>\n<li>src/runtime/graph_executor   最基本的图执行器</li>\n<li>src/runtime/module.cpp          运行时 Module 基类</li>\n<li>src/runtime/contrib                  BYOC 第三方设备运行及实现  包括 dnnl cblas cudnn ethosu 等等</li>\n<li>srd/runtime/cuda                    CUDA 运行时 Module</li>\n<li>还有其他设备的运行时 Module  如 opencl  hexagon   metal 等，以及一些接口文件</li>\n</ul>\n</li>\n<li>2.src/relay 是 TVM 高级中间表示 IR 的相关 CPP 文件</li>\n<li>3.src/relax TVM 正在发展的高级中间表示 IR，功能上等同于 Relay</li>\n<li>4.src/te      TVM 的 TE 表达式</li>\n<li>5.src/topi   算子的计算定义和后端调度</li>\n<li>6.src/tir      TVM 低级中介表示 IR，接近于硬件表示</li>\n<li>7.src/auto_shedule  TVM 自动优化调度相关</li>\n</ul>\n</li>\n<li>\n<p>b. TVM Python 前端代码      位于 /home/user/tvm/python<br>\nPython 前端代码为 C++ API 和执行编译的驱动代码，提供 Python 绑定。</p>\n</li>\n</ul>\n<p>表面上看 TVM 工程应当是 Python 前端调用 C++ 后端生成的 <a href=\"http://libtvm.so\">libtvm.so</a> libtvm_runtime.so ，实际上 TVM 支持 Python 和 C++ 的相互调用。例如一些算子的 compute 计算公式和 schedule 调度位于 Python 代码中，由 C++ 进行调用。</p>\n<p>在编译阶段，开发者编写 Python 代码，调用 TVM Python 前端，而 TVM 的 Python 前端又依赖于 C++ 后端生成的 libtvm.so libtvm_runtime.so 动态库。</p>\n<p>部署运行阶段即可以编写 Python 来执行，也可以直接编译 C++ 为可执行文件，参考<a href=\"https://github.com/ForCheetah/TvmCppDeploy\"> TVM C++ 部署</a></p>\n<h1 id=\"编译\"><a class=\"anchor\" href=\"#编译\">#</a> 编译</h1>\n<p>编译过程可以参考 TVM 英文文档和中文文档。文档中内容全面，这里只摘必要步骤，是最简单的部署安装方式。</p>\n<p>1. 编译 <a href=\"http://libtvm.so\">libtvm.so</a> libtvm_runtime.so</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build  <span class=\"token comment\"># 下载工程后进入工程目录 创新文件夹</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cp</span> cmake/config.cmake ./build</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># 将 cmake 配置文件拷贝到 build 目录，可以更改需要的额配置选项</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token parameter variable\">-j32</span></pre></td></tr></table></figure><p>2. 配置临时运行环境</p>\n<p>个人喜欢用临时环境运行项目，可以避免 .bashrc 文件中添加过多环境路径；特别是开发人员有多个 TVM 项目的时候，可以避免项目的混淆。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 指定 tvm 库路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/home/user/tvm/build:<span class=\"token environment constant\">$PATH</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 指定 tvm Python 路径</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">PYTHONPATH</span><span class=\"token operator\">=</span>/home/user/tvm/python:<span class=\"token variable\">$&#123;PYTHONPATH&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 运行</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>python3 ***.py</pre></td></tr></table></figure><h1 id=\"tvm-基类\"><a class=\"anchor\" href=\"#tvm-基类\">#</a> TVM 基类</h1>\n<p>大概从事工程项目开发的人员对 Object, ObjectPtr, ObjectRef 等写法相对熟悉，但是没有相关经验的算法研究人员，还是先认识一下 TVM 中的这三个基类。</p>\n<p>TVM 中大部分类都继承自三大基础类   Object, ObjectPtr, ObjectRef。想多了解一下的话，可以学习博客<a href=\"https://zhuanlan.zhihu.com/p/656435385\"> TVM: Object, ObjectPtr, ObjectRef (以 tir.sch 为例)</a> 。</p>\n<p>可能比较粗显的总结一下：TVM 中以 &quot;Node&quot; 结尾的类是 Object 的派生类，去掉 &quot;Node&quot; 的类是 ObjectRef 的派生类，Object 的派生类负责 &quot;做事&quot;，ObjectRef 的派生类方便程序员引用，ObjectPtr 是桥梁。但总之这三者是一个东西（刚学时我就被这搞晕了：(  ）。</p>\n<p>举例说明如何使用 TVM 的三大基础类构造对象:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Anode</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Object</span></span><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">Anode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">~</span><span class=\"token function\">Anode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token string\">\"instance\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">ObjectRef</span></span><span class=\"token punctuation\">&#123;</span>       </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">TVM_DEFINE_MUTABLE_OBJECT_REF_METHODS</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span>ObjectRef<span class=\"token punctuation\">,</span> Anode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span>ObjectPtr<span class=\"token operator\">&lt;</span>Anode<span class=\"token operator\">></span> n <span class=\"token operator\">=</span> tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_object</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Anode<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 桥梁 Ptr = make_object (本体 node)    </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   A <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指针</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   ref<span class=\"token operator\">-></span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// Anode 指针，可以引用 a ()</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token comment\">//ref.get ()->a (); // 基类 Object 指针，error Object has no member a ()</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"1728562036320.jpg\" alt=\"Object 应用例子\"></p>\n<p>可以再看一下 TVM 工程中的例子，这段代码创建了本体 <code>CallNode</code> ，通过 make_object 生成桥梁 <code>ObjectPtr&lt;CallNode&gt;</code> ，最后赋值给指针 <code>Call</code>  的 <code>data_</code> 字段。</p>\n<h1 id=\"python和c相互调用\"><a class=\"anchor\" href=\"#python和c相互调用\">#</a> Python 和 C++ 相互调用</h1>\n<p>TVM 实现了 FFI (Foreign Function Interface) 机制，目标是使得任意语言下定义的函数都可以被任意其他语言调用。</p>\n<p>宏 TVM_REGISTER_GLOBAL</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * \\brief Register a function globally.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * \\code</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *   TVM_REGISTER_GLOBAL(\"MyPrint\")</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *   .set_body([](TVMArgs args, TVMRetValue* rv) &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *   &#125;);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * \\endcode</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">TVM_REGISTER_GLOBAL</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>OpName<span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token expression\"><span class=\"token function\">TVM_STR_CONCAT</span><span class=\"token punctuation\">(</span>TVM_FUNC_REG_VAR_DEF<span class=\"token punctuation\">,</span> __COUNTER__<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token double-colon punctuation\">::</span>tvm<span class=\"token double-colon punctuation\">::</span>runtime<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Registry</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span>OpName<span class=\"token punctuation\">)</span></span></pre></td></tr></table></figure><p>在 C++ 后端同过 “TVM_REGISTER_GLOBAL” 这个宏将函数注册为全局函数，该全局函数的类型为 PackedFunc。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">TVM_REGISTER_GLOBAL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tvm.graph_executor_factory.create\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 注册为全局函数 PackedFunc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">set_body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> <span class=\"token function\">Module</span><span class=\"token punctuation\">(</span>exec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 Python 前端可以通过 get_global_func () 函数来获取全局函数 PackedFunc 并执行</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fcreate <span class=\"token operator\">=</span> get_global_func<span class=\"token punctuation\">(</span><span class=\"token string\">\"tvm.graph_executor_facttory.create\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>self<span class=\"token punctuation\">.</span>module <span class=\"token operator\">=</span> fcreate<span class=\"token punctuation\">(</span>graph_json_str<span class=\"token punctuation\">,</span> libmod<span class=\"token punctuation\">,</span> libmod_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 C++ 端也可以通过名字获取 全局函数 PackedFunc</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PackedFunc pf <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">GetFunction</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>python 端有大量如下类似代码，将有相同后缀的 PackedFunc 注册到 Python 端</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"FFI APIs for tvm.ir\"\"\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> tvm<span class=\"token punctuation\">.</span>_ffi</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>tvm<span class=\"token punctuation\">.</span>_ffi<span class=\"token punctuation\">.</span>_init_api<span class=\"token punctuation\">(</span><span class=\"token string\">\"ir\"</span><span class=\"token punctuation\">,</span> __name__<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>Python 端获取并执行 PackedFunc</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_ffi_api<span class=\"token punctuation\">.</span>Module_UpdateGlobalInfo<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> global_info<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "tvm",
                "compile"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/08/04/zatanNoval/",
            "url": "https://forcheetah.github.io/2024/08/04/zatanNoval/",
            "title": "【感想】写作进度报告1",
            "date_published": "2024-08-04T03:36:35.532Z",
            "content_html": "<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>四五年前就开始构思一部小说。那时起就不断地撰写纲要，描述关键节点剧情，甚至开始跳着写中间的一些章节。不过总感到不妥，小说的立意太低了，剧情太老套了，可能和 XX 很像，我才不愿意仿写，等等很多原因，我又不得不停下来重新思考整个小说的立意、构思。</p>\n<p>小说经过了多次彻头彻尾的改造，重新设计了关键节点，调整了新的纲要。不得不说，尽管写作是一个漫长的过程，但是小说的立意构思阶段不见得工作量更小。</p>\n<p>在几个月前，终于调整好构思之后，重新开始写作。现在写的很慢，之前在学校里会抽时间写一点，现在上班了，只能是下班玩够了之后，写一个小时左右。不知不觉，到今天正文已经有 3 万余字了。特意查了一下，《三体》三部曲最初版每本大概在 35 万到 45 万左右。所以现在已经有一部书的将近十分之一了，而我还觉得小说只写了个开头，哈哈。</p>\n<p>随便记录一下，等到有其他进展后还会记录在博客里。</p>\n<h1 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h1>\n<p>每个人都渴望成为天选之子，拥有传奇的人生。但是不得不承认，大部分人都是普通人而已，包括你我。没办法，只能让自己的灵魂寄托在小说的虚拟世界里，体验丰富而壮丽的人生。</p>\n",
            "tags": [
                "novel"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/07/07/conv4/",
            "url": "https://forcheetah.github.io/2024/07/07/conv4/",
            "title": "【Winograd】卷积加速算法原理及实现",
            "date_published": "2024-07-07T12:57:48.314Z",
            "content_html": "<h1 id=\"算法原理\"><a class=\"anchor\" href=\"#算法原理\">#</a> 算法原理</h1>\n<p>算法原理还没写，预计将来补上。可以在网络上搜索算法原理。</p>\n<h1 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h1>\n<p>可以在 github 项目 <a href=\"https://github.com/ForCheetah/ConvAccelerate\">卷积加速算法实现</a> 中下载代码实现，运行其中的测试函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>winograd 算法   F (2*2, 3*3)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>仅用于 3*3 卷积，stride=1, dilation=1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>推荐   w&lt;120 h&lt;120 in_c>16 out_c>16</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>现已支持 pad   之后添加 dilation</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*/</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">TestWinogradF23ConvLayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>winograd 算法  nchw   F (6*6, 3*3)    8*8  3*3  ->  6*6</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>仅用于 3*3 卷积，stride=1, dilation=1</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>推荐   w&lt;120 h&lt;120 in_c>16 out_c>16</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>现已支持 pad   之后添加 dilation</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>*/</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">TestWinogradF63ConvLayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>；</pre></td></tr></table></figure><p>两个函数分别测试了基于 F (2*2,3*3) 以及 F (6*6,3*3) 的 winograd 卷积算法。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "accelerate",
                "conv"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/07/05/problem3/",
            "url": "https://forcheetah.github.io/2024/07/05/problem3/",
            "title": "SystemC 等待异步事件解决方案",
            "date_published": "2024-07-05T14:08:31.423Z",
            "content_html": "<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>本文为实现 SystemC 响应异步事件 解决方案。</p>\n<p>应用场景：</p>\n<p>SystemC 是一个支持系统事务级、行为级建模的开源的 C++ library；</p>\n<p>我们将 SystemC 仿真的模拟叫做模拟器。在很多场景下，模拟器要保持 alive，等待异步 async 事件，做出对应的处理。例如设计一个 SystemC 消费者模拟器，而生产者程序不属于 SystemC 仿真范畴，消费者模拟器需要一直保持等待，并在出现数据后进行处理。</p>\n<blockquote>\n<p>世界上没有东西是完美的啊，倒不如说，同时拥有光明和阴影才是完美的，这样的你才是真正的你。<br>\n------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<p>以上应用场景应当很常见，但是无论中文网站搜索、SystemC 社区、谷歌搜索、Stack Overflow 等，都没有合适的解决方案。笔者在综合了解相关问题及做了不少尝试后，给出了较为合适的解决方案。感兴趣的伙伴可以查看以下相关帖子：</p>\n<p><a href=\"https://forums.accellera.org/topic/7791-example-of-main-thread-controlling-sub_threadsystemc-module-to-complete-instructions/\">https://forums.accellera.org/topic/7791-example-of-main-thread-controlling-sub_threadsystemc-module-to-complete-instructions/</a></p>\n<p><a href=\"https://forums.accellera.org/topic/7609-how-to-make-a-single-only-sc_thread-wait-for-a-notify-from-external-host-thread/\">https://forums.accellera.org/topic/7609-how-to-make-a-single-only-sc_thread-wait-for-a-notify-from-external-host-thread/</a></p>\n<p><a href=\"https://workspace.accellera.org/document/dl/10932\">https://workspace.accellera.org/document/dl/10932</a><br>\n<a href=\"https://forums.accellera.org/topic/29-async_request_update-example/\">https://forums.accellera.org/topic/29-async_request_update-example/</a></p>\n<p><a href=\"https://stackoverflow.com/questions/49814756/async-request-update-example-in-systemc\">https://stackoverflow.com/questions/49814756/async-request-update-example-in-systemc</a></p>\n<h1 id=\"解决方案\"><a class=\"anchor\" href=\"#解决方案\">#</a> 解决方案：</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;systemc.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadSafeEventIf</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">sc_interface</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>sc_time delay <span class=\"token operator\">=</span> SC_ZERO_TIME<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">const</span> sc_event <span class=\"token operator\">&amp;</span><span class=\"token function\">default_event</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadSafeEvent</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">sc_prim_channel</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadSafeEventIf</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">ThreadSafeEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">event</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>sc_time delay <span class=\"token operator\">=</span> SC_ZERO_TIME<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>delay <span class=\"token operator\">=</span> delay<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token function\">async_request_update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">const</span> sc_event <span class=\"token operator\">&amp;</span><span class=\"token function\">default_event</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> event<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            event<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        sc_event event<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        sc_time delay<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>sc_event GenScEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>sc_event workingFinishEvent<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// finish event</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">int</span> workingFlag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// maybe dnot need a lock</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token function\">SC_MODULE</span><span class=\"token punctuation\">(</span>Foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">SC_CTOR</span><span class=\"token punctuation\">(</span>Foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token function\">SC_THREAD</span><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token function\">SC_METHOD</span><span class=\"token punctuation\">(</span>eventTriggered<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            sensitive <span class=\"token operator\">&lt;&lt;</span> threadSafeEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token function\">dont_initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token function\">SC_METHOD</span><span class=\"token punctuation\">(</span>stopTriggered<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            sensitive <span class=\"token operator\">&lt;&lt;</span> threadStopEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token function\">dont_initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">//extra forever thread to avoid simulation exit</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.05</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// check if there is any instruction every one sec.</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>SC_ZERO_TIME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>workingFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// check working</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>workingFinishEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// wait the working finish </span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.05</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">eventTriggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            GenScEvent<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">stopTriggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token function\">sc_stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        ThreadSafeEvent threadSafeEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        ThreadSafeEvent threadStopEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">PollingThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    Foo <span class=\"token operator\">*</span>foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Foo<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[POLL]: %d: Before generating event from PollingThread \\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        foo<span class=\"token operator\">-></span>threadSafeEvent<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[POLL]: %d: Event notified from PollingThread \\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token function\">usleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    foo<span class=\"token operator\">-></span>threadStopEvent<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">sc_top</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">sc_module</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token function\">SC_HAS_PROCESS</span><span class=\"token punctuation\">(</span>sc_top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token function\">sc_top</span><span class=\"token punctuation\">(</span>sc_module_name name<span class=\"token operator\">=</span><span class=\"token string\">\"SCTOP\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">sc_module</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token function\">SC_THREAD</span><span class=\"token punctuation\">(</span>processing_thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">processing_thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[PROC]: processing_thread called \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[PROC]: Wait GenScEvent  time: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">sc_time_stamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>GenScEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                workingFlag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> SC_SEC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// advance simulation time</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[PROC]: Process and Finish \"</span><span class=\"token operator\">&lt;&lt;</span>cnt <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" GenScEvent   time: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">sc_time_stamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                workingFinishEvent<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                workingFlag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sc_main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    Foo <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    sc_top <span class=\"token function\">u_sc_top</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"u_sc_top\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    pthread_t thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>thread<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> PollingThread<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token function\">sc_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对应的 CMakeLists.txt</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>find_library<span class=\"token punctuation\">(</span>SystemC_LIB systemc HINTS <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>syc_LIST <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/syc.cpp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>add_executable <span class=\"token punctuation\">(</span>syc <span class=\"token variable\">$&#123;syc_LIST&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>find_package<span class=\"token punctuation\">(</span>Threads REQUIRED<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>target_link_libraries <span class=\"token punctuation\">(</span>syc <span class=\"token variable\">$&#123;SystemC_LIB&#125;</span> Threads::Threads<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>以上代码实现了 ：</p>\n<ul>\n<li>1. 主线程中运行 SystemC 仿真模型，子线程中运行异步触发程序 （也可以根据自己的需要反过来，子线程中运行 SystemC 仿真模型，主线程运行触发程序。）</li>\n<li>2. 子线程每隔 3 秒触发一次 SystemC 仿真模型，主线程中的 SystemC 进行响应。</li>\n<li>3. 子线程主动触发三次之后，睡眠 5 秒，告知 SystemC 仿真结束。</li>\n</ul>\n<h1 id=\"结果\"><a class=\"anchor\" href=\"#结果\">#</a> 结果</h1>\n<pre><code class=\"language-console\">\n        SystemC 2.3.3-Accellera --- Mar 12 2024 15:33:04\n        Copyright (c) 1996-2018 by all Contributors,\n        ALL RIGHTS RESERVED\n[POLL]: 1: Before generating event from PollingThread \n[PROC]: processing_thread called \n[PROC]: Wait GenScEvent  time: 0 s[POLL]: 1: Event notified from PollingThread \n[POLL]: 2: Before generating event from PollingThread \n[PROC]: Process and Finish 1 GenScEvent   time: 10 s[PROC]: processing_thread called \n[PROC]: Wait GenScEvent  time: 10 s[POLL]: 2: Event notified from PollingThread \n[POLL]: 3: Before generating event from PollingThread \n[PROC]: Process and Finish 2 GenScEvent   time: 20 s[PROC]: processing_thread called \n[PROC]: Wait GenScEvent  time: 20 s[POLL]: 3: Event notified from PollingThread \n[PROC]: Process and Finish 3 GenScEvent   time: 30 s[PROC]: processing_thread called \n[PROC]: Wait GenScEvent  time: 30 s\nInfo: /OSCI/SystemC: Simulation stopped by user.\n</code></pre>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "Linux",
                "systemc"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/06/27/conv3/",
            "url": "https://forcheetah.github.io/2024/06/27/conv3/",
            "title": "【im2col】昇腾卷积加速算法",
            "date_published": "2024-06-27T15:21:34.031Z",
            "content_html": "<h1 id=\"前置信息\"><a class=\"anchor\" href=\"#前置信息\">#</a> 前置信息</h1>\n<p><strong>（1）本文讲解使用的例子</strong></p>\n<p>以如下的卷积为例，进行昇腾 Im2Col 卷积过程：</p>\n<ul>\n<li>Input 输入维度为 NHWC ：【2，25，25，17】</li>\n<li>外圈蓝色代表 pad</li>\n<li>Kernal 维度为  CCHkWk  ：【34，17，3，3】</li>\n<li>操作为 3*3 卷积 pad=1, Group=1, Stride=1， 2D 卷积</li>\n<li>得到输出的维度 为 NHWC : 【22，25，25，18】</li>\n</ul>\n<p>从图上可以轻易看出相关信息。</p>\n<p><img loading=\"lazy\" data-src=\"1719500181052.jpg\" alt=\"例子\"></p>\n<blockquote>\n<p>现在想起来，光是遇到你这个家伙，就感觉自己赚到了。<br>\n------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<p><strong>（2）矩阵乘运算单元</strong></p>\n<p>昇腾达芬奇架构设计了 16*16 的矩阵乘运算单元，能够提供强大的并行乘加计算能力，可以以一条指令实现两个 16*16 的矩阵相乘的运算。所以昇腾 Im2Col 卷积的目的就是让卷积能够高效地利用 “矩阵乘运算单元” 进行计算。</p>\n<p><img loading=\"lazy\" data-src=\"1719500301302.jpg\" alt=\"davincii\"></p>\n<p>感兴趣的可以阅读昇腾架构介绍书籍。</p>\n<blockquote>\n<p>矩阵计算单元可以⽤⼀条指令完成两个 16×16 矩阵的相乘运算（标记为 16<sup>3，也是 Cube 这⼀名称的来历），等同于在极短时间内进⾏了 16</sup>3＝4096 个乘加运算，并且可以实现 FP16 的运算精度。如图 3-7 所⽰，矩阵计算单元在完成 C＝A×B 的矩阵运算时，会事先将矩阵 A 按⾏存放在输⼊缓冲区中，同时将矩阵 B 按列存放在输⼊缓冲区中，通过矩阵计算单元计算后得到的结果矩阵 C 按⾏存放在输出缓冲区中。在矩阵相乘运算中，矩阵 C 的第⼀元素由矩阵 A 的第⼀⾏的 16 个元素和矩阵 B 的第⼀列的 16 个元素由矩阵计算单元⼦电路进⾏ 16 次乘法和 15 次加法运算得出。矩阵计算单元中共有 256 个矩阵计算⼦电路，可以由⼀条指令并⾏完成矩阵 C 的 256 个元素计算。                                          摘自《昇腾 AI 处理器架构与编程》</p>\n</blockquote>\n<h1 id=\"权重排布\"><a class=\"anchor\" href=\"#权重排布\">#</a> 权重排布</h1>\n<p>昇腾 Im2Col 五维卷积加速算法   基本流程：</p>\n<p>输入为 nhwc 输出为 nhwc</p>\n<p>权重维度变化： 权重的维度变化离线进行，不消耗神经网络推理时间。（神经网络推理大致分为 模型转换 量化 推理三个步骤，权重的维度转换可以在模型转换时进行，不占用推理的时间）。下面是权重变换的分步流程，代码实现可以一步完成，也可以分多步完成（因为不影响推理时间。）</p>\n<p><img loading=\"lazy\" data-src=\"1719500423112.jpg\" alt=\"weight change\"></p>\n<p>上方的变换如果比较抽象的话，可以结合后面的流程来理解。</p>\n<h2 id=\"权重-从kernel-4d变换到kernel-2d\"><a class=\"anchor\" href=\"#权重-从kernel-4d变换到kernel-2d\">#</a> 权重 从 kernel 4D 变换到 kernel 2D</h2>\n<p><img loading=\"lazy\" data-src=\"1719500512598.jpg\" alt=\"weight change\"></p>\n<p><img loading=\"lazy\" data-src=\"1719500556415.jpg\" alt=\"weight change2\"></p>\n<p>上图是 Kernel 2D 的数据排布方式，维度为【2*3*3*16，34】，为了简便，跳过昇腾 5D 结构，直接从 4D 转到 2D。下面介绍 4D 数据和 2D 数据的一一对应关系。</p>\n<ul>\n<li>D 图 ① 覆盖区域表示 一个卷积核【17，3，3】展开成 2D 中的一列。对应于 A 图中一整个卷积核。34 个卷积核将展开为 34 列。因此每列代表一个卷积核。</li>\n<li>B 图，卷积核通道数为 17，需要补零为 16 的倍数 32，并拆分成 2 块（分别是紫色、黄色）。E 图：每一列（每一个卷积核）的紫色部分②是卷积核通道方向拆分的第一块（B 图中的紫色），黄色部分③是拆分的第二块（B 图中的黄色）。</li>\n<li>拆分的每一块（比如紫色部分）又分成 3*3（kernel 行 * 列），F 图: ④覆盖的是 kernel 第一行 (对应于 C 图中的④的部分)，⑤覆盖的是 kernel 第二行（对应于 C 图中⑤的部分），相似的⑥覆盖的是 kernel 第三行（对应于 C 图中⑥的部分）。3*3 卷积核一共就三行</li>\n<li>每一个紫色的小方格代表通道方向的 16 个数。</li>\n<li>至此，kernel 4D 和 kernel 2D 所有的数据都一一对应了。例如 F 图中：⑦代表第 6 个卷积核、通道拆分的第二块、第一行、第二列、通道方向的 16 个数。</li>\n</ul>\n<p>通过上述对应关系，我们不难得到维度为【2*3*3*16，34】的卷积核 2D 形式。由于昇腾卷积算法的 AI 计算核心是 16*16 的矩阵乘运算单元，同时为了取数方便，还需要将卷积核 2D 转换为大 Z 小 N 排布方式。</p>\n<h2 id=\"权重-从kernel2d变换到大z小n\"><a class=\"anchor\" href=\"#权重-从kernel2d变换到大z小n\">#</a> 权重 从 kernel2D 变换到大 Z 小 N</h2>\n<p><img loading=\"lazy\" data-src=\"1719500684744.jpg\" alt=\"2d\"></p>\n<p>第一步，将 2D【2*3*3*16，34】中 34 补零为 16 的倍数，即 48，得到【2*3*3*16，48】。</p>\n<p>第二步，将其按照 16*16 的方格进行划分，得到【2*3*3，3】个【16，16】的小块。（图中画成了 4 个小块，实际应该是 3 个，示意图，见谅）</p>\n<p>第三步，将这些小块按照大 Z 小 N 的顺序进行排布。大 Z 指的是外部按照行优先，将按照 Cube1 到 Cube8 这种 “Z” 字形排布；小 N 指的是内部按照列优先，即每个 16*16 的 Cube，先排第一列，然后是第二列...  详见最右边的彩色表示。</p>\n<p>多说一句，之所以专门按照 “小 N” 排布，是因为在矩阵运算中，权重作为矩阵乘的第二个参数，数据是按列取的。这就意味着在实际内存中要跳着取数（内存中都是按照行优先排序），自然效率低。提前将其按照列优先的方式进行排布，那么在矩阵乘运算中可以连续取数。至此，我们得到了 【2*3*3，3，16*16】的权重大 Z 小 N 排布形式，这种形式使得能够一次性取出 256 个数参与计算，效率很高。</p>\n<p>下面的代码一次性完成了 权重 4D nhwc  到权重大 Z 小 N 排布，仅供参考。还是那句话，权重的变换离线进行，不占用宝贵的推理时间，所以无须关心转换的效率。完整代码可以下载 <a href=\"https://github.com/ForCheetah/ConvAccelerate\">加速算法模拟</a>，并运行其中的  <code>TestAscendConvLayer();</code>  函数。可以看到三个测试函数，它们的区别在于不同的输入排布方式。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//9.  测试 昇腾 卷积算法加速     NCHW 输入， NHWC 输出</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// TestAscendConvLayer();</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//10.  测试 昇腾 卷积算法加速      NCHW 输入， NCHW 输出</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// TestAscendConvLayerNCHW();</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//11. 测试 昇腾卷积算法加速 NHWC      NHWC 输入， NHWC 输出</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// TestAscendConvLayerNHWC();</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">WeightTrans_A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> filters<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> TensorDim weight_dim<span class=\"token punctuation\">,</span> Ascend5Dim we_5D_dim<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> we_tran5D<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            AscendTransform5Dim we_tran5D_dim<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> CUBE_row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> CUBE_col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> lastdim4 <span class=\"token operator\">=</span> we_tran5D_dim<span class=\"token punctuation\">.</span>move <span class=\"token operator\">*</span> we_tran5D_dim<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">*</span> we_tran5D_dim<span class=\"token punctuation\">.</span>LW <span class=\"token operator\">*</span> we_tran5D_dim<span class=\"token punctuation\">.</span>cube<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> lastdim3 <span class=\"token operator\">=</span> we_tran5D_dim<span class=\"token punctuation\">.</span>channel <span class=\"token operator\">*</span> we_tran5D_dim<span class=\"token punctuation\">.</span>LW <span class=\"token operator\">*</span> we_tran5D_dim<span class=\"token punctuation\">.</span>cube<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> lastdim2 <span class=\"token operator\">=</span> we_tran5D_dim<span class=\"token punctuation\">.</span>LW <span class=\"token operator\">*</span> we_tran5D_dim<span class=\"token punctuation\">.</span>cube<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> single_filter_num <span class=\"token operator\">=</span> weight_dim<span class=\"token punctuation\">.</span>c <span class=\"token operator\">*</span> weight_dim<span class=\"token punctuation\">.</span>h <span class=\"token operator\">*</span> weight_dim<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> single_filter_channel <span class=\"token operator\">=</span> weight_dim<span class=\"token punctuation\">.</span>h <span class=\"token operator\">*</span> weight_dim<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch_cube<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> ch_cube<span class=\"token operator\">&lt;</span>we_tran5D_dim<span class=\"token punctuation\">.</span>batch<span class=\"token punctuation\">;</span> ch_cube<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 通道方向块   ch_cube</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> index_1 <span class=\"token operator\">=</span> ch_cube <span class=\"token operator\">*</span> lastdim4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hk<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> hk<span class=\"token operator\">&lt;</span>we_tran5D_dim<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">;</span> hk<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//filter 长  </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">int</span> index_2 <span class=\"token operator\">=</span> index_1 <span class=\"token operator\">+</span> hk <span class=\"token operator\">*</span> lastdim3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> wk<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> wk<span class=\"token operator\">&lt;</span>we_tran5D_dim<span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">;</span> wk<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//filter 宽</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">int</span> index_3 <span class=\"token operator\">=</span> index_2 <span class=\"token operator\">+</span> wk <span class=\"token operator\">*</span> lastdim2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cout_cube<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> cout_cube<span class=\"token operator\">&lt;</span>we_tran5D_dim<span class=\"token punctuation\">.</span>LW<span class=\"token punctuation\">;</span> cout_cube<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//cout 方向块 </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token keyword\">int</span> index_4 <span class=\"token operator\">=</span> index_3 <span class=\"token operator\">+</span> cout_cube<span class=\"token operator\">*</span>we_tran5D_dim<span class=\"token punctuation\">.</span>cube<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cube_row<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> cube_row<span class=\"token operator\">&lt;</span>CUBE_row<span class=\"token punctuation\">;</span> cube_row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cube_col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> cube_col<span class=\"token operator\">&lt;</span>CUBE_col<span class=\"token punctuation\">;</span> cube_col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> index_4 <span class=\"token operator\">+</span> cube_row<span class=\"token operator\">*</span>CUBE_col <span class=\"token operator\">+</span> cube_col<span class=\"token punctuation\">;</span>                       </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cout_cube<span class=\"token operator\">*</span>CUBE_col<span class=\"token operator\">+</span>cube_row<span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span>weight_dim<span class=\"token punctuation\">.</span>n  <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>ch_cube<span class=\"token operator\">*</span>CUBE_col<span class=\"token operator\">+</span>cube_col<span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span>weight_dim<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                                we_tran5D<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                                <span class=\"token comment\">// 第几个 filter  第几个通道  第几行  第几列  还要注意 大 Z 小 N 排布方式     大 Z 小 N 排布方式（行变列，列变行）</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                                <span class=\"token keyword\">int</span> index_from <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>cout_cube<span class=\"token operator\">*</span>CUBE_col<span class=\"token operator\">+</span>cube_row<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>single_filter_num <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ch_cube<span class=\"token operator\">*</span>CUBE_col<span class=\"token operator\">+</span>cube_col<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>single_filter_channel <span class=\"token operator\">+</span> hk<span class=\"token operator\">*</span>weight_dim<span class=\"token punctuation\">.</span>w<span class=\"token operator\">+</span> wk<span class=\"token punctuation\">;</span>                                </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                                we_tran5D<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> filters<span class=\"token punctuation\">[</span>index_from<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"输入排布\"><a class=\"anchor\" href=\"#输入排布\">#</a> 输入排布</h1>\n<p>输入 tensor 的内存排布为 nhwc 输出为 nhwc</p>\n<p>昇腾算法的维度详细变换如图下图所示。这里展示了输入 input 从 4D 维度转换到 昇腾 5D 结构，然后再转换到 2D 结构，最后转换到大 Z 小 Z 维度。写这么详细只是为了方便读者理解，而在实际操作中，由于 Input 的变换是在线进行，消耗宝贵的推理时间，所以如华为昇腾书中所说：input 先是从 4D 维度 通过软件算法转换为 昇腾 5D 维度（在模型推理过程中这一步可能不需要，因为中间层的 tensor 已经处于昇腾 5D 维度了），之后从昇腾 5D 维度通过 硬件直接转换到大 Z 小 Z 排布（模型推理过程肯定是边转换变计算，所以不会将整个 tensor 转换为大 Z 小 Z 之后，才进行矩阵运算阶段的。本博客为方便，将整个 tensor 完全转换到大 Z 小 Z，再进行后面计算。）</p>\n<p>说完这些，就可以介绍一下昇腾算法极致高效的输入的排布转换过程了！</p>\n<p><img loading=\"lazy\" data-src=\"1719500920323.jpg\" alt=\"input\"></p>\n<h2 id=\"输入-从input-4d-到input-5d\"><a class=\"anchor\" href=\"#输入-从input-4d-到input-5d\">#</a> 输入 从 Input 4D 到 Input 5D</h2>\n<p>还是再强调一下，昇腾可以做到整个模型的中间层的 tensor 均保持昇腾 5D 的维度，所以思考一下，可能只有最初输入到模型的 tensor 需要 从 Input 4D 转 到 Input 5D，或者再数据预处理的时候就将数据处理为 5D 排布。</p>\n<p><img loading=\"lazy\" data-src=\"1719500976081.jpg\" alt=\"trans6\"></p>\n<ul>\n<li>G 图是最原始的 Input4D 结构，当然，batch 维度 N=2 没有画，只画了一个。它的维度是【25，25，17】</li>\n<li>H 图为昇腾 5D 结构图，首先要将通道方向的 17 补齐为 16 的倍数 32，同时每 16 个进行一次拆分，拆成两组。</li>\n<li>最后注意一下数据的排布顺序就好了：注意 5D 结构中，K_cube 位于最内层，这些数据是连续的，所以先把 高 h=1, 宽 w=1 位置的 16 个数据排在一起。</li>\n<li>紧接着将宽度方向 25 个 K_cube 排在一起，变成 25*16</li>\n<li>然后再遍历高的方向。变成 25*25*16</li>\n<li>最后是遍历两组，得到昇腾的 5D 结构【2，25，25，16】</li>\n</ul>\n<p>此处数据搬运较为简单，可以参考代码<a href=\"https://github.com/ForCheetah/ConvAccelerate\">加速算法模拟</a></p>\n<h2 id=\"输入-从input-5d-直接搬到-大z小z\"><a class=\"anchor\" href=\"#输入-从input-5d-直接搬到-大z小z\">#</a> 输入 从 Input 5D 直接搬到 大 Z 小 Z</h2>\n<p>昇腾通过专门设计的硬件，将 input 从 5D 格式直接搬到 大 Z 小 Z 排布。想要知道怎么搬以及为什么这么搬，还真不得不把其 2D 排布讲明白。  《昇腾 AI 处理器架构与编程》这本书中直接跳过了 2D 排布，导致晦涩难懂。</p>\n<h3 id=\"input-5d-到-input-2d\"><a class=\"anchor\" href=\"#input-5d-到-input-2d\">#</a> Input 5D 到 Input 2D</h3>\n<p>所以我们直接看 Input2D 与 Weight 2D 的对应情况，如下图所示。</p>\n<p><img loading=\"lazy\" data-src=\"1719501086578.jpg\" alt=\"trans5\"></p>\n<ul>\n<li>J 图为 input2D 【25*25，2*3*3*16】   K 图为 Weight2D 【2*3*3*16，34】。再回忆一下 Weight2D 数据每一行和每一列的数据的意义，它的一列数据 2*3*3*16 代表什么呢？  2*3*3*16 代表一整个卷积核，2 代表该卷积核通道方向拆成两块，那么 3*3*16 就是每一块的 高 * 宽 * K_cube。</li>\n<li>好巧！Input2D 的一行也是 2*3*3*16！（废话，不一样就没法算了）。既然 weight2D 一列数据的意义一清二楚，那么对应的 Input2D 数据一行的意义也就呼之欲出啦！ Input2D 的一行 就是卷积核在某个滑动窗口位置对应的 input 数据。例如，Input2D 的第一行，就对应于 I 图 3*3 的彩色窗口数据（没有 Pad 的情况下）。</li>\n<li>也就可以推知，Input2D 的每一行绿色部分，就是 I 图通道方向拆分的第一块（拆分的绿色部分）；每一行的的蓝色部分，就是 I 图通道防线拆分的第二块（中间深蓝宽度 1，和补齐的浅蓝 15）</li>\n<li>那么，为什么 Input2D 有足足 625 行呢？因为滑动窗口纵向滑动 25 次，每次纵向滑动，都包含横向的 25 次，总共 625 次。</li>\n</ul>\n<p>假如直接计算 Input2D 矩阵乘 Weight2D，卷积计算就得到最终结果啦！这就是普通的 Im2Col 算法，不清楚的小伙伴们还可以去读一下 <a href=\"https://forcheetah.github.io/2024/05/23/conv1/\">Im2Col 算法 NCHW</a> 和 <a href=\"https://forcheetah.github.io/2024/05/23/conv2/\">Im2Col 算法 NHWC</a>。</p>\n<p>从 2D 的角度来看，算法是不是很简单啊。</p>\n<p>不要高兴的太早，还没完呢。</p>\n<h3 id=\"input-2d-到-大z小z\"><a class=\"anchor\" href=\"#input-2d-到-大z小z\">#</a> Input 2D 到 大 Z 小 Z</h3>\n<p><img loading=\"lazy\" data-src=\"1719501234541.jpg\" alt=\"trans4\"></p>\n<p>接下来是将 Input2D 转换到大 Z 小 Z 排布</p>\n<p>第一步，将 Input2D【25*25，2*3*3*16】中 25*25 补零为 16 的倍数，即 640，得到【640，2*3*3*16】  ，如图 L。</p>\n<p>第二步，将其按照 16*16 的方格进行划分，即得到【40，18】个【16，16】的小块，如图 M。</p>\n<p>第三步，将这些小块按照大 Z 小 Z 的顺序进行排布。大 Z 指的是外部按照行优先，将按照 Cube1 到 Cube720 这些块按照 “Z” 字形排布；像 N 图上方排成一行；小 Z 指的是内部也按照行优先，即每个 16*16 的 Cube，先排第一行，然后是第二行... 详见 N 图中的颜色表示。</p>\n<p><img loading=\"lazy\" data-src=\"1719501296597.jpg\" alt=\"trans3\"></p>\n<p>上图来自《昇腾 AI 处理器架构与编程》，矩阵 A 的排布为大 Z 小 Z，矩阵 B 的排布为大 Z 小 N，大家可以再理解一下。</p>\n<p>至此，Input 的大 Z 小 Z 排布已经实现，接下来就是 16*16 的矩阵乘了。</p>\n<p><img loading=\"lazy\" data-src=\"1719501324297.jpg\" alt=\"trans2\"></p>\n<ul>\n<li>Input 现在是【40，18】个【16，16】小块，如左图，当然，它现在处于大 Z 小 Z 的一维排布。</li>\n<li>Weight 现在是 【18，3】个【16，16】小块，如中间图，当然，它现在处于大 Z 小 N 的一维排布。</li>\n<li>不知道分块矩阵乘的小伙伴可以再搜索下 《线性代数》中的分块矩阵乘运算。</li>\n<li>内部，进行两个 16*16 块的矩阵乘运算，由于 weight 已经按照列优先进行排布，所以矩阵乘的顺序如上图最右边所示。</li>\n<li>外部，对【40，18】和【18，3】做矩阵乘运算。</li>\n<li>至此，我们得到了【640，18】的矩阵。</li>\n<li>然后将上图两图灰色部分对应的多余数据裁掉，就得到了卷积结果【25，25，34】 ，当然，还得遍历一下 batch，得到【2，25，25，34】</li>\n</ul>\n<h3 id=\"input5d搬到大z小z\"><a class=\"anchor\" href=\"#input5d搬到大z小z\">#</a> Input5D 搬到大 Z 小 Z</h3>\n<p>前两小节介绍了 Input5D 变换到 Input 2D，再变换到 大 Z 小 Z 的过程。而在昇腾芯片中，从 Input5D 到 Input2D 由硬件一步实现。</p>\n<p>如果前面两小节已经看明白了的话，那么搬运的秘密就呼之欲出了。</p>\n<p><img loading=\"lazy\" data-src=\"1719501381618.jpg\" alt=\"trans1\"></p>\n<ul>\n<li>看上图，左图是 Input 的 5D 维度排布【2，25，25，16】，右边是 Input 2D 排布【25*25，2*3*3*16】。中间是个滑动窗口示意图，3*3，因为本文中用的例子就是 3*3 卷积。</li>\n<li>回忆一下右边 2D 排布的数据的意义，每一个小格子是通道方向的 16 个数，每一行是滑动窗口每一个位置对应的 2*3*3*16 个数。滑动窗口纵向滑动 25 次，每次要横向滑动 25 次，所以有 625 行数据，再加上补齐的 15 行，才达到了 640 行数据。</li>\n<li>那么右图红色 1 的位置是滑动窗口 a 在第一个位置所对应的 16 个数字；红色 2 的位置是滑动窗口 a 横向滑动一次对应的 16 个数字；红色 3 的位置是滑动窗口 a 横向滑动第三次对应的 16 个数字；依次类推，红色 16 的位置是滑动窗口横向滑动第 16 次对应的 16 个数字。这 16 次滑动，滑动窗口的 a 在左图从 1 滑倒 16！</li>\n<li>也就是说，右图红色框的 1-16 与左图 1-16 一一对应！</li>\n<li>再来回忆一下，左图中 1-16 这 16*16 的数据是连续的吗？是！（不清楚的再回去看 Input 的维度变换）</li>\n<li>那么右图中的 1-16 这 16*16 个数据是连续的吗？它是！ 根据大 Z 小 Z 排布，这红色框中 16*16 的数据刚好被分到一个小 Cube 中！</li>\n<li>昇腾能够从 Input5D 中一次性拷贝 256 个数据到大 Z 小 Z 排布！</li>\n</ul>\n<h1 id=\"代码模拟\"><a class=\"anchor\" href=\"#代码模拟\">#</a> 代码模拟</h1>\n<p>当然，我猜测昇腾应该是设计了 16 个 DMA 组成的 DAM 队列，来实现一次 256 个数据的搬运。真的是相当高效了！</p>\n<p>我提供了 C 语言代码模拟整个昇腾的卷积运算流程。完整代码可以在 <a href=\"https://github.com/ForCheetah/ConvAccelerate\">加速算法模拟</a>下载，该工程提供了以下三个测试函数，它们的区别在于不同的输入排布方式。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//9.  测试 昇腾 卷积算法加速     NCHW 输入， NHWC 输出</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// TestAscendConvLayer();</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//10.  测试 昇腾 卷积算法加速      NCHW 输入， NCHW 输出</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// TestAscendConvLayerNCHW();</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//11. 测试 昇腾卷积算法加速 NHWC      NHWC 输入， NHWC 输出</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// TestAscendConvLayerNHWC();</span></pre></td></tr></table></figure><p>还要再提一句，该工程中采用 C 语言函数 memcpy () 来模拟昇腾的批量数据拷贝功能。数据搬运中并不是所有的情况都是 256 个数据内存连续的，所以可以看到代码运行中分两次、三次才能拷贝完 256 个数据的情况。昇腾硬件中设计的 DMA 队列不会出现这种问题。此外，硬件肯定设计为边搬运边计算的工作模式，不会像我工程中完全得到 Input 大 Z 小 Z 排布再进行矩阵运算。</p>\n<p>文章好长啊！画了好多图！</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "Linux",
                "openBlas"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/06/18/deployTVMPython/",
            "url": "https://forcheetah.github.io/2024/06/18/deployTVMPython/",
            "title": "【TVM】Python脚本实现模型编译和保存",
            "date_published": "2024-06-18T13:01:39.606Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇博客提供简单的 Python 脚本代码，实现 onnx 模型转换编译，保存为 TVM 的  <code>.so .params .json</code>  文件 。</p>\n<blockquote>\n<p>望长城内外，惟余莽莽；大河上下，顿失滔滔。<br>\n--------------- 教员<br>\n ------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<h1 id=\"python脚本实现模型编译和保存\"><a class=\"anchor\" href=\"#python脚本实现模型编译和保存\">#</a> Python 脚本实现模型编译和保存</h1>\n<p>脚本中需要修改的就一些路径，很容易看明白，就不再过多介绍了。</p>\n<pre><code class=\"language-Python\">\nimport onnx\nfrom tvm.contrib.download import download_testdata\nfrom PIL import Image\nimport numpy as np\nimport tvm.relay as relay\nimport tvm\nfrom tvm.contrib import graph_executor\n\n\n# 图片\nimg_path = &quot;../image/imagenet_cat.png&quot;\n# img_url = &quot;https://s3.amazonaws.com/model-server/inputs/kitten.jpg&quot;\n# img_path = download_testdata(img_url, &quot;../image/imagenet_cat.png&quot;, module=&quot;data&quot;)\n\n# 重设大小为 224x224\nresized_image = Image.open(img_path).resize((224, 224))\nimg_data = np.array(resized_image).astype(&quot;float32&quot;)\n\n# 输入图像是 HWC 布局，而 ONNX 需要 CHW 输入，所以转换数组\nimg_data = np.transpose(img_data, (2, 0, 1))\n\n# 根据 ImageNet 输入规范进行归一化\nimagenet_mean = np.array([0.485, 0.456, 0.406]).reshape((3, 1, 1))\nimagenet_stddev = np.array([0.229, 0.224, 0.225]).reshape((3, 1, 1))\nnorm_img_data = (img_data / 255 - imagenet_mean) / imagenet_stddev\n\n\n# 添加 batch 维度，期望 4 维输入：NCHW。\nimg_data = np.expand_dims(norm_img_data, axis=0)\n# 保存为 bin 文件  \nnorm_img_data.astype(&quot;float32&quot;).tofile(&quot;../image/imagenet_cat.bin&quot;)\n\n\n# 目标设备配置\ntarget = 'llvm'  # 以CPU为例\n\ninput_name = &quot;data&quot;\nshape_dict = &#123;input_name: img_data.shape&#125;\n\nonnx_model = onnx.load(&quot;../model/simple.onnx&quot;)\n\nmod, params = relay.frontend.from_onnx(onnx_model, shape_dict)\n\nwith tvm.transform.PassContext(opt_level=3):\n    lib = relay.build(mod, target=target, params=params)\n\n\n# 运行相关\ndev = tvm.device(str(target), 0)\nmodule = graph_executor.GraphModule(lib[&quot;default&quot;](dev))\n\n# 保存库文件\nlib_fname = &quot;../lib/mod.so&quot;\nlib.export_library(lib_fname)\n\n# 保存模型参数\nparams_fname = &quot;../lib/mod.params&quot;\nwith open(params_fname, &quot;wb&quot;) as param_file:\n    param_file.write(relay.save_param_dict(lib.get_params()))\n\n# 保存JSON格式的计算图\njson_fname = &quot;../lib/mod.json&quot;\nwith open(json_fname, &quot;w&quot;) as json_file:\n    json_file.write(lib.get_executor_config())\n\ndtype = &quot;float32&quot;\nmodule.set_input(input_name, img_data)\nmodule.run()\noutput_shape = (1, 10)\ntvm_output = module.get_output(0, tvm.nd.empty(output_shape)).numpy()\n\nfrom scipy.special import softmax\n\n# 下载标签列表\nlabels_url = &quot;https://s3.amazonaws.com/onnx-model-zoo/synset.txt&quot;\nlabels_path = download_testdata(labels_url, &quot;synset.txt&quot;, module=&quot;data&quot;)\n\nwith open(labels_path, &quot;r&quot;) as f:\n    labels = [l.rstrip() for l in f]\n\n# 打开输出文件并读取输出张量\nscores = softmax(tvm_output)    #   直接输出模型结果\nscores = np.squeeze(tvm_output)\nranks = np.argsort(scores)[::-1]\nfor rank in ranks[0:5]:\n    print(&quot;class='%s' with probability=%f&quot; % (labels[rank], scores[rank]))\n\n</code></pre>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "tvm",
                "cmake",
                "runtime"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/06/16/engine2/",
            "url": "https://forcheetah.github.io/2024/06/16/engine2/",
            "title": "【推理引擎】常见AI推理框架",
            "date_published": "2024-06-16T12:28:49.173Z",
            "content_html": "<h1 id=\"昇腾\"><a class=\"anchor\" href=\"#昇腾\">#</a> 昇腾</h1>\n<p><img loading=\"lazy\" data-src=\"1718540428003.jpg\" alt=\"shengteng\"></p>\n<p><a href=\"https://www.hiascend.com/zh/document\">昇腾官方文档</a></p>\n<p>华为昇腾（HUAWEI Ascend）是华为公司推出的一系列人工智能处理器，标志着华为在自主设计人工智能（AI）芯片领域的重要进展。昇腾芯片基于华为自主研发的达芬奇架构，这一架构设计旨在优化 AI 计算的效率和性能，特别是针对深度学习任务进行了专门优化。</p>\n<p>还可以去找一下 《昇腾 AI 处理器架构与编程：深⼊理解 CANN 技术原理及应⽤》等相关书籍。</p>\n<h1 id=\"ncnn\"><a class=\"anchor\" href=\"#ncnn\">#</a> NCNN</h1>\n<p><img loading=\"lazy\" data-src=\"1718540505840.jpg\" alt=\"ncnn\"></p>\n<p><a href=\"https://github.com/Tencent/ncnn\">腾讯 NCNN</a></p>\n<p>ncnn 是一个为手机端极致优化的高性能神经网络前向计算框架。 ncnn 从设计之初深刻考虑手机端的部署和使用。 无第三方依赖，跨平台，手机端 cpu 的速度快于目前所有已知的开源框架。 基于 ncnn，开发者能够将深度学习算法轻松移植到手机端高效执行， 开发出人工智能 APP，将 AI 带到你的指尖。 ncnn 目前已在腾讯多款应用中使用，如：QQ，Qzone，微信，天天 P 图等。</p>\n<h1 id=\"tvm\"><a class=\"anchor\" href=\"#tvm\">#</a> TVM</h1>\n<p><img loading=\"lazy\" data-src=\"1718540553346.jpg\" alt=\"tvm\"></p>\n<p><a href=\"https://github.com/apache/tvm\">TVM</a></p>\n<p>Apache TVM 是用于深度学习系统的编译器堆栈。它旨在缩小以生产力为重点的深度学习框架与以性能和效率为重点的硬件后端之间的差距。TVM 与深度学习框架合作，为不同的后端提供端到端编译。</p>\n<h1 id=\"tengine\"><a class=\"anchor\" href=\"#tengine\">#</a> Tengine</h1>\n<p><img loading=\"lazy\" data-src=\"1718540586818.jpg\" alt=\"tengine\"></p>\n<p><a href=\"https://github.com/OAID/Tengine\">Open AI Lib Tengine</a></p>\n<p>Tengine 由 OPEN AI LAB 主导开发，该项目实现了深度学习神经网络模型在嵌入式设备上的快速、高效部署需求。为实现在众多 AIoT 应用中的跨平台部署，本项目使用 C 语言进行核心模块开发，针对嵌入式设备资源有限的特点进行了深度框架裁剪。同时采用了完全分离的前后端设计，有利于 CPU、GPU、NPU 等异构计算单元的快速移植和部署，降低评估、迁移成本。</p>\n<p>尽管 Tengine 已经挺久不再维护了，但是作为一个完全使用 C 语言承担推理部分工作的框架，tengine 还是有轻量、框架结构清晰、易于拓展、容易学习、部署简单等优势，还是非常值得学习的。</p>\n<h1 id=\"地平线\"><a class=\"anchor\" href=\"#地平线\">#</a> 地平线</h1>\n<p><img loading=\"lazy\" data-src=\"1718540635472.jpg\" alt=\"horizon\"></p>\n<p><a href=\"https://developer.horizon.cc/api/v1/fileData/horizon_j5_open_explorer_cn_doc/index.html\">地平线征程五官方文档</a></p>\n<p>地平线 BPU（Brain Processing Unit）是地平线公司自主研发的专为智能驾驶及边缘计算场景设计的 AI 处理器架构。BPU 旨在通过软硬件深度结合，提供针对神经网络处理的高效解决方案，特别强调在自动驾驶、物联网、智能摄像头等领域的应用。地平线 J5 算法工具链（以下简称工具链）是一套完整的边缘计算平台算法落地解决方案，可以帮助您把浮点模型量化为定点模型， 并在地平线计算平台上快速部署自研算法模型。</p>\n<h1 id=\"tensorrt\"><a class=\"anchor\" href=\"#tensorrt\">#</a> TensorRT</h1>\n<p><img loading=\"lazy\" data-src=\"1718540670403.jpg\" alt=\"tensorrt\"></p>\n<p><a href=\"https://github.com/NVIDIA/TensorRT\">TensorRT</a></p>\n<p>NVIDIA TensorRT  是一个用于高性能深度学习推理的 API 生态系统。TensorRT 包括推理运行时和模型优化，可为生产应用程序提供低延迟和高吞吐量。TensorRT 生态系统包括 TensorRT、TensorRTLLM、TensorRT 模型优化器和 TensorRTCloud。</p>\n<h1 id=\"mnn\"><a class=\"anchor\" href=\"#mnn\">#</a> MNN</h1>\n<p><img loading=\"lazy\" data-src=\"1718540735181.jpg\" alt=\"mnn\"></p>\n<p><a href=\"https://github.com/alibaba/MNN\">alibaba MNN</a></p>\n<p>MNN 是一个高效、轻量级的深度学习框架。它支持深度学习模型的推理和训练，并在设备上具有业界领先的推理和培训性能。目前，MNN 已整合到阿里巴巴旗下淘宝、天猫、优酷、钉钉、闲鱼等 30 多个应用中，涵盖直播、短视频拍摄、搜索推荐、图片搜货、互动营销、权益分销、安全风控等 70 多个使用场景。此外，MNN 还用于嵌入式设备，如物联网。</p>\n<h1 id=\"nvdla\"><a class=\"anchor\" href=\"#nvdla\">#</a> NVDLA</h1>\n<p><img loading=\"lazy\" data-src=\"1718540758631.jpg\" alt=\"nvdla\"></p>\n<p><a href=\"http://nvdla.org/\">NVDLA 官方文档</a></p>\n<p>NVIDIA 深度学习加速器（NVDLA）是一种免费开放的架构，旨在推广设计深度学习推理加速器的标准方法。NVDLA 具有模块化架构，可扩展、高度可配置，旨在简化集成和可移植性。</p>\n<h1 id=\"arm\"><a class=\"anchor\" href=\"#arm\">#</a> ARM</h1>\n<p><img loading=\"lazy\" data-src=\"1718540818151.jpg\" alt=\"arm\"></p>\n<p><a href=\"https://github.com/ARM-software/armnn\">ARM NN</a></p>\n<p>ARM NN 是一个开源的软件库，用于在基于 ARM 的平台上运行预先训练好的神经网络。它充当诸如 TensorFlow Lite、Caffe、ONNX 等框架与底层硬件加速器（如 GPU、NPU）之间的桥梁。ARM NN 支持异构执行，可以在 CPU、GPU 和 NPU 之间分配工作负载，以实现最优性能。</p>\n<p>CMSIS-NN 是一个高度优化的神经网络内核集合，特别为基于 ARM Cortex-M 系列的微控制器设计。它提供了一系列高度优化的函数，用于在资源受限的设备上执行卷积神经网络 (CNNs) 和其他常见的神经网络操作。这些函数可以在 Keil MDK-ARM 或 GCC 等工具链中使用，帮助开发者在 MCU 上实现高效的机器学习推理。</p>\n<h1 id=\"mace\"><a class=\"anchor\" href=\"#mace\">#</a> MACE</h1>\n<p><img loading=\"lazy\" data-src=\"1718540862260.jpg\" alt=\"xiaomi mace\"></p>\n<p><a href=\"https://github.com/XiaoMi/mace\">XiaoMi MACE</a></p>\n<p>XiaoMi MACE 是一个深度学习推理框架，针对 Android、iOS、Linux 和 Windows 设备上的移动异构计算进行了优化。</p>\n<h1 id=\"pulsar2\"><a class=\"anchor\" href=\"#pulsar2\">#</a> Pulsar2</h1>\n<p><img loading=\"lazy\" data-src=\"1718540894460.jpg\" alt=\"pulsar\"></p>\n<p><a href=\"https://pulsar2-docs.readthedocs.io/zh-cn/latest/\">Pulsar2</a></p>\n<p>爱芯元智 AX620A 视觉芯片  使用的编译工具链是 Pulsar2</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "accelerate",
                "tengine",
                "ncnn"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/06/15/zatanE3/",
            "url": "https://forcheetah.github.io/2024/06/15/zatanE3/",
            "title": "【3D建模】T110E3卡迪夫蓝调皮肤模型",
            "date_published": "2024-06-15T12:42:27.991Z",
            "content_html": "<p>新的坦克模型，T110E3 卡迪夫蓝调皮肤模型，快要问世了。这里展示制作过程。</p>\n<h1 id=\"卡迪夫蓝调皮肤\"><a class=\"anchor\" href=\"#卡迪夫蓝调皮肤\">#</a> 卡迪夫蓝调皮肤</h1>\n<p><img loading=\"lazy\" data-src=\"20240615204753.jpg\" alt=\"111\"></p>\n<p><img loading=\"lazy\" data-src=\"20240615204855.jpg\" alt=\"222\"></p>\n<h1 id=\"建模过程\"><a class=\"anchor\" href=\"#建模过程\">#</a> 建模过程</h1>\n<p><img loading=\"lazy\" data-src=\"20240615204959.png\" alt=\"solidworks 3D 建模\"></p>\n<p><img loading=\"lazy\" data-src=\"20240615205022.png\" alt=\"solidworks 3D 建模\"></p>\n<p><img loading=\"lazy\" data-src=\"20240615205036.png\" alt=\"solidworks 3D 建模\"></p>\n<h1 id=\"打印组装\"><a class=\"anchor\" href=\"#打印组装\">#</a> 打印组装</h1>\n<p><img loading=\"lazy\" data-src=\"20240615205118.jpg\" alt=\"打印件出炉\"></p>\n<p><img loading=\"lazy\" data-src=\"20240615205148.jpg\" alt=\"组装\"></p>\n<p><img loading=\"lazy\" data-src=\"20240615205210.jpg\" alt=\"上色\"></p>\n<h1 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>此模型是摆件，没有行动能力。还是很期待啊。</p>\n",
            "tags": [
                "tank",
                "zatan"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/06/10/deployTVM/",
            "url": "https://forcheetah.github.io/2024/06/10/deployTVM/",
            "title": "【TVM】C++部署运行TVM",
            "date_published": "2024-06-10T11:47:15.090Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本篇博客主要介绍如何通过 G++ 编译器编译 C++ 代码，部署 TVM。</p>\n<blockquote>\n<p>总感觉，属于我们的时代还没开始，就要结束了呢。<br>\n------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<h1 id=\"现状\"><a class=\"anchor\" href=\"#现状\">#</a> 现状</h1>\n<p>TVM 官方文档:<a href=\"https://tvm.apache.org/docs\"> 英文文档</a> <a href=\"https://tvm.hyper.ai/\">中文文档</a> 主要介绍了通过 Python 脚本和 Python 命令行 tvmc 来编译和部署 TVM。但是以这两种方式部署，部署设备还需要安装 Python 运行环境，带来额外空间占用和开销。显然不能以这种方式部署。</p>\n<p>TVM 项目的 <a href=\"https://github.com/apache/tvm/tree/main/apps/howto_deploy\">howto_deploy</a> 目录下提供了 G++ 编译 C++ 代码部署 TVM 的方式。遗憾的是给的例子没有包含模型的权重.params 和图结构.json 的加载，也没有输入图片的加载。</p>\n<p>因此本博客提供了一个简单的 C++ 部署 TVM 工程，可以在 <a href=\"https://github.com/ForCheetah/TvmCppDeploy\">TvmCppDeploy 项目</a> 找到并下载，用于你的 TVM 项目部署。</p>\n<p>该项目没有使用 <a href=\"https://github.com/apache/tvm/tree/main/apps/howto_deploy\">TVM 项目 howto_deploy</a> 中的 Makefile，而是重写了 CMakeLists.txt 文件，更方便读懂和修改。</p>\n<h1 id=\"使用方式\"><a class=\"anchor\" href=\"#使用方式\">#</a> 使用方式</h1>\n<p>下载 <a href=\"https://github.com/ForCheetah/TvmCppDeploy\">TvmCppDeploy 项目</a> 到你的本地，可以通过下载 zip 文件后解压缩，也可以直接 git：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/ForCheetah/TvmCppDeploy.git</pre></td></tr></table></figure><p>进入项目根目录，进行必要的路径修改。和 <a href=\"https://github.com/apache/tvm/tree/main/apps/howto_deploy\">TVM 项目 howto_deploy</a> 一样，本项目也提供了两种部署方式，所需要修改的内容也有些不同。</p>\n<h1 id=\"重新编译-tvm_runtime\"><a class=\"anchor\" href=\"#重新编译-tvm_runtime\">#</a> 重新编译 tvm_runtime</h1>\n<p>重新编译 tvm_runtime，和个人的 C++ 文件编译在一起，编译好的可执行文件可独立执行。</p>\n<ul>\n<li>第 1 步：打开  <code>src/Resnet50_deploy.cc </code> 文件，找到 81 行  <code>const std::string artifacts_folder(&quot;/home/xiamu/whs/temp/resnet50-tvm/&quot;);</code>  ，将其中的 <code>/home/xiamu/whs/temp/resnet50-tvm/</code>  修改为自己的已经编译好的模型路径，该路径下应该存在有  <code>mod.so, mod.params, mod.json</code> 。</li>\n<li>第 2 步：还是 <code>src/Resnet50_deploy.cc </code> 文件， 找到 132 行，将其中的图片路径 <code>/home/xiamu/whs/python/remote_tvm/imagenet_cat.bin</code>  改为自己的图片路径，该 bin 文件应当是已经转换好的 float 格式文件。</li>\n<li>第 3 步：打开   <code>src/tvm\\_runtime\\_pack.cc</code> ， 将文件中所有的路径中的  <code>/home/xiamu/tvm</code>   修改为你本地 TVM 工程的根目录路径。 修改完一定要检查一下对应的目录中是否有相应的文件。</li>\n<li>第 4 步：打开  <code>CMakeLists.txt</code> , 找到第 10 行  <code>set(TVM_ROOT /home/xianmu/tvm)</code> ，将其中的 <code>/home/xianmu/tvm</code>  改成你本地 TVM 工程的根目录路径。</li>\n<li>为防止编译报错，可以将 <code>部署方式二： tvm_runtime.so 作为动态链接库编译</code> 对应的代码（43 至 63 行） 注释掉（当前可能还没有对其进行修改）。</li>\n<li>第 5 步：编译和执行，在根目录下：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token parameter variable\">-j4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>./MyRunnable</pre></td></tr></table></figure><h1 id=\"tvm_runtimeso-作为动态链接库编译\"><a class=\"anchor\" href=\"#tvm_runtimeso-作为动态链接库编译\">#</a> tvm_runtime.so 作为动态链接库编译</h1>\n<p>tvm_runtime.so 作为动态链接库，仅编译个人的 C++ 文件，运行时需要链接 libtvm_runtime.so</p>\n<p>这种方式的修改与第一种方式略有不同，修改如下：</p>\n<ul>\n<li>第 1 步：打开  <code>src/Resnet50_deploy.cc </code> 文件，找到 81 行  <code>const std::string artifacts_folder(&quot;/home/xiamu/whs/temp/resnet50-tvm/&quot;);</code>  ，将其中的 <code>/home/xiamu/whs/temp/resnet50-tvm/</code>  修改为自己的已经编译好的模型路径，该路径下应该存在有  <code>mod.so, mod.params, mod.json</code> 。</li>\n<li>第 2 步：还是 <code>src/Resnet50_deploy.cc </code> 文件， 找到 132 行，将其中的图片路径 <code>/home/xiamu/whs/python/remote_tvm/imagenet_cat.bin</code>  改为自己的图片路径，该 bin 文件应当是已经转换好的 float 格式文件。</li>\n<li>第 3 步：打开  <code>CMakeLists.txt</code> , 找到第 10 行  <code>set(TVM_ROOT /home/xianmu/tvm)</code> ，将其中的 <code>/home/xianmu/tvm</code>  改成你本地 TVM 工程的根目录路径。将 62 行的 <code>$&#123;TVM_ROOT&#125;/build</code>  libtvm_runtime.so 路径修改为你存放 libtvm_runtime.so 库的路径。</li>\n<li>为防止编译报错，可以将 <code>部署方式一： 重新编译 tvm_runtime</code>  对应的代码（17 至 38 行）注释掉（当前可能还没有对其进行修改）。</li>\n<li>第 5 步：编译和执行，在根目录下：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token parameter variable\">-j4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>./MyExcute</pre></td></tr></table></figure><h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "tvm",
                "cmake",
                "runtime"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/05/30/engine1/",
            "url": "https://forcheetah.github.io/2024/05/30/engine1/",
            "title": "【推理引擎】NCNN和Tengine量化推理逻辑对比",
            "date_published": "2024-05-30T13:44:20.534Z",
            "content_html": "<p>本文讨论了 ncnn 和 tengine 两个框架在量化推理上的逻辑，并比较了它们之间的区别与联系，以及一点自己的思考。</p>\n<blockquote>\n<p>风雨送春归，飞雪迎春到。<br>\n已是悬崖百丈冰，犹有花枝俏。  ---- 教员<br>\n ------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<h1 id=\"量化\"><a class=\"anchor\" href=\"#量化\">#</a> 量化</h1>\n<p>这里仅简单介绍一下量化，不会展开，有机会再详细写一下量化算法。</p>\n<h2 id=\"什么是量化\"><a class=\"anchor\" href=\"#什么是量化\">#</a> 什么是量化</h2>\n<p>量化的核心思想是将连续的浮点数域映射到一个更小的、离散的整数集合上。这通过将浮点数值舍入或映射到最近的整数值来实现，同时保持整个模型表示的动态范围。例如，一个原本使用 32 位浮点数表示的权重值，在量化后可能会被转换为 8 位的整数，这样每个权重只需占用更少的存储空间，并且计算时可以利用专门针对整数优化的硬件加速器，从而提高推理速度并降低能耗。</p>\n<h2 id=\"量化的分类\"><a class=\"anchor\" href=\"#量化的分类\">#</a> 量化的分类</h2>\n<p><img loading=\"lazy\" data-src=\"1717075166684.jpg\" alt=\"分类\"></p>\n<p>tensorflow 官网上的这张图详细的解释了量化的种类和区别：</p>\n<ul>\n<li>基本的 float32 模型：      tensorflow 导出的 TFlite models</li>\n<li>训练后 float16 模型 ：        量化为 float16，仍然是浮点数模型，精度损失较小</li>\n<li>量化感知训练：           在训练过程中就引入量化操作，使模型有机会适应量化带来的误差，通常能获得比单纯训练后量化更好的性能。</li>\n<li>训练后动态范围量化：        对固定参数进行量化，但是权重，但是层的输入输出没有进行量化。  不需要校准数据集</li>\n<li>训练后整形量化：            全整形量化，固定参数和层的输入输出都进行了量化，需要校准数据集</li>\n<li>训练后整形量化 int16 的激活：        激活层采用 int16 量化，其余 int8</li>\n</ul>\n<p>下面介绍和对比的 NCNN 和 Tengine 仅仅指的是运行再 CPU 上是采用的 Int8 量化策略，都属于训练后整形量化。</p>\n<h1 id=\"ncnn-量化推理逻辑\"><a class=\"anchor\" href=\"#ncnn-量化推理逻辑\">#</a> NCNN 量化推理逻辑</h1>\n<h2 id=\"ncnn\"><a class=\"anchor\" href=\"#ncnn\">#</a> ncnn</h2>\n<p><img loading=\"lazy\" data-src=\"1717075407294.jpg\" alt=\"ncnn\"></p>\n<p><a href=\"https://github.com/Tencent/ncnn\">腾讯 NCNN</a><br>\nncnn 是一个为手机端极致优化的高性能神经网络前向计算框架。 ncnn 从设计之初深刻考虑手机端的部署和使用。 无第三方依赖，跨平台，手机端 cpu 的速度快于目前所有已知的开源框架。 基于 ncnn，开发者能够将深度学习算法轻松移植到手机端高效执行， 开发出人工智能 APP，将 AI 带到你的指尖。 ncnn 目前已在腾讯多款应用中使用，如：QQ，Qzone，微信，天天 P 图等。</p>\n<h2 id=\"量化逻辑\"><a class=\"anchor\" href=\"#量化逻辑\">#</a> 量化逻辑</h2>\n<p>一、ncnn 仅对两个部分进行了量化</p>\n<ul>\n<li>i. 权重部分 ： 卷积、深度可分离卷积、全连接 三种算子的 权重，量化因子数量等于权重通道数。</li>\n<li>ii. 输入输出 tensor 部分： 卷积、深度可分离卷积、全连接 三种算子 的输入 tensor，量化因子数量为 1.</li>\n<li>iii. 卷积、深度可分离卷积、全连接算子的 bias 部分维持 float 不变</li>\n</ul>\n<p>这也就是说，只有卷积、深度可分离卷积、全连接三种算子采用量化的 int8 推理，其余算子仍然采用 float 推理。这样的方式是合理的，因为很多算子因为运算效率和精度的原因，不适合量化推理，所以分成量化的和非量化的算子是同行的做法。地平线公司生产的征程系列芯片对算子是否采用量化推理作出了更精细的分类（主动量化、被动量化、手动量化），感兴趣的可以学习一下地平线的量化逻辑。</p>\n<p><img loading=\"lazy\" data-src=\"1717075507282.jpg\" alt=\"结果\"></p>\n<p>上图是一个简单的神经网络模型经 ncnn 量化之后的结果。<br>\n这个模型有两个卷积层 + 一个全连接层，外加一些激活、BN、维度变换层。这里可以看到：</p>\n<ul>\n<li>1. 前三行是权重的量化，后三行是输入输出 tensor 的量化</li>\n<li>2. 第一行是卷积 conv1 权重量化，该卷积有 4 个卷积核，因此量化因子有 4 个 （ncnn 的量化因子之所以这么大，是因为 ncnn 存储的是量化因子的倒数）</li>\n<li>3. 第二行是卷积 conv2 权重量化，该卷积有 8 个卷积核，因此量化因子有 8 个</li>\n<li>4. 第三行是全连接层的权重量化</li>\n<li>5. 后三行是对应算子的输入 tensor 的量化因子，都只有 1 个</li>\n</ul>\n<p>Tengine 框架就不专门介绍算子量化因子的数量了，因为都是一样的。</p>\n<p><img loading=\"lazy\" data-src=\"1717075577838.jpg\" alt=\"ncnn流程\"></p>\n<p>上图是 ncnn 的量化模型在卷积推理时的逻辑，先忽略掉图中的红线流程，只看蓝线部分的一般流程：</p>\n<ul>\n<li>1.ncnn 的基本思路是 float 类型输入，float 类型输出</li>\n<li>2. 跟随蓝线，输入 Input 为 float 类型，经判断不是 int8，将 input 量化为 int8</li>\n<li>3.int8 类型的 input 于 int8 类型的权重进行卷积运算，运算结果是 int32</li>\n<li>4. 判断是否需要转 int8，True 还是 Flase 后面再讲，一般流程中为 False，然后将 int32 反量化为 float</li>\n<li>5.float 经过加偏置 Bias（float 类型）和激活操作之后，得到输出 Output</li>\n</ul>\n<p>一般流程中，卷积、深度可分离卷积和全连接这些算子都要进行 量化 - 计算 - 反量化过程，其他算子仍然采用 float 推理。为了减少量化和反量化的计算，ncnn 对特殊情况做了优化，也就是红线流程：</p>\n<ul>\n<li>1. 当神经网络中存在以下两种情况时走红线流程：1）两个卷积层相邻  conv -&gt; conv   2) 两个卷积层中间夹个 split  conv-&gt; split -&gt; conv</li>\n<li>2. 判断 input 输入是否为 int8，是的话无须量化操作</li>\n<li>3. 权重和 int8 的输入进行卷积计算之后得到 int32 的输出</li>\n<li>4. 再以上两种情况下，to Int8 判断为 True，直接将 int32 强转为 int8</li>\n<li>5. 输出 int8</li>\n</ul>\n<p>这种情况下减少了量化 和反量化的操作，一定程度上提高了运行效率。但是在实际测试中似乎效果不好，原因在于，现在的神经网络在卷积层和卷积层之间，基本上会有偏置、BN、激活等操作，很难会有两个卷积层相连的情况。</p>\n<p>下面是 ncnn 卷积算子的量化推理的简单抽象：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// f: float  I:int8   Scale:量化因子  in: input  w:weight  out:output   bias:偏置</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>f_in <span class=\"token operator\">=</span> I_in * Scale_in    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>f_w  <span class=\"token operator\">=</span> I_w  * Scale_w      </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>f_out <span class=\"token operator\">=</span> f_in * f_w + f_bias</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">=</span> I_in * I_w  * <span class=\"token punctuation\">(</span>Scale_in * Scale_w<span class=\"token punctuation\">)</span> + f_bias</pre></td></tr></table></figure><p>第一行对符号进行了注释。</p>\n<p>第二行和第三行是量化的基本等式</p>\n<p>最后 输出的是  <code>f_out</code> ，反量化因子是  <code>(Scale_in * Scale_w)</code>   ，还要加上 float 类型的 偏置  <code>f_bias</code></p>\n<h1 id=\"tengine量化推理逻辑\"><a class=\"anchor\" href=\"#tengine量化推理逻辑\">#</a> Tengine 量化推理逻辑</h1>\n<h2 id=\"tengine\"><a class=\"anchor\" href=\"#tengine\">#</a> Tengine</h2>\n<p><img loading=\"lazy\" data-src=\"1717075777490.jpg\" alt=\"tengine\"></p>\n<p><a href=\"https://github.com/OAID/Tengine\">Open AI Lib Tengine</a></p>\n<p>Tengine 由 OPEN AI LAB 主导开发，该项目实现了深度学习神经网络模型在嵌入式设备上的快速、高效部署需求。为实现在众多 AIoT 应用中的跨平台部署，本项目使用 C 语言进行核心模块开发，针对嵌入式设备资源有限的特点进行了深度框架裁剪。同时采用了完全分离的前后端设计，有利于 CPU、GPU、NPU 等异构计算单元的快速移植和部署，降低评估、迁移成本。</p>\n<p>尽管 Tengine 已经挺久不再维护了，但是作为一个完全使用 C 语言承担推理部分工作的框架，tengine 还是有轻量、框架结构清晰、易于拓展、容易学习、部署简单等优势，还是非常值得学习的。</p>\n<h2 id=\"量化逻辑-2\"><a class=\"anchor\" href=\"#量化逻辑-2\">#</a> 量化逻辑</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// f: float  int8:int8  int32:int32  Scale:量化因子  in: input  w:weight  out:output   bias:偏置</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 一般性等价关系</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>f_w <span class=\"token operator\">=</span> int8_w * scale_w    f_out <span class=\"token operator\">=</span> int8_out * scale_out    f_in <span class=\"token operator\">=</span> int8_in * scale_in</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>f_out <span class=\"token operator\">=</span> f_w * f_in + int32_bias</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># tengine 等一些推理引擎  直接将 bias 的量化因子定为：</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>f_bias <span class=\"token operator\">=</span> int32_bias * <span class=\"token punctuation\">(</span>scale_w * scale_in<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># float 类型输出等式</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>f_out     <span class=\"token operator\">=</span> f_w * f_in + f_bias</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token operator\">=</span> int8_w * scale_w  *  int8_in * scale_in   + f_bias</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token operator\">=</span> int8_w * int8_in * <span class=\"token punctuation\">(</span>scale_w  * scale_in<span class=\"token punctuation\">)</span>  + int32_bias * <span class=\"token punctuation\">(</span>scale_w * scale_in<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int8_w * int8_in + int32_bias<span class=\"token punctuation\">)</span> * <span class=\"token punctuation\">(</span>scale_w * scale_in<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>int8_out * scale_out <span class=\"token operator\">=</span>    <span class=\"token punctuation\">(</span>int8_w * int8_in + int32_bias<span class=\"token punctuation\">)</span> * <span class=\"token punctuation\">(</span>scale_w  * scale_in<span class=\"token punctuation\">)</span>                                     </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>int8_out <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int8_w * int8_in + int32_bias<span class=\"token punctuation\">)</span> * <span class=\"token punctuation\">(</span>scale_w  * scale_in / scale_out<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>为了能讲清楚 Tengine 的量化推理逻辑，需要先看懂上面的等式推理。</p>\n<p>尽管行数较多，但实际上很简单，只有最基本的多项式推导。首先记一下第一行符号代表的意思，挺直观就不过多介绍了。</p>\n<ul>\n<li>1.tengine 每个算子都是严格的 int8 输入 int8 输出</li>\n<li>2. 一般性等价关系中展示了 float 类型和 其 int8 类型的关系</li>\n<li>3. 第 8 行中，tengine (还有其他一些引擎，如地平线) 对卷积的偏置进行了量化。量化因子直接指定为当前层的 <code>(scale_w * scale_in)</code> 。量化后的模型，偏置为 int32 类型。注意肯定不能是 int8 类型，因为其量化因子是 <code>(scale_w * scale_in)</code> ，采用 int8 绝对会溢出。</li>\n<li>4. 我们先来看第 11 行，float 类型的输出，将等式  <code>f_out   = f_w * f_in + f_bias</code>  中右边的 float 类型全部转为 int 类型，这个等式很直观。此时你也应该看到了将 bias 的量化因子直接定为 <code>(scale_w * scale_in)</code>  的好处了。</li>\n<li>5. 继续推理等式，第 16 行，将 11 行的等式左边也换成 int8 类型。（ tengine 输入输出都是 int8）</li>\n<li>6.17 行，int8_out ，也就是 int8 类型的输出，等价于 数据运算  <code>int8_w * int8_in + int32_bias</code>  乘上量化因子  <code>scale_w  * scale_in / scale_out</code></li>\n</ul>\n<p>从上面的推理来看，把  <code>scale_w  * scale_in / scale_out</code>  作为一个整体，每个卷积算子只需要进行一次量化运算就行了，和 ncnn (每个卷积算子都需要 量化 反量化 两次计算) 相比，足足减少了一半的量化运算。</p>\n<p>但是上面的推理忽略了一个问题，激活。基本上每个卷积层后面都跟着激活层，<strong>激活层能不能在量化形式下（整形状态）进行</strong>呢，这又是一个值得讨论的问题。</p>\n<p>tengine 没有去讨论这个问题，将上面的推理分成两步去做，先通过 <code> * scale_w  * scale_in</code>  反量化为 float 类型，做激活，然后再通过   <code>/ scale_out </code>  量化为 int8 类型，具体过程看下图：</p>\n<p><img loading=\"lazy\" data-src=\"1717075907713.jpg\" alt=\"运行逻辑\"></p>\n<p>再简单介绍一下过程，这个过程在前面的公式推理中已经基本提到了。</p>\n<ul>\n<li>1. 从图中可以看到，输入输出都是 int8</li>\n<li>2.int8 类型的 输入和权重 经过卷积层 得到的输出是 int32 类型，再于 int32 类型的 bias 相加</li>\n<li>3. 为了在 float 形式下进行激活操作， <code> * scale_w  * scale_in</code>  反量化为 float 类型</li>\n<li>4. 激活</li>\n<li>5. 通过 <code>/ scale_out </code>  量化为 int8 类型</li>\n</ul>\n<h1 id=\"量化讨论和疑问留存\"><a class=\"anchor\" href=\"#量化讨论和疑问留存\">#</a> 量化讨论和疑问留存</h1>\n<h2 id=\"简单比较\"><a class=\"anchor\" href=\"#简单比较\">#</a> 简单比较</h2>\n<p><img loading=\"lazy\" data-src=\"1717075973433.jpg\" alt=\"其他算子\"></p>\n<ul>\n<li>a.tengine 和 ncnn 都是将权重量化为 int8，ncnn 将 bias 保留 float 形式，tengine 将 bias 量化为 int32。float 和 int32 所占字节相同，模型量化前后的空间占用上，两者是相当的。</li>\n<li>b. 前面提到 ncnn 仅有 3 个算子采用量化推理，这是合理的，ncnn 主要在手机等设备上运行，效率很高；专门设计的 NPU 芯片支持十几个甚至更多 的算子量化推理；而 tengine 在架构上没有区分量化运行的算子和非量化运行的算子，所有算子一股脑全部采用量化推理，至少直到不再维护后的<a href=\"https://github.com/OAID/Tengine\">最后一个版本</a>都是这样。笔者认为这个设计很失败，因为大量不支持量化推理的算子，不得不先反量化，然后进行 float 运算，再量化，徒徒增加了时间、空间，还降低了精度。</li>\n<li>c. 讨论一下 《Tengine 量化推理逻辑》一节中提到的 <strong>激活层能不能在量化形式下（整形状态）进行</strong> 这个问题。由于大多数卷积算子用到的激活函数 是 Relu，而我们用到的又是 int8 这种对称量化，在这些条件下，理论是可以直接在 整形条件下进行激活计算的。那么整个过程就从下图的左边变成了右边，减少了量化一半的计算量。笔者修改 Tengine 工程并验证了一下，从结果来区别不大。当然笔者没有进行大量测试，感兴趣的欢迎测试和交流。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"1717076022465.jpg\" alt=\"compare\"></p>\n<h2 id=\"疑问留存\"><a class=\"anchor\" href=\"#疑问留存\">#</a> 疑问留存</h2>\n<p>既然量化和反量化过程费时又费力 ，那么有没有一种可能，多个连续的卷积层条件下，<strong>只在首尾进行量化和反量化</strong>呢？</p>\n<p>本博客将在不久后，通过公式、仿真的形式探讨一下其可能性及条件。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "accelerate",
                "conv",
                "tengine",
                "ncnn"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/05/26/zatan3D/",
            "url": "https://forcheetah.github.io/2024/05/26/zatan3D/",
            "title": "【3D建模】IS-7攻城锤流纹岩皮肤展示",
            "date_published": "2024-05-26T08:19:13.185Z",
            "content_html": "<h1 id=\"坦克世界皮肤图片\"><a class=\"anchor\" href=\"#坦克世界皮肤图片\">#</a> 坦克世界皮肤图片</h1>\n<p><img loading=\"lazy\" data-src=\"1024x.jpg\" alt=\"洪水猛兽\"></p>\n<p><img loading=\"lazy\" data-src=\"24x.jpg\" alt=\"突击重坦\"></p>\n<p><img loading=\"lazy\" data-src=\"2x.jpg\" alt=\"钢铁之盾\"></p>\n<p><img loading=\"lazy\" data-src=\"2024x.jpg\" alt=\"胜利之师\"></p>\n<p>IS-7 皮肤台词：&quot; 原来是这样的： 如果有人回到基地，至少一辆坦克，那就算是一次营救任务。如果无人返回，那就是一次侦察任务。那就是他们在总部报告中对我们的分类方式，而我就是参加了一次营救任务。事情是这样的：我们整个小队一起移动，一些奇怪的大雾导致能见度为 0，坦克只能摸索着前行，就好像在牛奶中前进一样。然后坦克出现了。D 系的坦克。我记得它们的外形，也知道如何应对它们。你也知道，我以前经历过一些战事。接下来又遇到了没有沙子的沙尘暴… 我也不知道该怎么解释。我经历了持续的耳鸣，一些嗡嗡的声音。眼睛仿佛沾满了焦油。奇怪的低语。黑暗… 如同活物一般。我们摔得东倒西歪，被分散了。我害怕吗？当然不怕。起初我们都很困惑，但后来就适应了。没有什么区别，我们来都来了，还有什么好怕的？什么都改变不了。服从命令，祈祷可以回家。所以我就回来了… 一个人回来了。上尉，你的问题很奇怪。当小队重新集结时，我会回去吗？你已经知道答案，我们发过同样的誓言。而这只会发生一次。发了誓，就要遵守它。现在不是犹豫不决的时候了。我不希望加入一次... 侦察任务。当我们抵达那里的时候... 我们会挺过去的。</p>\n<h1 id=\"一些制作过程\"><a class=\"anchor\" href=\"#一些制作过程\">#</a> 一些制作过程</h1>\n<p><img loading=\"lazy\" data-src=\"0XGEG466R.png\" alt=\"solidworks 3D 建模\"></p>\n<p><img loading=\"lazy\" data-src=\"aaaaa.png\" alt=\"solidworks 3D 建模\"></p>\n<p><img loading=\"lazy\" data-src=\"6I6P.png\" alt=\"solidworks 3D 建模\"></p>\n<p><img loading=\"lazy\" data-src=\"194309.jpg\" alt=\"打印件出炉\"></p>\n<p><img loading=\"lazy\" data-src=\"120504.jpg\" alt=\"组装\"></p>\n<p><img loading=\"lazy\" data-src=\"120514.jpg\" alt=\"上色\"></p>\n<h1 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>该 IS-7 流纹岩皮肤模型还履带转动、炮塔旋转、炮管上下、夜视灯开关和发动机声音模拟功能。</p>\n<p>感兴趣的小伙伴可以到 bilibili 观看制作过程的视频呀！</p>\n<p>视频链接：</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Tp4y1c719/\">【坦克模型】IS-7 攻城锤 坦克世界 is7 流纹岩 3D 皮肤模型</a></p>\n",
            "tags": [
                "tank",
                "zatan"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/05/24/tvm1/",
            "url": "https://forcheetah.github.io/2024/05/24/tvm1/",
            "title": "【TVM】根据例子走通代码库",
            "date_published": "2024-05-24T14:49:36.319Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>最近开始学习 TVM。感觉 TVM 英文文档中 <a href=\"https://tvm.apache.org/docs/dev/tutorial/codebase_walkthrough.html\">TVM Codebase Walkthrough by Example</a>    一节对于理解 TVM 工程非常有用。本篇文章只是翻译，可以直接跳转查看英文全文。</p>\n<blockquote>\n<p>这个时代有这么多愿意开源并将技术介绍给我们的行业大牛，真是我们的荣幸，膜拜！<br>\n------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<h1 id=\"codebase-structure-overview\"><a class=\"anchor\" href=\"#codebase-structure-overview\">#</a> Codebase Structure Overview</h1>\n<p>在 TVM 存储库的根目录中，我们有以下子目录，它们共同构成了大部分代码库。</p>\n<ul>\n<li><strong>src</strong><br>\nC++ code for operator compilation and deployment runtimes.<br>\n 算子编译 、 runtime 部署 的 C++ 代码</li>\n<li><strong>src/relay</strong><br>\nImplementation of Relay, a new functional IR for deep learning framework.<br>\nRelay IR 的实现      算子的映射关系在 src/relay/op</li>\n<li><strong>python</strong><br>\nPython frontend that wraps C++ functions and objects implemented in src.<br>\npython 前端</li>\n<li><strong>src/topi</strong><br>\nCompute definitions and backend schedules for standard neural network operators.<br>\n 计算标准神经网络算子的定义和后端调度</li>\n</ul>\n<p>TVM 中 Python 和 C++ 的互操作性不是单向的。尽管在 TVM 中 C++ 完成繁重的内部执行工作，Python 完成用户接口， TVM 中也存在 C++ 调用 Python 的情况：For example, the convolution operator is implemented in Python, and its implementation is invoked from C++ code in Relay.（Relay 中的 C++ 调用 Python 实现的卷积算子）</p>\n<h1 id=\"vector-add-example\"><a class=\"anchor\" href=\"#vector-add-example\">#</a> Vector Add Example</h1>\n<p>使用 vector add 的例子来查看底层 TVM API.</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">1024</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>A <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>te<span class=\"token punctuation\">.</span>placeholder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>B <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>te<span class=\"token punctuation\">.</span>placeholder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>C <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>te<span class=\"token punctuation\">.</span>compute<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> i<span class=\"token punctuation\">:</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> B<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里面 A、B、C 都是  <code>tvm.tensor.Tensor</code>   其 Python 定义位于 <code>python/tvm/te/tensor.py</code> . 支撑的 C++ 定义位于 <code>include/tvm/te/tensor.h</code>  和 <code>src/te/tensor.cc</code>  所有的 Python 类型定义都能找到对应的相同名字的 C++ 定义。</p>\n<p>Python 对 C++ 的包装位于  <code>python/tvm/_ffi/</code> 。</p>\n<p>一个 Tensor 包含一个 Operation 类，定义于 python/tvm/te/tensor.py，对应的 C++ 实现位于 <code>include/tvm/te/operation.h</code>  和 <code>src/tvm/te/operation</code>  。 <code>Tensor</code>  是  <code>Operation</code>  类的输出。</p>\n<p>我们将输出张量 C 对应的操作传递给 <code>tvm.te.create_schedule()</code>  函数 （来自于 <code>python/tvm/te/schedule.py</code> 。）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>te<span class=\"token punctuation\">.</span>create_schedule<span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">.</span>op<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这个函数映射到 C++ 函数 <code>include/tvm/schedule.h</code> 。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>inline Schedule create_schedule<span class=\"token punctuation\">(</span>Array<span class=\"token operator\">&lt;</span>Operation<span class=\"token operator\">></span> ops<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> Schedule<span class=\"token punctuation\">(</span>ops<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>Schedule</code>  包含 <code>Stage</code>  输出  <code>Operation</code>  的集合。</p>\n<p><code>Stage</code>  对应于一个操作 <code>Operation</code> 。上面的 vector add 操作中有两个 placeholder ops 和一个 compute op. 所以 <code>Schedule s</code>  有三个状态  <code>Stage</code> ，每个 <code>Stage</code>  持有以下信息： 循环嵌套结构、每个循环的类型（ <code>Parallel，Vectorized，Unrolled</code> ）、以及在下一个循环嵌套 <code>Stage</code>  中在哪里执行它自己的计算。</p>\n<p><code>Schedule</code>  和 <code>Stage</code>  本身定义在 <code>tvm/python/te/schedule.py</code> ，  <code>include/tvm/te/schedule.h</code> ， 和 <code>src/te/schedule/schedule_ops.cc</code> 。</p>\n<p>为简单起见，我们使用 <code>tvm.build(...)</code>  处理上方 <code>create_schedule()</code>  函数创建的默认 <code>Schedule s</code>  和 &lt;em&gt;。我们必须添加必要的线程绑定，来使得其能在 GPU 上运行：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>target <span class=\"token operator\">=</span> <span class=\"token string\">\"cuda\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bx<span class=\"token punctuation\">,</span> tx <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">.</span>op<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> factor<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span>bx<span class=\"token punctuation\">,</span> tvm<span class=\"token punctuation\">.</span>te<span class=\"token punctuation\">.</span>thread_axis<span class=\"token punctuation\">(</span><span class=\"token string\">\"blockIdx.x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span> tvm<span class=\"token punctuation\">.</span>te<span class=\"token punctuation\">.</span>thread_axis<span class=\"token punctuation\">(</span><span class=\"token string\">\"threadIdx.x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fadd <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>tvm.build(...)</code> ，定义在 <code>python/tvm/driver/build_module.py</code> ， 需要输入一个 <code>Schedule</code> ;  <code>input</code> , <code>output Tensor</code> ; 以及一个 <code>target</code> 。返回一个 <code>tvm.runtime.Module</code> 。</p>\n<p>整个 <code>tvm.build(...)</code>  过程可以分成两步：</p>\n<ul>\n<li>\n<p>i. 降级 高级的、初始的循环嵌套结构被转换为 最终的、低级的 IR</p>\n</li>\n<li>\n<p>ii. 代码生成 low level IR 生成目标机器码</p>\n</li>\n</ul>\n<p>降级是通过 <code>tvm.lower()</code>  函数完成的，它定义在 <code>python/tvm/build\\_module.py</code> 。第一，指定绑定推理，一个最初的循环嵌套结构就创建好了。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">lower</span><span class=\"token punctuation\">(</span>sch<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>          args<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>          name<span class=\"token operator\">=</span><span class=\"token string\">\"default_function\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          binds<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          simple_mode<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   bounds <span class=\"token operator\">=</span> schedule<span class=\"token punctuation\">.</span>InferBound<span class=\"token punctuation\">(</span>sch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   stmt <span class=\"token operator\">=</span> schedule<span class=\"token punctuation\">.</span>ScheduleOps<span class=\"token punctuation\">(</span>sch<span class=\"token punctuation\">,</span> bounds<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>边界推断是推断所有循环边界和中间缓冲区大小的过程。如果你的目标是 CUDA，且你用了 share memory，它需要的最小 size 在此处确定。绑定推理时在 <code>src/te/schedule/bound.cc，src/te/schedule/graph.cc </code>  和  <code>src/te/schedule/message\\_passing.cc</code>  中实现的。</p>\n<p><code>stmt</code> ， <code>ScheduleOps()</code>  的输出，表示一个初识的循环嵌套结构。如果在 schedule 中已经应用了 <code>reorder</code>  和 <code>split</code>  原语，那么初始的循环嵌套结构已经反映了这些变化。 <code>ScheduleOps()</code>  定义在 <code>rc/te/schedule/schedule_ops.cc</code> 。</p>\n<p>接下来应用一些 lowering passes to  <code>stmt</code>  . 这些 passes 在 <code>src/tir/pass</code>  子文件夹下实现。举个例子，如果在你的 <code>schedule</code>  中应用了 <code>vectorize</code>  或者 <code>unroll</code>  原语，他们会被应用到循环 vectorization 和 unrolling passes。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>stmt <span class=\"token operator\">=</span> ir_pass<span class=\"token punctuation\">.</span>VectorizeLoop<span class=\"token punctuation\">(</span>stmt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>stmt <span class=\"token operator\">=</span> ir_pass<span class=\"token punctuation\">.</span>UnrollLoop<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    stmt<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cfg<span class=\"token punctuation\">.</span>auto_unroll_max_step<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cfg<span class=\"token punctuation\">.</span>auto_unroll_max_depth<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cfg<span class=\"token punctuation\">.</span>auto_unroll_max_extent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cfg<span class=\"token punctuation\">.</span>unroll_explicit<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>在降级 lowering 结束后， <code>build()</code>  函数生成目标机器代码。如果你的设备是 X86, 这个代码可能包含 SSE 或者 AVX 指令；如果是 CUDA 设备，将包含 PTX 指令。 此外，除了目标特定的机器代码之外，TVM 还生成负责内存管理、内核启动等的主机端代码。</p>\n<p><code>build\\_module()</code>  函数完成代码生成，定义在 <code>python/tvm/target/codegen.py</code> 。在 C++ 端代码生成定义在 <code>src/target/codegen</code> 。 <code>build\\_module()</code>  Python 函数会搜索在 <code>src/target/codegen/codegen.cc</code>  中的 <code>build()</code>  函数。</p>\n<p><code>build()</code>  函数 <code>PackedFunc</code>  注册表中为目标设备查找代码生成器，并调用找到的函数。例如， <code>codegen.build\\_cuda</code>  函数注册在 <code>src/codegen/build_cuda_on.cc</code> ，就像这样：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>TVM_REGISTER_GLOBAL<span class=\"token punctuation\">(</span><span class=\"token string\">\"codegen.build_cuda\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span>set_body<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span> TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">*</span>rv <span class=\"token operator\">=</span> BuildCUDA<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上方的 <code>BuildCUDA()</code>  函数使用定义在 <code>src/codegen/codegen_cuda.cc</code>  的 <code>CodeGenCUDA</code>  类，从 lowered IR 生成 CUDA kernel source，并使用 NVRTC 编译 kernel。如果你的目标设备使用 LLVM，包括 X86、ARM、NVPTX 和 AMDGPU，代码可由定义在 <code>src/codegen/llvm/codegen_llvm.cc</code>  的 <code>CodeGenLLVM</code>  来生成。 <code>CodeGenLLVM</code>  将 TVM IR 转换成 LLVM IR，运行一些 LLVM 优化 passes，以及生成目标机器码。</p>\n<p>在 <code>src/codegen/codegen.cc</code>  中的 <code>Build()</code>  函数会返回一个 <code>runtime::Module</code>  类，它定义在 <code>include/tvm/runtime/module.h</code>  和 <code>src/runtime/module.cc</code> 。一个 <code>Module</code>  类是一个潜在目标 设备的特定 <code>ModuleNode</code>  的容器。</p>\n<p>每个后端都实现一个 <code>ModuleNode</code>  的子类，来添加目标特定的 runtime API 调用。 例如，CUDA 后端在 <code>src/runtime/cuda/cuda_module.cc</code>  实现 <code>CUDAModuleNode</code>  类，来管理 CUDA 驱动 API。上方的 <code>BuildCUDA()</code>  函数用 <code>runtime::Module</code>  包装了 <code>CUDAModuleNode</code> ，并包装到 Python 端。LLVM 后端在 <code>src/codegen/llvm/llvm_module.cc</code>  实现了 <code>LLVMModuleNode</code> ，处理了 JIT 执行和编译代码。其他对应各个后端的 <code>ModuleNode</code>  子类可以在 <code>src/runtime</code>  子文件夹找到。<br>\n返回的 <code>module</code> ，可以被认作编译函数和设备 API 的组合，可以被 TVM 的 NDArray objects 调用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dev <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>uniform<span class=\"token punctuation\">(</span>size<span class=\"token operator\">=</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dev<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>b <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>uniform<span class=\"token punctuation\">(</span>size<span class=\"token operator\">=</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dev<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>c <span class=\"token operator\">=</span> tvm<span class=\"token punctuation\">.</span>nd<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>C<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dev<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fadd<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>output <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在幕后，TVM 会自动分配设备内存并管理内存传输。为了实现这个目标，每个后端都需要继承在 <code>include/tvm/runtime/device_api.h</code>  定义的 <code>DeviceAPI</code>  类，使用设备特定的 API 重写里面的内存管理方法。例如，CUDA 后端在 <code>src/runtime/cuda/cuda_device_api.cc</code>  使用 <code>cudaMalloc</code> 、 <code>cudaMemcpy</code>  实现了 <code>CUDADeviceAPI</code> .</p>\n<p>第一次使用 <code>fadd(a, b, c)</code>  调用编译后的模块时，会调用  <code>ModuleNode</code>  的  <code>GetFunction()</code>  方法来获取可用于内核调用的  <code>PackedFunc</code> 。例如，在 <code>src/runtime/cuda/cuda_module.cc</code>  CUDA 后端实现了 <code>CUDAModuleNode::GetFunction()</code>  函数如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PackedFunc CUDAModuleNode<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>GetFunction<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      const std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      const std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>shared_ptr<span class=\"token operator\">&lt;</span>ModuleNode<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> sptr_to_self<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  auto it <span class=\"token operator\">=</span> fmap_<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  const FunctionInfo<span class=\"token operator\">&amp;</span> info <span class=\"token operator\">=</span> it<span class=\"token operator\">-</span><span class=\"token operator\">></span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  CUDAWrappedFunc f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  f<span class=\"token punctuation\">.</span>Init<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">,</span> sptr_to_self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>arg_types<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>launch_param_tags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> PackFuncVoidAddr<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>arg_types<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>PackedFunc</code>  的重载函数 <code>operator()</code>  会被调用。从而会调用定义在 <code>src/runtime/cuda/cuda_module.cc</code>  的 <code>CUDAWrappedFunc</code>  的 <code>operator()</code>  函数，最终我们会看到 <code>cuLaunchKernel</code>  驱动会调用：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CUDAWrappedFunc</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>TVMArgs args<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                  TVMRetValue<span class=\"token operator\">*</span> rv<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                  <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> void_args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> device_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">CUDA_CALL</span><span class=\"token punctuation\">(</span><span class=\"token function\">cudaGetDevice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>device_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fcache_<span class=\"token punctuation\">[</span>device_id<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      fcache_<span class=\"token punctuation\">[</span>device_id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> m_<span class=\"token operator\">-></span><span class=\"token function\">GetFunc</span><span class=\"token punctuation\">(</span>device_id<span class=\"token punctuation\">,</span> func_name_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    CUstream strm <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CUstream<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CUDAThreadEntry</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ThreadLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    ThreadWorkLoad wl <span class=\"token operator\">=</span> launch_param_config_<span class=\"token punctuation\">.</span><span class=\"token function\">Extract</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    CUresult result <span class=\"token operator\">=</span> <span class=\"token function\">cuLaunchKernel</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        fcache_<span class=\"token punctuation\">[</span>device_id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        wl<span class=\"token punctuation\">.</span><span class=\"token function\">grid_dim</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        wl<span class=\"token punctuation\">.</span><span class=\"token function\">grid_dim</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        wl<span class=\"token punctuation\">.</span><span class=\"token function\">grid_dim</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        wl<span class=\"token punctuation\">.</span><span class=\"token function\">block_dim</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        wl<span class=\"token punctuation\">.</span><span class=\"token function\">block_dim</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        wl<span class=\"token punctuation\">.</span><span class=\"token function\">block_dim</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> strm<span class=\"token punctuation\">,</span> void_args<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>本文概括了 TVM 如何编译和执行函数。 虽然本文没有详细说明 TOPI 或 Relay，但最终所有神经网络算子都会经历与上述相同的编译过程。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "accelerate",
                "conv",
                "tvm"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/05/24/category/",
            "url": "https://forcheetah.github.io/2024/05/24/category/",
            "title": "博客汇总目录",
            "date_published": "2024-05-24T13:25:53.973Z",
            "content_html": "<h1 id=\"暮冬z羡慕-的博客-文章汇总\"><a class=\"anchor\" href=\"#暮冬z羡慕-的博客-文章汇总\">#</a> 暮冬 Z 羡慕 的博客  文章汇总</h1>\n<h1 id=\"卷积加速算法\"><a class=\"anchor\" href=\"#卷积加速算法\">#</a> 卷积加速算法</h1>\n<ul>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/05/23/conv1/\">【Im2Col】卷积加速算法【1】 NCHW</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/05/23/conv2/\">【Im2Col】卷积加速算法【2】NHWC</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/06/27/conv3/\">【im2col】昇腾卷积加速算法</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/07/07/conv4/\">【Winograd】卷积加速算法原理及实现</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/12/20/conv5/\">【gemm】Gemm 计算加速</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/12/24/conv6/\">【gemm】内存对齐</a></p>\n</li>\n<li>\n<p>[【conv 加速】NVDLA 卷积加速算法]</p>\n</li>\n</ul>\n<h1 id=\"ai推理引擎\"><a class=\"anchor\" href=\"#ai推理引擎\">#</a> AI 推理引擎</h1>\n<ul>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/06/16/engine2/\">【推理引擎】常见推理引擎</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/05/30/engine1/\">【推理引擎】NCNN 和 Tengine 量化推理逻辑对比</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2025/01/03/quanti01/\">【量化】连续卷积层首尾量化的可行性</a></p>\n</li>\n<li>\n<p>[【推理引擎】Tengine 框架结构介绍]</p>\n</li>\n</ul>\n<h1 id=\"ai编译器\"><a class=\"anchor\" href=\"#ai编译器\">#</a> AI 编译器</h1>\n<ul>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/06/10/deployTVM/\">【TVM】C++ 部署运行 TVM</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/06/18/deployTVMPython/\">【TVM】Python 脚本实现模型编译和保存</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/10/18/aicompile01/\">【AI 编译】Tiling 操作能优化什么时间</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2025/01/14/aicompile02/\">【AI 编译】如何进行 layer-group</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2025/01/15/aicompile03/\">【AI 编译】layer-group 之后如何 tiling</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2025/02/05/aicompile04/\">【AI 编译】如何进行内存分配</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/05/24/tvm1/\">【TVM】根据例子走通代码库</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/10/10/tvm01/\">【TVM】通过代码学习编译流程【1】必要知识</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/10/13/tvm02/\">【TVM】通过代码学习编译流程【2】模型转换</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/10/17/tvm03/\">【TVM】通过代码学习编译流程【3】模型编译</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/10/22/tvm3.5/\">【TVM】通过代码学习类【3.5】Pass</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/10/21/tvm04/\">【TVM】通过代码学习编译流程【4】BuildRelay</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/10/31/tvm05/\">【TVM】通过代码学习编译流程【5】FuseOps</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/10/25/tvm06/\">【TVM】通过代码学习编译流程【6】CodeGen</a></p>\n</li>\n</ul>\n<h1 id=\"问题解决\"><a class=\"anchor\" href=\"#问题解决\">#</a> 问题解决</h1>\n<ul>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/05/15/openBlas/\">openBlas 库的安装与简单使用</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/05/14/cpplib/\">C 语言工程调用 Cpp 库解决方案</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/07/05/problem3/\">SystemC 等待异步事件解决方案</a></p>\n</li>\n</ul>\n<h1 id=\"杂谈\"><a class=\"anchor\" href=\"#杂谈\">#</a> 杂谈</h1>\n<ul>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/05/26/zatan3D/\">【3D 建模】IS-7 攻城锤流纹岩皮肤展示</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/06/15/zatanE3/\">【3D 建模】T110E3 卡迪夫蓝调皮肤模型</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2024/08/04/zatanNoval/\">【感想】写作进度报告 1</a></p>\n</li>\n<li>\n<p><a href=\"https://forcheetah.github.io/2025/01/21/zatanNoval2/\">【感想】写作进度报告 2</a></p>\n</li>\n</ul>\n<h1 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h1>\n<blockquote>\n<p>持续更新中 ...</p>\n</blockquote>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "accelerate",
                "conv"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/05/23/conv2/",
            "url": "https://forcheetah.github.io/2024/05/23/conv2/",
            "title": "【Im2Col】卷积加速算法【2】NHWC",
            "date_published": "2024-05-23T12:12:27.275Z",
            "content_html": "<p>本文为最基本的 Im2Col 算法的原理及实现。</p>\n<p><a href=\"https://forcheetah.github.io/2024/05/23/conv1/\">【Im2Col】卷积加速算法 NCHW</a> 【1】中已经讲了在输入和输出都是 nchw 排布下 Im2Col 算法的实现方式。常见的 tensor 输入有 NCHW 和 NHWC 两种内存排布方式，不同的排布方式各有优劣。排布方式不同，Im2Col 也有区别，本篇主要是在 NHWC 内存排布情况下的 Im2Col 算法原理和基本实现。</p>\n<blockquote>\n<p>慌乱的时候全是破绽，冷静下来，能够找到对方的破绽。<br>\n------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<h1 id=\"两种内存排布\"><a class=\"anchor\" href=\"#两种内存排布\">#</a> 两种内存排布</h1>\n<p>卷积神经网络（CNN）的输入数据布局主要有两种标准：NCHW（通道、高度、宽度）和 NHWC（高度、宽度、通道）。主要深度学习框架对这两种布局的支持情况如下：</p>\n<p>PyTorch：主要采用 NCHW 格式。这是 PyTorch 在大多数情况下的默认布局，尤其是在涉及 GPU 计算时。</p>\n<p>Caffe：采用 NCHW 格式。Caffe 框架倾向于使用这种通道优先的布局。</p>\n<p>TensorFlow：默认使用 NHWC 格式，特别是在早期版本中，这是由于 TensorFlow 最初设计时主要针对 CPU 进行优化，NHWC 布局在这种场景下有更好的内存访问局部性。<br>\nKeras：Keras 本身是一个高级 API，集成到 Tensorflow 之后跟随 tensorflow 的内存排布方式。</p>\n<h1 id=\"内存排布的优缺点\"><a class=\"anchor\" href=\"#内存排布的优缺点\">#</a> 内存排布的优缺点</h1>\n<p><strong>NCHW 格式的优点：</strong></p>\n<ul>\n<li>\n<p>1. 在 GPU 中计算卷积时，比 NHWC 要快 2.5 倍左右。这是因为在 GPU 中，NCHW 格式的数据布局更符合 GPU 的内存访问模式和计算方式。</p>\n</li>\n<li>\n<p>2.NCHW 格式更适合那些需要对每个通道单独做运算的操作，比如 “MaxPooling”。这是因为 NCHW 格式的同一通道的像素值连续排布，使得对每个通道的数据可以更高效地进行运算。</p>\n</li>\n</ul>\n<p><strong>NCHW 格式的缺点：</strong></p>\n<ul>\n<li>\n<p>1.NCHW 格式需要把所有通道的数据都读取到，才能进行运算，因此在计算时需要的存储更多。这可能会限制其在一些具有限制的硬件环境下的应用。</p>\n</li>\n<li>\n<p>2.NCHW 格式的访存与计算的控制逻辑相对简单，这使得在一些需要精细控制访存和计算的场景下，可能不是最佳的选择。</p>\n</li>\n</ul>\n<p><strong>NHWC 格式的优点：</strong></p>\n<ul>\n<li>\n<p>1.NHWC 格式的访存局部性更好。这意味着每三个输入像素就可以得到一个输出像素，因此在一些特定的计算操作中，可以更高效地利用硬件资源。</p>\n</li>\n<li>\n<p>2.NHWC 格式更适合那些需要对不同通道的同一像素做某种运算的操作，比如 “Conv1x1”。这是因为 NHWC 格式的不同通道中的同一位置元素顺序存储，使得对不同通道的数据可以进行更高效的运算。</p>\n</li>\n<li>\n<p>3.NHWC 格式在早期的 CPU 开发中应用较多，因此对于主要基于 CPU 开发的深度学习框架和算法，NHWC 格式可能更受欢迎。</p>\n</li>\n</ul>\n<p><strong>NHWC 格式的缺点：</strong></p>\n<ul>\n<li>\n<p>1. 在使用 GPU 进行计算加速时，NHWC 格式不如 NCHW 格式高效。这是因为 NCHW 格式更符合 GPU 的内存访问模式和计算方式。</p>\n</li>\n<li>\n<p>2. 对于一些需要精细控制访存和计算的场景，NHWC 格式的控制逻辑可能相对复杂一些。</p>\n</li>\n</ul>\n<h1 id=\"im2col变换\"><a class=\"anchor\" href=\"#im2col变换\">#</a> Im2Col 变换</h1>\n<p>Im2col 算法是将卷积转换成两个 2D 矩阵乘运算。(kernel_2D * input_2D)  与 (input_2D * kernel_2D) 矩阵乘的顺序不同，所需要的 4D 到 2D 变换也不同，我们先将 input_2D 放在前面，也就是 (input_2D * kernel_2D)，最后再讨论 kernel_2D 放在前面还是后面的区别。</p>\n<p>依然采用下面这个简单的卷积样例，输入 tensor 按照 nhwc 排布，所以是一个 3 通道 5*5 的 input tensor。卷积核有 9 个，pad 为 1，因此输出是【1，5，5，9】。</p>\n<p><img loading=\"lazy\" data-src=\"1716464754440.jpg\" alt=\"卷积样例\"></p>\n<p>直接展开 2D 形式，两个矩阵形式如下。</p>\n<p><img loading=\"lazy\" data-src=\"1716464821580.jpg\" alt=\"Im2Col 2D示意图\"></p>\n<p><strong>上图右边是权重 kernel_2D</strong></p>\n<ul>\n<li>\n<p>1. 原 kernel_4D 维度为【9，3，3，3】，拥有 9 个 kernel，将其第一个 kernel 按照【C_in, Kh, Kw】的顺序展成一列，也就是第一列绿色部分，共有 27 个数。</p>\n</li>\n<li>\n<p>2. 依次将余下 8 个 kernel 按照相同的方式展成一列，就得到了 kernel_2D。</p>\n</li>\n<li>\n<p>3.kernel_2D 维度为【27，9】</p>\n</li>\n</ul>\n<p>从内存排布上来看，需要将原本的 kernel_4D 进行数据重排。</p>\n<p><strong>上图左边是输入 input_2D</strong></p>\n<ul>\n<li>\n<p>1. 矩阵乘是 行 * 列；kernel_2D 一列代表一个卷积核【C_in, Kh, Kw】；所以 input_2D 的一行是 “一个卷积核滑动窗口” 对应的数据，也就是 27 个。</p>\n</li>\n<li>\n<p>2. 第一行橘黄色部分是第一个滑动窗口对应的数据，未填的数代表 Pad。</p>\n</li>\n<li>\n<p>3. 滑动窗口需要纵移 5 次，每次纵移需要横移 5 次，因此有 5*5 行数据。</p>\n</li>\n<li>\n<p>4. 例如第 5 行蓝色是滑动窗口在图一中向右移动到第 5 格，蓝色格子时对应的数据。由于 Input_2D 的维度是 NHWC，也就是说图一中 “0，25，50” 三个数在内存中是相邻的（分别位于同一个 HW 位置的第一、第二、第三通道）。为了减少数据的搬运，这些连续的数被搬运到一起。即：图一中 3*3 的蓝色滑动窗口中前 3 个都对应 Pad，所以图二第 5 行蓝色行先有 3*3 (channel) 个 Pad 数据。图一蓝色滑动窗口在第 4 和第 5 个格子出现数据，所以图二 9 个 Pad 后面跟着 3，28，53；4，29，54。紧接着又出现了 Pad，以此类推。</p>\n</li>\n<li>\n<p>5. 总结：25 次窗口滑动，每次滑动形成窗口对应的一行 27 个数据。input_2D 的维度为【25，27】</p>\n</li>\n<li>\n<p>6. 总结完 input_2D 的数据排布，那么 kernel_2D 每一列的数据具体怎么排也就清楚了，需要和 input_2D 的每一行一一对应。</p>\n</li>\n</ul>\n<p><strong>输出 output</strong></p>\n<p>input_2D【25，27】* kernel_2D 【27，9】得到结果 output_2D 【25，9】，刚好是输出 output【1，5，5，9】的内存排布方式。因此输出也不需要额外的内存转换。</p>\n<h1 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h1>\n<p>这里没有专门写 Im2Col 在 NHWC 排布情况下的实现代码。<br>\n可以在 github 上 <a href=\"https://github.com/ForCheetah/ConvAccelerate\">卷积加速算法模拟</a> 下载完整的测试代码。并参考 “TestIm2FlavorConvLayer ();” 函数实现方式。可以阅读文章：<a href=\"https://forcheetah.github.io/2024/05/15/accelerate1/\">im2col 卷积加速算法 NCHW</a>，参考 NCHW 排布下的代码实现，自行完成 NHWC 内存排布情况下的算法。</p>\n<h1 id=\"矩阵乘先后顺序的影响\"><a class=\"anchor\" href=\"#矩阵乘先后顺序的影响\">#</a> 矩阵乘先后顺序的影响</h1>\n<p>以严格按照矩阵标准的 行 * 列 运算为前提，权重和输入的先后顺序会影响其内存排布。</p>\n<p><img loading=\"lazy\" data-src=\"1716466223424.jpg\" alt=\"两种排布情况下矩阵乘先后顺序不同对数据变换的影响\"></p>\n<p>已经讲解了简单的 im2col 算法在 NCHW 排布<a href=\"https://forcheetah.github.io/2024/05/15/accelerate1/\">上一篇文章</a>和 NHWC 排布情况下的 2D 内存排布情况。上图总结了两种排布情况下 矩阵乘先后顺序不同对数据变换的影响。</p>\n<ul>\n<li>NCHW 排布  kernel 在前  只需要对 input 做 im2col 变换</li>\n<li>NCHW 排布  input 在前  多出来对权重的转置变换 和输出的转置变换</li>\n<li>NHWC 排布  kernel 在前  需要对权重数据进行重排 以及输出进行转置</li>\n<li>NHWC 排布  input 在前  需要对权重进行转置</li>\n</ul>\n<p>当然，在真正运算矩阵乘时，如果有行优先货列优先的调整，就需要具体问题具体分析了。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "accelerate",
                "conv"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/05/23/conv1/",
            "url": "https://forcheetah.github.io/2024/05/23/conv1/",
            "title": "【Im2Col】卷积加速算法【1】 NCHW",
            "date_published": "2024-05-23T11:31:49.363Z",
            "content_html": "<p>本文为最基本的 Im2Col 算法的原理及实现。<br>\n加速算法道阻且长，想要选择最优的算法，需要通盘考虑现实需求、软件算法、硬件支持，这就是 “坚持理论联系实际”。 所以这里只是对 Im2Col 算法最基本的原理探讨。<br>\n探索本就是由正确和错误交织而成，还望各位不吝赐教！</p>\n<blockquote>\n<p>现在想起来，光是遇到你这个家伙，就感觉自己赚到了。<br>\n------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<h1 id=\"卷积算法\"><a class=\"anchor\" href=\"#卷积算法\">#</a> 卷积算法</h1>\n<p>将 Im2col 算法之前，不得不再提一下卷积。卷积是一种运算，在神经网络中是提取特征的过程，具体的操作过程是在输入特征中不断滑动卷积核大小的窗口，与卷积核做乘加运算，得到输出结果。</p>\n<p>先定义一下维度的符号： 卷积核 ：【C_out, C_in, Hk, Wk】   输入 ： 【B, C_in, H, W】  输出：【B, C_out, Ho, Wo】</p>\n<p><img loading=\"lazy\" data-src=\"1715770544973.jpg\" alt=\"卷积运算流程\"></p>\n<p>上图是维度非常小的一个卷积运算的图示，左边卷积核维度为【9，3，3，3】，即个数为 9，通道数为 3（个数和通道数均未在图中展示出来）的 3*3 卷积核。中间为 Input 的维度，周围方格蓝色代表 tensor 的 pad，中间黄色代表维度为【1，3，5，5】的 Input，即通道为 3，长宽 5*5。</p>\n<p>进行卷积过程中，卷积核（3*3，通道为 3）先横向滑动（5 次），再纵向滑动（5 次）；每到一个位置计算 kernel 与 Input 对应位置的乘积和，因此得到 output 5*5 的结果。9 个卷积核依次进行，得到输出大小【1，9，5，5】</p>\n<p>想要理解卷积乃至实现卷积加速算法，不仅要知道计算过程，还要格外关注数据在内存中的排布顺序。在内存中所有的数据都是一维存储的，例如 Input【1，3，5，5】，在内存中只有一个连续的、大小为 75 的数组，【1，3，5，5】只是它的逻辑维度；最后一个维度的 5 个数字是连续的（0~4），紧接着是下一行（5~9）......</p>\n<p>图中仅画出了平面的大小，通道方向就要靠大家的想象了，上图中每个格子后面还有 2 个格子（通道数为 3）。<br>\n简单的卷积更容易看清 Im2col 算法的流程，本文以及后续系列文章都将以这个例子进行。</p>\n<h1 id=\"im2col算法\"><a class=\"anchor\" href=\"#im2col算法\">#</a> Im2Col 算法</h1>\n<p>为什么要对卷积算法进行加速呢？</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> batch <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> batch<span class=\"token operator\">&lt;</span>in_n<span class=\"token punctuation\">;</span> batch<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;</span> out_c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> out_row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> out_row <span class=\"token operator\">&lt;</span> out_h<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>out_row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> out_col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> out_col <span class=\"token operator\">&lt;</span> out_w<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>out_col<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> imap <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> imap <span class=\"token operator\">&lt;</span> in_c<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>imap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> kr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> kr <span class=\"token operator\">&lt;</span> ker_size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>kr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> kc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> kc <span class=\"token operator\">&lt;</span> ker_size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>kc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                                dosomething<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上方是个典型的卷积算法，要实现一个卷积，不仅要遍历 batch、C_out、Ho、Wo，还要遍历整个卷积核的维度，整个循环达到了 7 层之多。当输入数据维度变大时，整个卷积占用的资源让人难以接受。提高神经网络的推理速度是推理引擎和 AI 芯片设计者不断的追求，而卷积又占了神经网络推理的大部分时间，因此卷积的加速是重中之重。<br>\nIm2Col 算法的原理就是将卷积运算<br>\n转化为矩阵运算，这一转换带来以下好处：</p>\n<ul>\n<li>\n<p>易于优化：由于 GEMM 操作在计算库中被广泛研究和优化，开发者可以利用这些库的最新进展提高效率。</p>\n</li>\n<li>\n<p>并行化和硬件支持：矩阵乘法天然适合并行处理；大多硬件平台都会充分利用其硬件资源，对矩阵乘法进行深度优化。通过使用如 CUDA、cuDNN、OpenBLAS 等库，可以实现并行计算，极大地加速卷积运算。</p>\n</li>\n<li>\n<p>内存管理灵活性：虽然 im2col 需要额外的内存来存储展开后的矩阵，但通过调整实现策略（如分块处理），可以在内存使用和计算效率之间找到平衡。</p>\n</li>\n</ul>\n<p>总之，尽管 Im2col 算法没有减少任何计算量，甚至还给内存管理带来挑战，但是矩阵的高效运算、硬件、并行等仍然能够在很多场景下提高卷积计算效率。</p>\n<h1 id=\"im2col变换\"><a class=\"anchor\" href=\"#im2col变换\">#</a> Im2Col 变换</h1>\n<p>Im2col 算法是将卷积转换成两个 2D 矩阵乘运算。(kernel_2D * input_2D)  与 (input_2D * kernel_2D) 矩阵乘的顺序不同，所需要的 4D 到 2D 变换也不同，我们先将 kernel_2D 放在前面，也就是 (kernel_2D * input_2D)，最后再讨论 kernel_2D 放在前面还是后面的区别。</p>\n<p>再看一遍下面这个简单的卷积样例，输入 tensor 按照 nchw 排布。</p>\n<p><img loading=\"lazy\" data-src=\"1715770588007.jpg\" alt=\"卷积样例\"></p>\n<p>直接展开 2D 形式，两个矩阵形式如下。</p>\n<p><img loading=\"lazy\" data-src=\"1715770625347.jpg\" alt=\"Im2Col 2D示意图\"></p>\n<p><strong>图 “Im2Col 2D 示意图” 左边是 kernel_2D</strong></p>\n<ul>\n<li>\n<p>1. 原 kernel_4D 维度为【9，3，3，3】，拥有 9 个 kernel，将其第一个 kernel 按照【C_in, Kh, Kw】的顺序完全展平，也就是第一行绿色部分，共有 28 个数。</p>\n</li>\n<li>\n<p>2. 依次将余下 8 个 kernel 按照相同的方式展平，就得到了 kernel_2D。</p>\n</li>\n<li>\n<p>3.kernel_2D 维度为【9，27】</p>\n</li>\n</ul>\n<p>惊喜地发现，kernel_2D 的内存排布和 kernel_4D 完全一致，不需要任何内存搬运！</p>\n<p><strong>图 “Im2Col 2D 示意图” 右边是 Input_2D</strong></p>\n<ul>\n<li>\n<p>1. 矩阵乘是 行 * 列；kernel_2D 中，一行代表一个卷积核【C_in, Kh, Kw】；所以 input_2D 的一列是 “一个卷积核滑动窗口” 对应的数据。</p>\n</li>\n<li>\n<p>2. 右图中，前半部分空数据代表 pad,  后面的大面积空白只是懒得填上数字。</p>\n</li>\n<li>\n<p>3. 例如，右图中蓝色的一列数据，代表图 2 中，卷积核滑动到蓝色窗口时对应的 input 数据。即第一个 channel：(pad,pad,pad;3,4,pad;8,9,pad)； 第二个 channel：(pad,pad,pad;28,29,pad;33,34,pad)；第三个 channel：(pad,pad,pad;53,54,pad;58,59,pad)</p>\n</li>\n<li>\n<p>4. 那么 input_2D 一行数据代表什么呢？代表 kernel 在 input 中窗口的横向移动和纵向移动。在本例子中，窗口需要纵向滑动 5 次，每次纵向滑动都要横向滑动 5 次，一共产生 25 次窗口滑动。</p>\n</li>\n<li>\n<p>5. 总结：25 次窗口滑动，每次滑动形成窗口对应的一列 27 个数据。input_2D 的维度为【27，25】</p>\n</li>\n</ul>\n<p><strong>输出 output</strong></p>\n<p>kernel_2D 【9，27】* input_2D【27，25】得到结果 output_2D 【9，25】，刚好是输出 output【1，9，5，5】的内存排布方式。因此输出也不需要额外的内存转换。</p>\n<h1 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h1>\n<p>这里是将 input 由 nchw 转为 2D 排布的代码。如果感兴趣，可以在  <a href=\"https://github.com/ForCheetah/ConvAccelerate\">卷积加速算法模拟</a> 下载完整的测试代码。并通过 “TestIm2FlavorConvLayer ();” 函数进行测试。同时函数 “TestIm2ColConvIMW” 是 NCHW 排布下 Input_2D 在前，kernel_2D 在后的 Im2Col 算法实现。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Im2Col</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>data_im<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> channels<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> kernel_h<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> kernel_w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> pad_h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> pad_w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> stride_h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> stride_w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>data_col<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> output_h <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> pad_h <span class=\"token operator\">-</span> kernel_h <span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> stride_h <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> output_w <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> pad_w <span class=\"token operator\">-</span> kernel_w<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> stride_w <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> channel_size <span class=\"token operator\">=</span> height <span class=\"token operator\">*</span> width<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> channel <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> channel <span class=\"token operator\">&lt;</span> channels<span class=\"token punctuation\">;</span> channel<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> data_im <span class=\"token operator\">+=</span> channel_size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> kernel_row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> kernel_row <span class=\"token operator\">&lt;</span> kernel_h<span class=\"token punctuation\">;</span> kernel_row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> kernel_col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> kernel_col <span class=\"token operator\">&lt;</span> kernel_w<span class=\"token punctuation\">;</span> kernel_col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">int</span> input_row <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>pad_h <span class=\"token operator\">+</span> kernel_row<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> output_rows <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> output_rows<span class=\"token operator\">&lt;</span>output_h<span class=\"token punctuation\">;</span> output_rows<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_a_ge_zero_and_a_lt_b</span><span class=\"token punctuation\">(</span>input_row<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> output_cols <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> output_cols<span class=\"token operator\">&lt;</span>output_w<span class=\"token punctuation\">;</span> output_cols<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                            <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>data_col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token keyword\">int</span> input_col <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>pad_w <span class=\"token operator\">+</span> kernel_col<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> output_col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> output_col<span class=\"token operator\">&lt;</span>output_w<span class=\"token punctuation\">;</span> output_col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_a_ge_zero_and_a_lt_b</span><span class=\"token punctuation\">(</span>input_col<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                                <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>data_col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> data_im<span class=\"token punctuation\">[</span>input_row <span class=\"token operator\">*</span> width <span class=\"token operator\">+</span> input_col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                                <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>data_col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                            input_col <span class=\"token operator\">+=</span> stride_w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    input_row <span class=\"token operator\">+=</span> stride_h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"矩阵乘先后顺序的影响\"><a class=\"anchor\" href=\"#矩阵乘先后顺序的影响\">#</a> 矩阵乘先后顺序的影响</h1>\n<p>以严格按照矩阵标准的 行 * 列 运算为前提，权重和输入的先后顺序会影响其内存排布。</p>\n<p><img loading=\"lazy\" data-src=\"1715770640439.jpg\" alt=\"Kernel_2D * Input_2D\"><br>\n 在输入为 nchw 排布，输出也是 nchw 排布情况下，kernel_2D 在前，Input_2D 在后，只需要对 Input 进行 Im2Col 变换。</p>\n<p><img loading=\"lazy\" data-src=\"1715770657999.jpg\" alt=\"Input_2D * Kernel_2D\"><br>\n 在输入为 nchw 排布，输出也是 nchw 排布情况下，Input_2D 在前，kernel_2D 在后，多出了对 kernel 和 output 的转置操作。</p>\n<p>当然，在真正运算矩阵乘时，如果有行优先货列优先的调整，就需要具体问题具体分析了。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "accelerate",
                "conv"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/05/15/openBlas/",
            "url": "https://forcheetah.github.io/2024/05/15/openBlas/",
            "title": "openBlas库的安装与简单使用",
            "date_published": "2024-05-15T12:27:08.224Z",
            "content_html": "<h1 id=\"编译\"><a class=\"anchor\" href=\"#编译\">#</a> 编译</h1>\n<p>在官网上下载 zip 或通过 git 下载：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>weget https://github.com/OpenMathLib/OpenBLAS.git</pre></td></tr></table></figure><p>将文件解压后进入工程主目录</p>\n<p>编译 openblas 库</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token parameter variable\">-j32</span></pre></td></tr></table></figure><p>导出 依赖库</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token function\">install</span> <span class=\"token assign-left variable\">PREFIX</span><span class=\"token operator\">=</span>/path/to/your/admire</pre></td></tr></table></figure><h1 id=\"cblas_sgemm函数\"><a class=\"anchor\" href=\"#cblas_sgemm函数\">#</a> cblas_sgemm 函数</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cblas_sgemm</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">,</span> transA<span class=\"token punctuation\">,</span> transB<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">,</span> K<span class=\"token punctuation\">,</span> ALPHA<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">,</span> LDA<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> LDB<span class=\"token punctuation\">,</span> BETA<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">,</span> LDC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>order <span class=\"token operator\">:</span> ClasRowMajow 行优先  ClasColMajow 列优先</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>transA <span class=\"token operator\">:</span> CblasTrans  转置     CblasNoTrans 不转置</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>transA <span class=\"token operator\">:</span> CblasTrans  转置     CblasNoTrans 不转置</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>M <span class=\"token operator\">:</span> 表示 A或C的行数。如果A转置，则表示转置后的行数    A的行数（transA处理之后）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>N <span class=\"token operator\">:</span> 表示 B或C的列数。如果B转置，则表示转置后的列数    B的列数（transB处理之后）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>K <span class=\"token operator\">:</span> K <span class=\"token operator\">=</span> A的列数 <span class=\"token operator\">=</span> B的行数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ALPHA <span class=\"token operator\">:</span> <span class=\"token function\">ALPHA</span><span class=\"token punctuation\">(</span>A<span class=\"token operator\">*</span>B<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>BETA<span class=\"token operator\">*</span>C  矩阵权重</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>A <span class=\"token operator\">:</span> 输入矩阵<span class=\"token function\">A</span>  <span class=\"token punctuation\">(</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>LDA <span class=\"token operator\">:</span> A所在矩阵的列数   有可能 LAD<span class=\"token operator\">></span>K</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>B <span class=\"token operator\">:</span> 输入矩阵<span class=\"token function\">B</span>  <span class=\"token punctuation\">(</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>LDB <span class=\"token operator\">:</span> B所在矩阵的列数   有可能 LDB<span class=\"token operator\">></span>N</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>BETA <span class=\"token operator\">:</span> <span class=\"token function\">ALPHA</span><span class=\"token punctuation\">(</span>A<span class=\"token operator\">*</span>B<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>BETA<span class=\"token operator\">*</span>C  偏置权重</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>C <span class=\"token operator\">:</span> 偏置C  同时也是输出<span class=\"token function\">C</span>  <span class=\"token punctuation\">(</span>M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>LDC <span class=\"token operator\">:</span> C所在矩阵的列数   有可能 LDC<span class=\"token operator\">></span>N</pre></td></tr></table></figure><h1 id=\"使用例子\"><a class=\"anchor\" href=\"#使用例子\">#</a> 使用例子</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cblas.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> M<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> K<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> beta<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> lda<span class=\"token operator\">=</span>K<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ldb<span class=\"token operator\">=</span>N<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ldc<span class=\"token operator\">=</span>N<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> A<span class=\"token punctuation\">[</span>M<span class=\"token operator\">*</span>K<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> B<span class=\"token punctuation\">[</span>K<span class=\"token operator\">*</span>N<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">float</span> C<span class=\"token punctuation\">[</span>M<span class=\"token operator\">*</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">cblas_sgemm</span><span class=\"token punctuation\">(</span>CblasRowMajor<span class=\"token punctuation\">,</span> CblasNoTrans<span class=\"token punctuation\">,</span> CblasNoTrans<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">,</span> K<span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">,</span> lda<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> ldb<span class=\"token punctuation\">,</span> beta<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">,</span> ldc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>M<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span>C<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>N<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对应的 CMakeLists.txt 文件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    /path/to/your/admire/include<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>find_library<span class=\"token punctuation\">(</span>OpenBlas_Lib openblas HINTS /path/to/your/admire/lib<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>AUX_SOURCE_DIRECTORY<span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src   SRC_FILE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>SRC_FILE <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/test.cpp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>add_executable <span class=\"token punctuation\">(</span>demo <span class=\"token variable\">$&#123;SRC_FILE&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>target_link_libraries <span class=\"token punctuation\">(</span>demo <span class=\"token variable\">$&#123;OpenBlas_Lib&#125;</span> m<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在工程主目录</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>./demo</pre></td></tr></table></figure><h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "Linux",
                "openBlas"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/05/14/cpplib/",
            "url": "https://forcheetah.github.io/2024/05/14/cpplib/",
            "title": "C语言工程调用Cpp库解决方案",
            "date_published": "2024-05-14T12:37:34.628Z",
            "content_html": "<p>本文为 C 语言工程调用 C++ 库的解决方案。</p>\n<p>应用场景： 需要 C++ 程序编译成的库提供函数接口，来解决 C 语言工程的需求。</p>\n<p>想要快速解决问题，直接看 三、通用解决方法</p>\n<blockquote>\n<p>人的出场顺序真的很重要，很多人如果换一个时间认识，换一个时间共处，一切都将是不一样的场景，不一样的结局。所以，人生有无限种可能，我的人生，是现在这一种。感谢大家恰到好处的出现，组成我最好的一种可能。<br>\n------   大家好啊    我是   暮冬 Z 羡慕</p>\n</blockquote>\n<h1 id=\"c库可以编辑的情况\"><a class=\"anchor\" href=\"#c库可以编辑的情况\">#</a> C++ 库可以编辑的情况</h1>\n<p>C++ 库由自己编写，可以决定头文件书写的位置</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"iostream\"</span> <span class=\"token comment\">// 将用到的 C++ 标准库，如 iostream，放在本 cpp 文件中</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" # iostream: i am saying hello !\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" # c: i am saying hello !\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建 hello.cpp 文件，实现 sayHello () 功能，分别用 C++ 标准库和 C 标准库的输入输出功能打印 hello！</p>\n<p>①需要注意的是 “将 C++ 标准库放在该 cpp 文件中”，原因后续指出。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span>  <span class=\"token comment\">// 这里不能出现 C++ 标准库</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>创建头文件 hello.h   这里可以添加 C 语言标准库，但是不要把 C++ 标准库放在这里。</p>\n<p>以上 hello.h 和 hello.cpp 模拟了 C++ 库。为了使 C 语言工程能够调用该库，需要增加一个中间层</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// helloWapper.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"helloWapper.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建中间层 helloWapper.cpp ， 对想要使用的 C++ 库函数进行封装，即： 通过 Wapper_sayHello () 调用 sayHello ()</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// helloWapper.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>创建中间层头文件 helloWapper.h，暴露 Wapper_sayHello () 接口。中间出现的 extern &quot;C&quot; {} 是告诉 G++ 编译器，对中间的函数按照 C 语言的方式进行编译。</p>\n<p>然后将上述两个 CPP 文件编译成 静态库 ，使用的 CMakeLists.txt 文件如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include <span class=\"token punctuation\">)</span> <span class=\"token comment\"># 指定头文件位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>test_call_LIST <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/hello.cpp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/helloWapper.cpp<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定需要编译的 CPP 文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>set<span class=\"token punctuation\">(</span>LIBRARY_OUTPUT_PATH <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 指定库输出路径</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>add_library<span class=\"token punctuation\">(</span>hello STATIC <span class=\"token variable\">$&#123;test_call_LIST&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 编译</span></pre></td></tr></table></figure><p>所有文件结构如下：<br>\n<img loading=\"lazy\" data-src=\"1715602113090.jpg\" alt=\"文件结构图\"></p>\n<p>在工程根目录输入</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build <span class=\"token operator\">&amp;</span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake <span class=\"token punctuation\">..</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr></table></figure><p>bin 文件夹下就会出现 封装好的库 libhello.a</p>\n<p>创建 mian.c 来模拟 C 语言工程：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"helloWapper.h\"</span>  <span class=\"token comment\">// 调用 C++ 库接口</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>A：通过命令行进行编译运行</strong></p>\n<p>回到工程根目录，编译 main.c ， 运行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gcc <span class=\"token parameter variable\">-o</span> Hello ./src/main.c -I./include -L./bin <span class=\"token parameter variable\">-lhello</span> -lstdc++</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./Hello</pre></td></tr></table></figure><p><strong>B：通过 Cmake 编译运行</strong></p>\n<p>在工程根目录，将 CMakeList.txt 内容替换为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># CMakeList.txt</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定头文件目录</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>find_library<span class=\"token punctuation\">(</span>Hello_LIB hello HINTS <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 引入 libhello.a 静态库</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>hello_List <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>add_executable <span class=\"token punctuation\">(</span>Hello <span class=\"token variable\">$&#123;hello_List&#125;</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 默认 gcc 编译 main.c</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>target_link_libraries <span class=\"token punctuation\">(</span>Hello <span class=\"token variable\">$&#123;Hello_LIB&#125;</span> stdc++<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> build <span class=\"token operator\">&amp;&amp;</span> cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./Hello</pre></td></tr></table></figure><p>A B 两种方式均输出结果： 至此 C 语言工程能够成功调用 C++ 库</p>\n<p><img loading=\"lazy\" data-src=\"1715602427908.jpg\" alt=\"输出结果\"></p>\n<p>以上 A B 两种方式中均出现 stdc++ ，一般以 libstdc++.so 的方式存在，是 C++ 标准库。</p>\n<p>可以看下图 “G++ and GCC”</p>\n<p><img loading=\"lazy\" data-src=\"1715602427908.jpg\" alt=\" “G++ and GCC”\"></p>\n<p>GCC 在编译时不会自动链接 C++ 标准库， 因此 hello.cpp 用到的 类似 &quot;iostream&quot; 等 C++ 标准库需要手动链接，否则会出现以下错误：</p>\n<p><img loading=\"lazy\" data-src=\"1715686800105.jpg\" alt=\"找不到C++标准库错误\"></p>\n<h1 id=\"c库为第三方库无法编辑的情况\"><a class=\"anchor\" href=\"#c库为第三方库无法编辑的情况\">#</a> C++ 库为第三方库，无法编辑的情况</h1>\n<p>在《一、C<ins> 库可以编辑的情况》 中提到  【①需要注意的是 “ 将 C</ins> 标准库放在该 cpp 文件中”】 是因为 GCC 编译不仅找不到 C<ins> 标准库 stdc</ins> ，也找不到 C++ 标准库的头文件。如果在 hello.h 中引用 “iostream&quot;， 那么用 GCC 编译 C 语言工程时，会报找不到头文件错误。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span>  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"iostream\"</span>  <span class=\"token comment\">// 这里出现了 C++ 标准库</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但是当我们想用的 C<ins> 库为第三方库，而它在头文件里引用了大量 C</ins> 标准库的情况下，该如何处理呢？</p>\n<p>再看图 “G++ and GCC”，里面指明 G<ins> 编译器能够编译 C 和 C</ins> 文件，且能够自动链接 C<ins> 标准库。所以在这种情况下，只需要在编译 C 语言工程的时候，指定 G</ins> 为编译器（编译 C 文件默认使用的是 GCC 编译器）就可以了。</p>\n<p>下面是与《一、C++ 库可以编辑的情况》相似的总体流程（有修改的地方会有注释）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span>  <span class=\"token comment\">// C++ 标准库头文件转移到 hello.h 中</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" # iostream: i am saying hello !\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" # c: i am saying hello !\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建 hello.cpp 文件，实现 sayHello () 功能，分别用 C++ 标准库和 C 标准库的输入输出功能打印 hello！</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span> </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"iostream\"</span>  <span class=\"token comment\">// C++ 标准库出现在这里</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>创建头文件 hello.h<br>\n 以上 hello.h 和 hello.cpp 模拟了 C++ 库。为了使 C 语言工程能够调用该库，需要增加一个中间层：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// helloWapper.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"helloWapper.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建中间层 helloWapper.cpp ， 对想要使用的 C++ 库函数进行封装，即： 通过 Wapper_sayHello () 调用 sayHello ()</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// helloWapper.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>创建中间层头文件 helloWapper.h，暴露 Wapper_sayHello () 接口。中间出现的 extern &quot;C&quot; {} 是告诉 G++ 编译器，对中间的函数按照 C 语言的方式进行编译。<br>\n然后将上述两个 CPP 文件编译成 静态库 ，使用的 CMakeLists.txt 文件如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include <span class=\"token punctuation\">)</span> <span class=\"token comment\"># 指定头文件位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>test_call_LIST <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/hello.cpp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/helloWapper.cpp<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定需要编译的 CPP 文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>set<span class=\"token punctuation\">(</span>LIBRARY_OUTPUT_PATH <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 指定库输出路径</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>add_library<span class=\"token punctuation\">(</span>hello STATIC <span class=\"token variable\">$&#123;test_call_LIST&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 编译</span></pre></td></tr></table></figure><p>文件结构还是图：文件结构图</p>\n<p>在工程根目录输入</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build <span class=\"token operator\">&amp;</span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake <span class=\"token punctuation\">..</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr></table></figure><p>bin 文件夹下就会出现 封装好的库 libhello.a<br>\n 创建 mian.c 来模拟 C 语言工程：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"helloWapper.h\"</span>  <span class=\"token comment\">// 调用 C++ 库接口</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>A：通过命令行进行编译运行</strong><br>\n回到工程根目录，编译 main.c ， 运行：<br>\n编译器使用了 g++ ，可以自动搜索 C<ins> 标准库路径及链接 C</ins> 标准库，因此不需要再加 “-lstdc++”。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>g++ <span class=\"token parameter variable\">-o</span> Hello ./src/main.c -I./include -L./bin <span class=\"token parameter variable\">-lhello</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./Hello</pre></td></tr></table></figure><p><strong>B：通过 Cmake 编译运行</strong><br>\n在工程根目录，将 CMakeList.txt 内容替换为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># CMakeList.txt</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SET<span class=\"token punctuation\">(</span>CMAKE_C_COMPILER <span class=\"token string\">\"g++\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定使用  g++ 编译器进行编译</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定头文件目录</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>find_library<span class=\"token punctuation\">(</span>Hello_LIB hello HINTS <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 引入 libhello.a 静态库</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>hello_List <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>add_executable <span class=\"token punctuation\">(</span>Hello <span class=\"token variable\">$&#123;hello_List&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>target_link_libraries <span class=\"token punctuation\">(</span>Hello <span class=\"token variable\">$&#123;Hello_LIB&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>编译、执行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> build <span class=\"token operator\">&amp;&amp;</span> cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./Hello</pre></td></tr></table></figure><h1 id=\"通用方法\"><a class=\"anchor\" href=\"#通用方法\">#</a> 通用方法</h1>\n<p>可以忽略方法一和二。方法三可以采用 GCC 编译调用了 C<ins> 库的 C 语言工程。<br>\n解决的方法是： 在 中间层 helloWapper.cpp 中引用 C</ins> 库头文件 #include &quot;hello.h&quot;， 而不是在 helloWapper.h 中引用</p>\n<p>例子：<br>\n创建 C++ 库源文件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span>  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" # iostream: i am saying hello !\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" # c: i am saying hello !\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建头文件 hello.h</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// hello.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span> </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"iostream\"</span> </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以上 hello.h 和 hello.cpp 模拟了 C++ 库。为了使 C 语言工程能够调用该库，需要增加一个中间层</p>\n<p>其中注意：一定要将 C<ins> 库的头文件 &quot;hello.h&quot; 加在 中间层的.cpp 文件中， 而不是放在中间层.h 文件中。这种情况下能够将 &quot;hello.h&quot; 等所有 C</ins> 库头文件编译到库当中，防止最后采用 GCC 编译时找不到 g++ 标准库的头文件。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// helloWapper.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span>  <span class=\"token comment\">// 一定要将 C++ 库的头文件 \"hello.h\" 加在 中间层的 cpp 文件中</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"helloWapper.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// helloWapper.h</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus  </span><span class=\"token comment\">// 不要把 #include \"hello.h\" 放在这里</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>创建中间层头文件 helloWapper.h，暴露 Wapper_sayHello () 接口。中间出现的 extern &quot;C&quot; {} 是告诉 G++ 编译器，对中间的函数按照 C 语言的方式进行编译。</p>\n<p>然后将上述两个 CPP 文件编译成 静态库 ，使用的 CMakeLists.txt 文件如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include <span class=\"token punctuation\">)</span> <span class=\"token comment\"># 指定头文件位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>test_call_LIST <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/hello.cpp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/helloWapper.cpp<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定需要编译的 CPP 文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>set<span class=\"token punctuation\">(</span>LIBRARY_OUTPUT_PATH <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 指定库输出路径</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>add_library<span class=\"token punctuation\">(</span>hello STATIC <span class=\"token variable\">$&#123;test_call_LIST&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 编译</span></pre></td></tr></table></figure><p>文件结构还是图：文件结构图</p>\n<p>在工程根目录输入</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> build <span class=\"token operator\">&amp;</span> <span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake <span class=\"token punctuation\">..</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr></table></figure><p>bin 文件夹下就会出现 封装好的库 libhello.a<br>\n 创建 mian.c 来模拟 C 语言工程：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"helloWapper.h\"</span>  <span class=\"token comment\">// 调用 C++ 库接口</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Wapper_sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>A：通过命令行进行编译运行</strong><br>\n回到工程根目录，编译 main.c ， 运行：<br>\n编译器使用了 gcc ，需要添加 C<ins> 标准库 “ -lstdc</ins>”（标准库的头文件已经在 C++ 库中了）。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gcc <span class=\"token operator\">-</span>o Hello <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>main<span class=\"token punctuation\">.</span>c <span class=\"token operator\">-</span>I<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>include <span class=\"token operator\">-</span>L<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>bin <span class=\"token operator\">-</span>lhello <span class=\"token operator\">-</span>lstdc<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>Hello</pre></td></tr></table></figure><p><strong>B：通过 Cmake 编译运行</strong><br>\n在工程根目录，将 CMakeList.txt 内容替换为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># CMakeList.txt</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake_minimum_required <span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>project <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>include_directories <span class=\"token punctuation\">(</span><span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定头文件目录</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>find_library<span class=\"token punctuation\">(</span>Hello_LIB hello HINTS <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 引入 libhello.a 静态库</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span>hello_List <span class=\"token variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>add_executable <span class=\"token punctuation\">(</span>Hello <span class=\"token variable\">$&#123;hello_List&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>target_link_libraries <span class=\"token punctuation\">(</span>Hello <span class=\"token variable\">$&#123;Hello_LIB&#125;</span> stdc++<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>编译、执行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> build <span class=\"token operator\">&amp;&amp;</span> cmake <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./Hello</pre></td></tr></table></figure><p>方法三是最通用的解决方法，不仅仍然可以使用 GCC 编译，而且想要在其他地方调用 C++ 库时，需要的头文件只有 “helloWapper.h” 一个。</p>\n<h1 id=\"后记\"><a class=\"anchor\" href=\"#后记\">#</a> 后记</h1>\n<p>本博客目前以及可预期的将来都不会支持评论功能。各位大侠如若有指教和问题，可以在我的 <a href=\"https://github.com/ForCheetah/ForCheetah.github.io\">github 项目</a> 或随便一个项目下提出 issue，或者<a href=\"https://www.zhihu.com/people/guai-dao-ji-de-3-50\">知乎</a> 私信，并指明哪一篇博客，我看到一定及时回复，感激不尽！</p>\n",
            "tags": [
                "Linux",
                "lib"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/05/12/test/",
            "url": "https://forcheetah.github.io/2024/05/12/test/",
            "title": "foo",
            "date_published": "2024-05-12T13:14:18.428Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello, world!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": [
                "bar",
                "baz"
            ]
        },
        {
            "id": "https://forcheetah.github.io/2024/05/12/hello-world/",
            "url": "https://forcheetah.github.io/2024/05/12/hello-world/",
            "title": "Hello World",
            "date_published": "2024-05-12T05:14:13.974Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h1 id=\"模板\"><a class=\"anchor\" href=\"#模板\">#</a> 模板</h1>\n<p>未删除的模板文件。</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        }
    ]
}